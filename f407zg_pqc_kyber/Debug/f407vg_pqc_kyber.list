
f407vg_pqc_kyber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800a738  0800a738  0001a738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac9c  0800ac9c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca4  0800aca4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca8  0800aca8  0001aca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800acac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00002044  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200020c4  200020c4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016371  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003504  00000000  00000000  0003641d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00039928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f90  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024025  00000000  00000000  0003b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f1e  00000000  00000000  0005fa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0675  00000000  00000000  00077933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147fa8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005100  00000000  00000000  00147ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a720 	.word	0x0800a720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a720 	.word	0x0800a720

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 fb65 	bl	8001c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f83d 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f931 	bl	80007dc <MX_GPIO_Init>
  MX_RNG_Init();
 800057a:	f000 f8a3 	bl	80006c4 <MX_RNG_Init>
  MX_TIM2_Init();
 800057e:	f000 f8b5 	bl	80006ec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f901 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0x78>)
 8000588:	f002 fc0e 	bl	8002da8 <HAL_TIM_Base_Start>
  uint32_t time = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  unsigned int cycles = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
  printf("Kyber\n");
 8000594:	4813      	ldr	r0, [pc, #76]	; (80005e4 <main+0x7c>)
 8000596:	f008 fee9 	bl	800936c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("running tests...\n");
 800059a:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0x80>)
 800059c:	f008 fee6 	bl	800936c <puts>
	  time = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
	  cycles = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
	  perf_counter_reset();
 80005a8:	f000 fa88 	bl	8000abc <perf_counter_reset>

	  TIM2->CNT = 0;
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
	  perf_counter_start();
 80005b4:	f000 faae 	bl	8000b14 <perf_counter_start>

	  // test_keys();
	  test_speed();
 80005b8:	f000 fcb4 	bl	8000f24 <test_speed>

	  perf_counter_stop();
 80005bc:	f000 fabc 	bl	8000b38 <perf_counter_stop>
	  time = TIM2->CNT; // time in micro seconds
 80005c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c6:	607b      	str	r3, [r7, #4]
	  cycles = perf_counter_value(); // CPU Cycles
 80005c8:	f000 fac6 	bl	8000b58 <perf_counter_value>
 80005cc:	6038      	str	r0, [r7, #0]
	  printf("Done!\n");
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x84>)
 80005d0:	f008 fecc 	bl	800936c <puts>

	  HAL_Delay(3000);
 80005d4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d8:	f001 fba2 	bl	8001d20 <HAL_Delay>
	  printf("running tests...\n");
 80005dc:	e7dd      	b.n	800059a <main+0x32>
 80005de:	bf00      	nop
 80005e0:	200000e0 	.word	0x200000e0
 80005e4:	0800a738 	.word	0x0800a738
 80005e8:	0800a740 	.word	0x0800a740
 80005ec:	0800a754 	.word	0x0800a754

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 fe0f 	bl	8009222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066e:	2307      	movs	r3, #7
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fe3e 	bl	80022f8 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 fa75 	bl	8000b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 f89f 	bl	80027e8 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 fa5e 	bl	8000b70 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_RNG_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <MX_RNG_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_RNG_Init+0x20>)
 80006d0:	f002 fa86 	bl	8002be0 <HAL_RNG_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006da:	f000 fa49 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000d0 	.word	0x200000d0
 80006e8:	50060800 	.word	0x50060800

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_TIM2_Init+0x94>)
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_TIM2_Init+0x94>)
 8000712:	22a8      	movs	r2, #168	; 0xa8
 8000714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_TIM2_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_TIM2_Init+0x94>)
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_TIM2_Init+0x98>)
 8000720:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_TIM2_Init+0x94>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM2_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_TIM2_Init+0x94>)
 8000730:	f002 faeb 	bl	8002d0a <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 fa19 	bl	8000b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4619      	mov	r1, r3
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_TIM2_Init+0x94>)
 800074c:	f002 fb94 	bl	8002e78 <HAL_TIM_ConfigClockSource>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 fa0b 	bl	8000b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_TIM2_Init+0x94>)
 8000768:	f002 fd88 	bl	800327c <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000772:	f000 f9fd 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200000e0 	.word	0x200000e0
 8000784:	000f4240 	.word	0x000f4240

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 fdd8 	bl	8003374 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f9d1 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000128 	.word	0x20000128
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4ba2      	ldr	r3, [pc, #648]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4aa1      	ldr	r2, [pc, #644]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b9f      	ldr	r3, [pc, #636]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b9b      	ldr	r3, [pc, #620]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a9a      	ldr	r2, [pc, #616]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b98      	ldr	r3, [pc, #608]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b94      	ldr	r3, [pc, #592]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a93      	ldr	r2, [pc, #588]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b91      	ldr	r3, [pc, #580]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b8d      	ldr	r3, [pc, #564]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a8c      	ldr	r2, [pc, #560]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b8a      	ldr	r3, [pc, #552]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b86      	ldr	r3, [pc, #536]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a85      	ldr	r2, [pc, #532]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b83      	ldr	r3, [pc, #524]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b7f      	ldr	r3, [pc, #508]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a7e      	ldr	r2, [pc, #504]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b7c      	ldr	r3, [pc, #496]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	4879      	ldr	r0, [pc, #484]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 80008a0:	f001 fd10 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4877      	ldr	r0, [pc, #476]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80008aa:	f001 fd0b 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b4:	4875      	ldr	r0, [pc, #468]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 80008b6:	f001 fd05 	bl	80022c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	486c      	ldr	r0, [pc, #432]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 80008d2:	f001 fb5b 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4866      	ldr	r0, [pc, #408]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80008ee:	f001 fb4d 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	485e      	ldr	r0, [pc, #376]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 800090e:	f001 fb3d 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000916:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	485a      	ldr	r0, [pc, #360]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 8000928:	f001 fb30 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800092c:	2310      	movs	r3, #16
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093c:	2306      	movs	r3, #6
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	4852      	ldr	r0, [pc, #328]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 8000948:	f001 fb20 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800094c:	23e0      	movs	r3, #224	; 0xe0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095c:	2305      	movs	r3, #5
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	484a      	ldr	r0, [pc, #296]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 8000968:	f001 fb10 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096c:	2304      	movs	r3, #4
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4845      	ldr	r0, [pc, #276]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 8000980:	f001 fb04 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	483c      	ldr	r0, [pc, #240]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 80009a2:	f001 faf3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4833      	ldr	r0, [pc, #204]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 80009c0:	f001 fae4 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d6:	2306      	movs	r3, #6
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80009e2:	f001 fad3 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4825      	ldr	r0, [pc, #148]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 80009fc:	f001 fac6 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a12:	230a      	movs	r3, #10
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	481c      	ldr	r0, [pc, #112]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 8000a1e:	f001 fab5 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a22:	2320      	movs	r3, #32
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4815      	ldr	r0, [pc, #84]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 8000a36:	f001 faa9 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	2312      	movs	r3, #18
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 8000a58:	f001 fa98 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a60:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 8000a72:	f001 fa8b 	bl	8001f8c <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400

08000a98 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000aa0:	1d39      	adds	r1, r7, #4
 8000aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <__io_putchar+0x20>)
 8000aaa:	f002 fcb0 	bl	800340e <HAL_UART_Transmit>

    return ch;
 8000aae:	687b      	ldr	r3, [r7, #4]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000128 	.word	0x20000128

08000abc <perf_counter_reset>:
void perf_counter_reset(){
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
    DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <perf_counter_reset+0x40>)
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <perf_counter_reset+0x44>)
 8000ac4:	601a      	str	r2, [r3, #0]
    DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <perf_counter_reset+0x48>)
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <perf_counter_reset+0x4c>)
 8000aca:	601a      	str	r2, [r3, #0]
    SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <perf_counter_reset+0x50>)
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <perf_counter_reset+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
    *SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <perf_counter_reset+0x50>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <perf_counter_reset+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ae0:	601a      	str	r2, [r3, #0]
    *DWT_CYCCNT  = 0; // reset the counter
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <perf_counter_reset+0x40>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
    *DWT_CONTROL = 0;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <perf_counter_reset+0x48>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	2000016c 	.word	0x2000016c
 8000b00:	e0001004 	.word	0xe0001004
 8000b04:	200000cc 	.word	0x200000cc
 8000b08:	e0001000 	.word	0xe0001000
 8000b0c:	200000c8 	.word	0x200000c8
 8000b10:	e000edfc 	.word	0xe000edfc

08000b14 <perf_counter_start>:

void perf_counter_start(){
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
    *DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <perf_counter_start+0x20>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <perf_counter_start+0x20>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0201 	orr.w	r2, r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000cc 	.word	0x200000cc

08000b38 <perf_counter_stop>:

void perf_counter_stop(){
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
    *DWT_CONTROL = *DWT_CONTROL | 0 ; // disable the counter
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <perf_counter_stop+0x1c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <perf_counter_stop+0x1c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000cc 	.word	0x200000cc

08000b58 <perf_counter_value>:

unsigned int perf_counter_value(){
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
    return *DWT_CYCCNT;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <perf_counter_value+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	2000016c 	.word	0x2000016c

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bba:	2007      	movs	r0, #7
 8000bbc:	f001 f9a4 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_RNG_MspInit+0x48>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d115      	bne.n	8000c0a <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_RNG_MspInit+0x4c>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_RNG_MspInit+0x4c>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	6353      	str	r3, [r2, #52]	; 0x34
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_RNG_MspInit+0x4c>)
 8000bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2050      	movs	r0, #80	; 0x50
 8000c00:	f001 f98d 	bl	8001f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000c04:	2050      	movs	r0, #80	; 0x50
 8000c06:	f001 f9a6 	bl	8001f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	50060800 	.word	0x50060800
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c2c:	d10d      	bne.n	8000c4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_TIM_Base_MspInit+0x3c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f001 f95b 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 ffd2 	bl	8001ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <HASH_RNG_IRQHandler+0x10>)
 8000d46:	f001 ff75 	bl	8002c34 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000d0 	.word	0x200000d0

08000d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
	return 1;
 8000d58:	2301      	movs	r3, #1
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <_kill>:

int _kill(int pid, int sig)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6e:	f008 f9af 	bl	80090d0 <__errno>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2216      	movs	r2, #22
 8000d76:	601a      	str	r2, [r3, #0]
	return -1;
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_exit>:

void _exit (int status)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ffe7 	bl	8000d64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d96:	e7fe      	b.n	8000d96 <_exit+0x12>

08000d98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	e00a      	b.n	8000dc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000daa:	f3af 8000 	nop.w
 8000dae:	4601      	mov	r1, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf0      	blt.n	8000daa <_read+0x12>
	}

return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e009      	b.n	8000df8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe53 	bl	8000a98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf1      	blt.n	8000de4 <_write+0x12>
	}
	return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_close>:

int _close(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return -1;
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e32:	605a      	str	r2, [r3, #4]
	return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_isatty>:

int _isatty(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e7c:	4a14      	ldr	r2, [pc, #80]	; (8000ed0 <_sbrk+0x5c>)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <_sbrk+0x60>)
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <_sbrk+0x64>)
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <_sbrk+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d207      	bcs.n	8000eb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea4:	f008 f914 	bl	80090d0 <__errno>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	220c      	movs	r2, #12
 8000eac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	e009      	b.n	8000ec8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <_sbrk+0x64>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <_sbrk+0x64>)
 8000ec4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20020000 	.word	0x20020000
 8000ed4:	00000400 	.word	0x00000400
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	200020c8 	.word	0x200020c8

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <cpucycles>:
  return result;
}

#else

static inline uint64_t cpucycles(void) {
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  __asm__ volatile ("rdtsc; shlq $32,%%rdx; orq %%rdx,%%rax"
    : "=a" (result) : : "%rdx");

  return result;
  */
  return (uint64_t) *DWT_CYCCNT;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <cpucycles+0x1c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	f04f 0300 	mov.w	r3, #0
}
 8000f14:	4610      	mov	r0, r2
 8000f16:	4619      	mov	r1, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	2000016c 	.word	0x2000016c

08000f24 <test_speed>:

uint64_t t[NTESTS];
uint8_t seed[KYBER_SYMBYTES] = {0};

int test_speed()
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	f5ad 4da6 	sub.w	sp, sp, #21248	; 0x5300
 8000f2a:	b09d      	sub	sp, #116	; 0x74
 8000f2c:	af02      	add	r7, sp, #8
  uint8_t kexsendb[KEX_AKE_SENDBBYTES];
  uint8_t kexkey[KEX_SSBYTES];
  polyvec matrix[KYBER_K];
  poly ap;

  perf_counter_reset();
 8000f2e:	f7ff fdc5 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8000f32:	f7ff fdef 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8000f3c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e020      	b.n	8000f86 <test_speed+0x62>
    t[i] = cpucycles();
 8000f44:	f7ff ffde 	bl	8000f04 <cpucycles>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	48cb      	ldr	r0, [pc, #812]	; (800127c <test_speed+0x358>)
 8000f4e:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8000f52:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8000f56:	6809      	ldr	r1, [r1, #0]
 8000f58:	00c9      	lsls	r1, r1, #3
 8000f5a:	4401      	add	r1, r0
 8000f5c:	e9c1 2300 	strd	r2, r3, [r1]
    gen_matrix(matrix, seed, 0);
 8000f60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000f64:	3b64      	subs	r3, #100	; 0x64
 8000f66:	2200      	movs	r2, #0
 8000f68:	49c5      	ldr	r1, [pc, #788]	; (8001280 <test_speed+0x35c>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 f950 	bl	8007210 <pqcrystals_kyber1024_ref_gen_matrix>
  for(i=0;i<NTESTS;i++) {
 8000f70:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8000f74:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8000f80:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8000f8a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f94:	d3d6      	bcc.n	8000f44 <test_speed+0x20>
  }
  print_results("gen_a: ", t, NTESTS);
 8000f96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f9a:	49b8      	ldr	r1, [pc, #736]	; (800127c <test_speed+0x358>)
 8000f9c:	48b9      	ldr	r0, [pc, #740]	; (8001284 <test_speed+0x360>)
 8000f9e:	f007 ff7b 	bl	8008e98 <print_results>

  perf_counter_reset();
 8000fa2:	f7ff fd8b 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8000fa6:	f7ff fdb5 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8000fb0:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e020      	b.n	8000ffa <test_speed+0xd6>
    t[i] = cpucycles();
 8000fb8:	f7ff ffa4 	bl	8000f04 <cpucycles>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	48ae      	ldr	r0, [pc, #696]	; (800127c <test_speed+0x358>)
 8000fc2:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8000fc6:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8000fca:	6809      	ldr	r1, [r1, #0]
 8000fcc:	00c9      	lsls	r1, r1, #3
 8000fce:	4401      	add	r1, r0
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]
    poly_getnoise_eta1(&ap, seed, 0);
 8000fd4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fd8:	3b64      	subs	r3, #100	; 0x64
 8000fda:	2200      	movs	r2, #0
 8000fdc:	49a8      	ldr	r1, [pc, #672]	; (8001280 <test_speed+0x35c>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fa7c 	bl	80084dc <pqcrystals_kyber1024_ref_poly_getnoise_eta1>
  for(i=0;i<NTESTS;i++) {
 8000fe4:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8000fe8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8000ff4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8000ffe:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001008:	d3d6      	bcc.n	8000fb8 <test_speed+0x94>
  }
  print_results("poly_getnoise_eta1: ", t, NTESTS);
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	499b      	ldr	r1, [pc, #620]	; (800127c <test_speed+0x358>)
 8001010:	489d      	ldr	r0, [pc, #628]	; (8001288 <test_speed+0x364>)
 8001012:	f007 ff41 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001016:	f7ff fd51 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800101a:	f7ff fd7b 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800101e:	2300      	movs	r3, #0
 8001020:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001024:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e020      	b.n	800106e <test_speed+0x14a>
    t[i] = cpucycles();
 800102c:	f7ff ff6a 	bl	8000f04 <cpucycles>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4891      	ldr	r0, [pc, #580]	; (800127c <test_speed+0x358>)
 8001036:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800103a:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800103e:	6809      	ldr	r1, [r1, #0]
 8001040:	00c9      	lsls	r1, r1, #3
 8001042:	4401      	add	r1, r0
 8001044:	e9c1 2300 	strd	r2, r3, [r1]
    poly_getnoise_eta2(&ap, seed, 0);
 8001048:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800104c:	3b64      	subs	r3, #100	; 0x64
 800104e:	2200      	movs	r2, #0
 8001050:	498b      	ldr	r1, [pc, #556]	; (8001280 <test_speed+0x35c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f007 fa5a 	bl	800850c <pqcrystals_kyber1024_ref_poly_getnoise_eta2>
  for(i=0;i<NTESTS;i++) {
 8001058:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800105c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001068:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001072:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800107c:	d3d6      	bcc.n	800102c <test_speed+0x108>
  }
  print_results("poly_getnoise_eta2: ", t, NTESTS);
 800107e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001082:	497e      	ldr	r1, [pc, #504]	; (800127c <test_speed+0x358>)
 8001084:	4881      	ldr	r0, [pc, #516]	; (800128c <test_speed+0x368>)
 8001086:	f007 ff07 	bl	8008e98 <print_results>

  perf_counter_reset();
 800108a:	f7ff fd17 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800108e:	f7ff fd41 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001098:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e01e      	b.n	80010de <test_speed+0x1ba>
    t[i] = cpucycles();
 80010a0:	f7ff ff30 	bl	8000f04 <cpucycles>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4874      	ldr	r0, [pc, #464]	; (800127c <test_speed+0x358>)
 80010aa:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80010ae:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80010b2:	6809      	ldr	r1, [r1, #0]
 80010b4:	00c9      	lsls	r1, r1, #3
 80010b6:	4401      	add	r1, r0
 80010b8:	e9c1 2300 	strd	r2, r3, [r1]
    poly_ntt(&ap);
 80010bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010c0:	3b64      	subs	r3, #100	; 0x64
 80010c2:	4618      	mov	r0, r3
 80010c4:	f007 fa3a 	bl	800853c <pqcrystals_kyber1024_ref_poly_ntt>
  for(i=0;i<NTESTS;i++) {
 80010c8:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80010cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80010d8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80010e2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ec:	d3d8      	bcc.n	80010a0 <test_speed+0x17c>
  }
  print_results("NTT: ", t, NTESTS);
 80010ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f2:	4962      	ldr	r1, [pc, #392]	; (800127c <test_speed+0x358>)
 80010f4:	4866      	ldr	r0, [pc, #408]	; (8001290 <test_speed+0x36c>)
 80010f6:	f007 fecf 	bl	8008e98 <print_results>

  perf_counter_reset();
 80010fa:	f7ff fcdf 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80010fe:	f7ff fd09 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001108:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e01e      	b.n	800114e <test_speed+0x22a>
    t[i] = cpucycles();
 8001110:	f7ff fef8 	bl	8000f04 <cpucycles>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4858      	ldr	r0, [pc, #352]	; (800127c <test_speed+0x358>)
 800111a:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800111e:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001122:	6809      	ldr	r1, [r1, #0]
 8001124:	00c9      	lsls	r1, r1, #3
 8001126:	4401      	add	r1, r0
 8001128:	e9c1 2300 	strd	r2, r3, [r1]
    poly_invntt_tomont(&ap);
 800112c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001130:	3b64      	subs	r3, #100	; 0x64
 8001132:	4618      	mov	r0, r3
 8001134:	f007 fa11 	bl	800855a <pqcrystals_kyber1024_ref_poly_invntt_tomont>
  for(i=0;i<NTESTS;i++) {
 8001138:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800113c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001148:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001152:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800115c:	d3d8      	bcc.n	8001110 <test_speed+0x1ec>
  }
  print_results("INVNTT: ", t, NTESTS);
 800115e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001162:	4946      	ldr	r1, [pc, #280]	; (800127c <test_speed+0x358>)
 8001164:	484b      	ldr	r0, [pc, #300]	; (8001294 <test_speed+0x370>)
 8001166:	f007 fe97 	bl	8008e98 <print_results>

  perf_counter_reset();
 800116a:	f7ff fca7 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800116e:	f7ff fcd1 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001172:	2300      	movs	r3, #0
 8001174:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001178:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e026      	b.n	80011ce <test_speed+0x2aa>
    t[i] = cpucycles();
 8001180:	f7ff fec0 	bl	8000f04 <cpucycles>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	483c      	ldr	r0, [pc, #240]	; (800127c <test_speed+0x358>)
 800118a:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800118e:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001192:	6809      	ldr	r1, [r1, #0]
 8001194:	00c9      	lsls	r1, r1, #3
 8001196:	4401      	add	r1, r0
 8001198:	e9c1 2300 	strd	r2, r3, [r1]
    polyvec_basemul_acc_montgomery(&ap, &matrix[0], &matrix[1]);
 800119c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80011a0:	3b64      	subs	r3, #100	; 0x64
 80011a2:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 80011a6:	f507 711a 	add.w	r1, r7, #616	; 0x268
 80011aa:	3964      	subs	r1, #100	; 0x64
 80011ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011b0:	3b64      	subs	r3, #100	; 0x64
 80011b2:	4618      	mov	r0, r3
 80011b4:	f007 fced 	bl	8008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>
  for(i=0;i<NTESTS;i++) {
 80011b8:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80011bc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80011c8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80011d2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011dc:	d3d0      	bcc.n	8001180 <test_speed+0x25c>
  }
  print_results("polyvec_basemul_acc_montgomery: ", t, NTESTS);
 80011de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e2:	4926      	ldr	r1, [pc, #152]	; (800127c <test_speed+0x358>)
 80011e4:	482c      	ldr	r0, [pc, #176]	; (8001298 <test_speed+0x374>)
 80011e6:	f007 fe57 	bl	8008e98 <print_results>

  perf_counter_reset();
 80011ea:	f7ff fc67 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80011ee:	f7ff fc91 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80011f8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e024      	b.n	800124a <test_speed+0x326>
    t[i] = cpucycles();
 8001200:	f7ff fe80 	bl	8000f04 <cpucycles>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <test_speed+0x358>)
 800120a:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800120e:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001212:	6809      	ldr	r1, [r1, #0]
 8001214:	00c9      	lsls	r1, r1, #3
 8001216:	4401      	add	r1, r0
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
    poly_tomsg(ct,&ap);
 800121c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001220:	3a64      	subs	r2, #100	; 0x64
 8001222:	f507 536b 	add.w	r3, r7, #15040	; 0x3ac0
 8001226:	f103 0308 	add.w	r3, r3, #8
 800122a:	3b04      	subs	r3, #4
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f007 f8fa 	bl	8008428 <pqcrystals_kyber1024_ref_poly_tomsg>
  for(i=0;i<NTESTS;i++) {
 8001234:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001238:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001244:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800124e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001258:	d3d2      	bcc.n	8001200 <test_speed+0x2dc>
  }
  print_results("poly_tomsg: ", t, NTESTS);
 800125a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125e:	4907      	ldr	r1, [pc, #28]	; (800127c <test_speed+0x358>)
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <test_speed+0x378>)
 8001262:	f007 fe19 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001266:	f7ff fc29 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800126a:	f7ff fc53 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001274:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	e036      	b.n	80012ea <test_speed+0x3c6>
 800127c:	20000170 	.word	0x20000170
 8001280:	200000a0 	.word	0x200000a0
 8001284:	0800a75c 	.word	0x0800a75c
 8001288:	0800a764 	.word	0x0800a764
 800128c:	0800a77c 	.word	0x0800a77c
 8001290:	0800a794 	.word	0x0800a794
 8001294:	0800a79c 	.word	0x0800a79c
 8001298:	0800a7a8 	.word	0x0800a7a8
 800129c:	0800a7cc 	.word	0x0800a7cc
    t[i] = cpucycles();
 80012a0:	f7ff fe30 	bl	8000f04 <cpucycles>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	48d9      	ldr	r0, [pc, #868]	; (8001610 <test_speed+0x6ec>)
 80012aa:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80012ae:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	00c9      	lsls	r1, r1, #3
 80012b6:	4401      	add	r1, r0
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]
    poly_frommsg(&ap,ct);
 80012bc:	f507 526b 	add.w	r2, r7, #15040	; 0x3ac0
 80012c0:	f102 0208 	add.w	r2, r2, #8
 80012c4:	3a04      	subs	r2, #4
 80012c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012ca:	3b64      	subs	r3, #100	; 0x64
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f007 f870 	bl	80083b4 <pqcrystals_kyber1024_ref_poly_frommsg>
  for(i=0;i<NTESTS;i++) {
 80012d4:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80012d8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80012e4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80012ee:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f8:	d3d2      	bcc.n	80012a0 <test_speed+0x37c>
  }
  print_results("poly_frommsg: ", t, NTESTS);
 80012fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012fe:	49c4      	ldr	r1, [pc, #784]	; (8001610 <test_speed+0x6ec>)
 8001300:	48c4      	ldr	r0, [pc, #784]	; (8001614 <test_speed+0x6f0>)
 8001302:	f007 fdc9 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001306:	f7ff fbd9 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800130a:	f7ff fc03 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800130e:	2300      	movs	r3, #0
 8001310:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001314:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e024      	b.n	8001366 <test_speed+0x442>
    t[i] = cpucycles();
 800131c:	f7ff fdf2 	bl	8000f04 <cpucycles>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	48ba      	ldr	r0, [pc, #744]	; (8001610 <test_speed+0x6ec>)
 8001326:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800132a:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800132e:	6809      	ldr	r1, [r1, #0]
 8001330:	00c9      	lsls	r1, r1, #3
 8001332:	4401      	add	r1, r0
 8001334:	e9c1 2300 	strd	r2, r3, [r1]
    poly_compress(ct,&ap);
 8001338:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800133c:	3a64      	subs	r2, #100	; 0x64
 800133e:	f507 536b 	add.w	r3, r7, #15040	; 0x3ac0
 8001342:	f103 0308 	add.w	r3, r3, #8
 8001346:	3b04      	subs	r3, #4
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f006 fe62 	bl	8008014 <pqcrystals_kyber1024_ref_poly_compress>
  for(i=0;i<NTESTS;i++) {
 8001350:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001354:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001360:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800136a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001374:	d3d2      	bcc.n	800131c <test_speed+0x3f8>
  }
  print_results("poly_compress: ", t, NTESTS);
 8001376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137a:	49a5      	ldr	r1, [pc, #660]	; (8001610 <test_speed+0x6ec>)
 800137c:	48a6      	ldr	r0, [pc, #664]	; (8001618 <test_speed+0x6f4>)
 800137e:	f007 fd8b 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001382:	f7ff fb9b 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001386:	f7ff fbc5 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800138a:	2300      	movs	r3, #0
 800138c:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001390:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e024      	b.n	80013e2 <test_speed+0x4be>
    t[i] = cpucycles();
 8001398:	f7ff fdb4 	bl	8000f04 <cpucycles>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	489b      	ldr	r0, [pc, #620]	; (8001610 <test_speed+0x6ec>)
 80013a2:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80013a6:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80013aa:	6809      	ldr	r1, [r1, #0]
 80013ac:	00c9      	lsls	r1, r1, #3
 80013ae:	4401      	add	r1, r0
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]
    poly_decompress(&ap,ct);
 80013b4:	f507 526b 	add.w	r2, r7, #15040	; 0x3ac0
 80013b8:	f102 0208 	add.w	r2, r2, #8
 80013bc:	3a04      	subs	r2, #4
 80013be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c2:	3b64      	subs	r3, #100	; 0x64
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f006 febc 	bl	8008144 <pqcrystals_kyber1024_ref_poly_decompress>
  for(i=0;i<NTESTS;i++) {
 80013cc:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80013d0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80013dc:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80013e6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013f0:	d3d2      	bcc.n	8001398 <test_speed+0x474>
  }
  print_results("poly_decompress: ", t, NTESTS);
 80013f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f6:	4986      	ldr	r1, [pc, #536]	; (8001610 <test_speed+0x6ec>)
 80013f8:	4888      	ldr	r0, [pc, #544]	; (800161c <test_speed+0x6f8>)
 80013fa:	f007 fd4d 	bl	8008e98 <print_results>

  perf_counter_reset();
 80013fe:	f7ff fb5d 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001402:	f7ff fb87 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001406:	2300      	movs	r3, #0
 8001408:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 800140c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e024      	b.n	800145e <test_speed+0x53a>
    t[i] = cpucycles();
 8001414:	f7ff fd76 	bl	8000f04 <cpucycles>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	487c      	ldr	r0, [pc, #496]	; (8001610 <test_speed+0x6ec>)
 800141e:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001422:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001426:	6809      	ldr	r1, [r1, #0]
 8001428:	00c9      	lsls	r1, r1, #3
 800142a:	4401      	add	r1, r0
 800142c:	e9c1 2300 	strd	r2, r3, [r1]
    polyvec_compress(ct,&matrix[0]);
 8001430:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8001434:	3a64      	subs	r2, #100	; 0x64
 8001436:	f507 536b 	add.w	r3, r7, #15040	; 0x3ac0
 800143a:	f103 0308 	add.w	r3, r3, #8
 800143e:	3b04      	subs	r3, #4
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f007 f974 	bl	8008730 <pqcrystals_kyber1024_ref_polyvec_compress>
  for(i=0;i<NTESTS;i++) {
 8001448:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800144c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001458:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001462:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800146c:	d3d2      	bcc.n	8001414 <test_speed+0x4f0>
  }
  print_results("polyvec_compress: ", t, NTESTS);
 800146e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001472:	4967      	ldr	r1, [pc, #412]	; (8001610 <test_speed+0x6ec>)
 8001474:	486a      	ldr	r0, [pc, #424]	; (8001620 <test_speed+0x6fc>)
 8001476:	f007 fd0f 	bl	8008e98 <print_results>

  perf_counter_reset();
 800147a:	f7ff fb1f 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 800147e:	f7ff fb49 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001488:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e024      	b.n	80014da <test_speed+0x5b6>
    t[i] = cpucycles();
 8001490:	f7ff fd38 	bl	8000f04 <cpucycles>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	485d      	ldr	r0, [pc, #372]	; (8001610 <test_speed+0x6ec>)
 800149a:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800149e:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80014a2:	6809      	ldr	r1, [r1, #0]
 80014a4:	00c9      	lsls	r1, r1, #3
 80014a6:	4401      	add	r1, r0
 80014a8:	e9c1 2300 	strd	r2, r3, [r1]
    polyvec_decompress(&matrix[0],ct);
 80014ac:	f507 526b 	add.w	r2, r7, #15040	; 0x3ac0
 80014b0:	f102 0208 	add.w	r2, r2, #8
 80014b4:	3a04      	subs	r2, #4
 80014b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80014ba:	3b64      	subs	r3, #100	; 0x64
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 fa26 	bl	8008910 <pqcrystals_kyber1024_ref_polyvec_decompress>
  for(i=0;i<NTESTS;i++) {
 80014c4:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80014c8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80014d4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80014de:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014e8:	d3d2      	bcc.n	8001490 <test_speed+0x56c>
  }
  print_results("polyvec_decompress: ", t, NTESTS);
 80014ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ee:	4948      	ldr	r1, [pc, #288]	; (8001610 <test_speed+0x6ec>)
 80014f0:	484c      	ldr	r0, [pc, #304]	; (8001624 <test_speed+0x700>)
 80014f2:	f007 fcd1 	bl	8008e98 <print_results>

  perf_counter_reset();
 80014f6:	f7ff fae1 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80014fa:	f7ff fb0b 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001504:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e025      	b.n	8001558 <test_speed+0x634>
    t[i] = cpucycles();
 800150c:	f7ff fcfa 	bl	8000f04 <cpucycles>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	483e      	ldr	r0, [pc, #248]	; (8001610 <test_speed+0x6ec>)
 8001516:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 800151a:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800151e:	6809      	ldr	r1, [r1, #0]
 8001520:	00c9      	lsls	r1, r1, #3
 8001522:	4401      	add	r1, r0
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_keypair(pk, sk);
 8001528:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800152c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001530:	3b04      	subs	r3, #4
 8001532:	f507 429a 	add.w	r2, r7, #19712	; 0x4d00
 8001536:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800153a:	4619      	mov	r1, r3
 800153c:	4610      	mov	r0, r2
 800153e:	f005 ff39 	bl	80073b4 <pqcrystals_kyber1024_ref_indcpa_keypair>
  for(i=0;i<NTESTS;i++) {
 8001542:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001546:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001552:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800155c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001566:	d3d1      	bcc.n	800150c <test_speed+0x5e8>
  }
  print_results("indcpa_keypair: ", t, NTESTS);
 8001568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800156c:	4928      	ldr	r1, [pc, #160]	; (8001610 <test_speed+0x6ec>)
 800156e:	482e      	ldr	r0, [pc, #184]	; (8001628 <test_speed+0x704>)
 8001570:	f007 fc92 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001574:	f7ff faa2 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001578:	f7ff facc 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001582:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e029      	b.n	80015de <test_speed+0x6ba>
    t[i] = cpucycles();
 800158a:	f7ff fcbb 	bl	8000f04 <cpucycles>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	481f      	ldr	r0, [pc, #124]	; (8001610 <test_speed+0x6ec>)
 8001594:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001598:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800159c:	6809      	ldr	r1, [r1, #0]
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	4401      	add	r1, r0
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_enc(ct, key, pk, seed);
 80015a6:	f507 429a 	add.w	r2, r7, #19712	; 0x4d00
 80015aa:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80015ae:	f507 516a 	add.w	r1, r7, #14976	; 0x3a80
 80015b2:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80015b6:	3904      	subs	r1, #4
 80015b8:	f507 506b 	add.w	r0, r7, #15040	; 0x3ac0
 80015bc:	f100 0008 	add.w	r0, r0, #8
 80015c0:	3804      	subs	r0, #4
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <test_speed+0x708>)
 80015c4:	f006 f82e 	bl	8007624 <pqcrystals_kyber1024_ref_indcpa_enc>
  for(i=0;i<NTESTS;i++) {
 80015c8:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80015cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80015d8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80015e2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ec:	d3cd      	bcc.n	800158a <test_speed+0x666>
  }
  print_results("indcpa_enc: ", t, NTESTS);
 80015ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f2:	4907      	ldr	r1, [pc, #28]	; (8001610 <test_speed+0x6ec>)
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <test_speed+0x70c>)
 80015f6:	f007 fc4f 	bl	8008e98 <print_results>

  perf_counter_reset();
 80015fa:	f7ff fa5f 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80015fe:	f7ff fa89 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001602:	2300      	movs	r3, #0
 8001604:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001608:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e03c      	b.n	800168a <test_speed+0x766>
 8001610:	20000170 	.word	0x20000170
 8001614:	0800a7dc 	.word	0x0800a7dc
 8001618:	0800a7ec 	.word	0x0800a7ec
 800161c:	0800a7fc 	.word	0x0800a7fc
 8001620:	0800a810 	.word	0x0800a810
 8001624:	0800a824 	.word	0x0800a824
 8001628:	0800a83c 	.word	0x0800a83c
 800162c:	200000a0 	.word	0x200000a0
 8001630:	0800a850 	.word	0x0800a850
    t[i] = cpucycles();
 8001634:	f7ff fc66 	bl	8000f04 <cpucycles>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	48ca      	ldr	r0, [pc, #808]	; (8001968 <test_speed+0xa44>)
 800163e:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001642:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001646:	6809      	ldr	r1, [r1, #0]
 8001648:	00c9      	lsls	r1, r1, #3
 800164a:	4401      	add	r1, r0
 800164c:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_dec(key, ct, sk);
 8001650:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001654:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001658:	3a04      	subs	r2, #4
 800165a:	f507 516b 	add.w	r1, r7, #15040	; 0x3ac0
 800165e:	f101 0108 	add.w	r1, r1, #8
 8001662:	3904      	subs	r1, #4
 8001664:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8001668:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800166c:	3b04      	subs	r3, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f006 f930 	bl	80078d4 <pqcrystals_kyber1024_ref_indcpa_dec>
  for(i=0;i<NTESTS;i++) {
 8001674:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001678:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001684:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800168e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001698:	d3cc      	bcc.n	8001634 <test_speed+0x710>
  }
  print_results("indcpa_dec: ", t, NTESTS);
 800169a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169e:	49b2      	ldr	r1, [pc, #712]	; (8001968 <test_speed+0xa44>)
 80016a0:	48b2      	ldr	r0, [pc, #712]	; (800196c <test_speed+0xa48>)
 80016a2:	f007 fbf9 	bl	8008e98 <print_results>

  perf_counter_reset();
 80016a6:	f7ff fa09 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80016aa:	f7ff fa33 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80016b4:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e025      	b.n	8001708 <test_speed+0x7e4>
    t[i] = cpucycles();
 80016bc:	f7ff fc22 	bl	8000f04 <cpucycles>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	48a8      	ldr	r0, [pc, #672]	; (8001968 <test_speed+0xa44>)
 80016c6:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80016ca:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80016ce:	6809      	ldr	r1, [r1, #0]
 80016d0:	00c9      	lsls	r1, r1, #3
 80016d2:	4401      	add	r1, r0
 80016d4:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_keypair(pk, sk);
 80016d8:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016dc:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80016e0:	3b04      	subs	r3, #4
 80016e2:	f507 429a 	add.w	r2, r7, #19712	; 0x4d00
 80016e6:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80016ea:	4619      	mov	r1, r3
 80016ec:	4610      	mov	r0, r2
 80016ee:	f006 f945 	bl	800797c <pqcrystals_kyber1024_ref_keypair>
  for(i=0;i<NTESTS;i++) {
 80016f2:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80016f6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001702:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800170c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001716:	d3d1      	bcc.n	80016bc <test_speed+0x798>
  }
  print_results("kyber_keypair: ", t, NTESTS);
 8001718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800171c:	4992      	ldr	r1, [pc, #584]	; (8001968 <test_speed+0xa44>)
 800171e:	4894      	ldr	r0, [pc, #592]	; (8001970 <test_speed+0xa4c>)
 8001720:	f007 fbba 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001724:	f7ff f9ca 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001728:	f7ff f9f4 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800172c:	2300      	movs	r3, #0
 800172e:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001732:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e029      	b.n	800178e <test_speed+0x86a>
    t[i] = cpucycles();
 800173a:	f7ff fbe3 	bl	8000f04 <cpucycles>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4889      	ldr	r0, [pc, #548]	; (8001968 <test_speed+0xa44>)
 8001744:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001748:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800174c:	6809      	ldr	r1, [r1, #0]
 800174e:	00c9      	lsls	r1, r1, #3
 8001750:	4401      	add	r1, r0
 8001752:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_enc(ct, key, pk);
 8001756:	f507 429a 	add.w	r2, r7, #19712	; 0x4d00
 800175a:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800175e:	f507 516a 	add.w	r1, r7, #14976	; 0x3a80
 8001762:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001766:	3904      	subs	r1, #4
 8001768:	f507 536b 	add.w	r3, r7, #15040	; 0x3ac0
 800176c:	f103 0308 	add.w	r3, r3, #8
 8001770:	3b04      	subs	r3, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f006 f934 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
  for(i=0;i<NTESTS;i++) {
 8001778:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800177c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001788:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001792:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800179c:	d3cd      	bcc.n	800173a <test_speed+0x816>
  }
  print_results("kyber_encaps: ", t, NTESTS);
 800179e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a2:	4971      	ldr	r1, [pc, #452]	; (8001968 <test_speed+0xa44>)
 80017a4:	4873      	ldr	r0, [pc, #460]	; (8001974 <test_speed+0xa50>)
 80017a6:	f007 fb77 	bl	8008e98 <print_results>

  perf_counter_reset();
 80017aa:	f7ff f987 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80017ae:	f7ff f9b1 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80017b8:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e02a      	b.n	8001816 <test_speed+0x8f2>
    t[i] = cpucycles();
 80017c0:	f7ff fba0 	bl	8000f04 <cpucycles>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4867      	ldr	r0, [pc, #412]	; (8001968 <test_speed+0xa44>)
 80017ca:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80017ce:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	00c9      	lsls	r1, r1, #3
 80017d6:	4401      	add	r1, r0
 80017d8:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_dec(key, ct, sk);
 80017dc:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017e0:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80017e4:	3a04      	subs	r2, #4
 80017e6:	f507 516b 	add.w	r1, r7, #15040	; 0x3ac0
 80017ea:	f101 0108 	add.w	r1, r1, #8
 80017ee:	3904      	subs	r1, #4
 80017f0:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80017f4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017f8:	3b04      	subs	r3, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 f933 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  for(i=0;i<NTESTS;i++) {
 8001800:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001804:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3301      	adds	r3, #1
 800180c:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001810:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 800181a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	d3cc      	bcc.n	80017c0 <test_speed+0x89c>
  }
  print_results("kyber_decaps: ", t, NTESTS);
 8001826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182a:	494f      	ldr	r1, [pc, #316]	; (8001968 <test_speed+0xa44>)
 800182c:	4852      	ldr	r0, [pc, #328]	; (8001978 <test_speed+0xa54>)
 800182e:	f007 fb33 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001832:	f7ff f943 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001836:	f7ff f96d 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800183a:	2300      	movs	r3, #0
 800183c:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001840:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e02d      	b.n	80018a4 <test_speed+0x980>
    t[i] = cpucycles();
 8001848:	f7ff fb5c 	bl	8000f04 <cpucycles>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4845      	ldr	r0, [pc, #276]	; (8001968 <test_speed+0xa44>)
 8001852:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001856:	f101 0164 	add.w	r1, r1, #100	; 0x64
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	00c9      	lsls	r1, r1, #3
 800185e:	4401      	add	r1, r0
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_initA(kexsenda, key, sk, pk);
 8001864:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 8001868:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800186c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001870:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001874:	3a04      	subs	r2, #4
 8001876:	f507 516a 	add.w	r1, r7, #14976	; 0x3a80
 800187a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800187e:	3904      	subs	r1, #4
 8001880:	f507 5039 	add.w	r0, r7, #11840	; 0x2e40
 8001884:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001888:	3804      	subs	r0, #4
 800188a:	f006 f968 	bl	8007b5e <kex_uake_initA>
  for(i=0;i<NTESTS;i++) {
 800188e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001892:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 800189e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80018a8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b2:	d3c9      	bcc.n	8001848 <test_speed+0x924>
  }
  print_results("kex_uake_initA: ", t, NTESTS);
 80018b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b8:	492b      	ldr	r1, [pc, #172]	; (8001968 <test_speed+0xa44>)
 80018ba:	4830      	ldr	r0, [pc, #192]	; (800197c <test_speed+0xa58>)
 80018bc:	f007 faec 	bl	8008e98 <print_results>

  perf_counter_reset();
 80018c0:	f7ff f8fc 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 80018c4:	f7ff f926 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80018ce:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e02e      	b.n	8001934 <test_speed+0xa10>
    t[i] = cpucycles();
 80018d6:	f7ff fb15 	bl	8000f04 <cpucycles>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4822      	ldr	r0, [pc, #136]	; (8001968 <test_speed+0xa44>)
 80018e0:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 80018e4:	f101 0164 	add.w	r1, r1, #100	; 0x64
 80018e8:	6809      	ldr	r1, [r1, #0]
 80018ea:	00c9      	lsls	r1, r1, #3
 80018ec:	4401      	add	r1, r0
 80018ee:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_sharedB(kexsendb, kexkey, kexsenda, sk);
 80018f2:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80018f6:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80018fa:	3b04      	subs	r3, #4
 80018fc:	f507 5239 	add.w	r2, r7, #11840	; 0x2e40
 8001900:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001904:	3a04      	subs	r2, #4
 8001906:	f507 5108 	add.w	r1, r7, #8704	; 0x2200
 800190a:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800190e:	3924      	subs	r1, #36	; 0x24
 8001910:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8001914:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001918:	3804      	subs	r0, #4
 800191a:	f006 f937 	bl	8007b8c <kex_uake_sharedB>
  for(i=0;i<NTESTS;i++) {
 800191e:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001922:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 800192e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001938:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001942:	d3c8      	bcc.n	80018d6 <test_speed+0x9b2>
  }
  print_results("kex_uake_sharedB: ", t, NTESTS);
 8001944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <test_speed+0xa44>)
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <test_speed+0xa5c>)
 800194c:	f007 faa4 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001950:	f7ff f8b4 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001954:	f7ff f8de 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 800195e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	e03d      	b.n	80019e2 <test_speed+0xabe>
 8001966:	bf00      	nop
 8001968:	20000170 	.word	0x20000170
 800196c:	0800a860 	.word	0x0800a860
 8001970:	0800a870 	.word	0x0800a870
 8001974:	0800a880 	.word	0x0800a880
 8001978:	0800a890 	.word	0x0800a890
 800197c:	0800a8a0 	.word	0x0800a8a0
 8001980:	0800a8b4 	.word	0x0800a8b4
    t[i] = cpucycles();
 8001984:	f7ff fabe 	bl	8000f04 <cpucycles>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4891      	ldr	r0, [pc, #580]	; (8001bd4 <test_speed+0xcb0>)
 800198e:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001992:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001996:	6809      	ldr	r1, [r1, #0]
 8001998:	00c9      	lsls	r1, r1, #3
 800199a:	4401      	add	r1, r0
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_sharedA(kexkey, kexsendb, key, sk);
 80019a0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80019a4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80019a8:	3b04      	subs	r3, #4
 80019aa:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80019ae:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80019b2:	3a04      	subs	r2, #4
 80019b4:	f507 5108 	add.w	r1, r7, #8704	; 0x2200
 80019b8:	f101 0128 	add.w	r1, r1, #40	; 0x28
 80019bc:	3904      	subs	r1, #4
 80019be:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 80019c2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80019c6:	3824      	subs	r0, #36	; 0x24
 80019c8:	f006 f903 	bl	8007bd2 <kex_uake_sharedA>
  for(i=0;i<NTESTS;i++) {
 80019cc:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80019d0:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 80019dc:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 80019e6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f0:	d3c8      	bcc.n	8001984 <test_speed+0xa60>
  }
  print_results("kex_uake_sharedA: ", t, NTESTS);
 80019f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f6:	4977      	ldr	r1, [pc, #476]	; (8001bd4 <test_speed+0xcb0>)
 80019f8:	4877      	ldr	r0, [pc, #476]	; (8001bd8 <test_speed+0xcb4>)
 80019fa:	f007 fa4d 	bl	8008e98 <print_results>

  perf_counter_reset();
 80019fe:	f7ff f85d 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001a02:	f7ff f887 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001a0c:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e02d      	b.n	8001a70 <test_speed+0xb4c>
    t[i] = cpucycles();
 8001a14:	f7ff fa76 	bl	8000f04 <cpucycles>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	486d      	ldr	r0, [pc, #436]	; (8001bd4 <test_speed+0xcb0>)
 8001a1e:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001a22:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001a26:	6809      	ldr	r1, [r1, #0]
 8001a28:	00c9      	lsls	r1, r1, #3
 8001a2a:	4401      	add	r1, r0
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_initA(kexsenda, key, sk, pk);
 8001a30:	f507 439a 	add.w	r3, r7, #19712	; 0x4d00
 8001a34:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8001a38:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001a3c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001a40:	3a04      	subs	r2, #4
 8001a42:	f507 516a 	add.w	r1, r7, #14976	; 0x3a80
 8001a46:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001a4a:	3904      	subs	r1, #4
 8001a4c:	f507 5039 	add.w	r0, r7, #11840	; 0x2e40
 8001a50:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001a54:	3804      	subs	r0, #4
 8001a56:	f006 f8e9 	bl	8007c2c <kex_ake_initA>
  for(i=0;i<NTESTS;i++) {
 8001a5a:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001a5e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001a6a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001a74:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7e:	d3c9      	bcc.n	8001a14 <test_speed+0xaf0>
  }
  print_results("kex_ake_initA: ", t, NTESTS);
 8001a80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a84:	4953      	ldr	r1, [pc, #332]	; (8001bd4 <test_speed+0xcb0>)
 8001a86:	4855      	ldr	r0, [pc, #340]	; (8001bdc <test_speed+0xcb8>)
 8001a88:	f007 fa06 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001a8c:	f7ff f816 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001a90:	f7ff f840 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001a9a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e033      	b.n	8001b0a <test_speed+0xbe6>
    t[i] = cpucycles();
 8001aa2:	f7ff fa2f 	bl	8000f04 <cpucycles>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	484a      	ldr	r0, [pc, #296]	; (8001bd4 <test_speed+0xcb0>)
 8001aac:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001ab0:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001ab4:	6809      	ldr	r1, [r1, #0]
 8001ab6:	00c9      	lsls	r1, r1, #3
 8001ab8:	4401      	add	r1, r0
 8001aba:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_sharedB(kexsendb, kexkey, kexsenda, sk, pk);
 8001abe:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001ac2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	f507 5239 	add.w	r2, r7, #11840	; 0x2e40
 8001acc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ad0:	3a04      	subs	r2, #4
 8001ad2:	f507 5108 	add.w	r1, r7, #8704	; 0x2200
 8001ad6:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001ada:	3924      	subs	r1, #36	; 0x24
 8001adc:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8001ae0:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001ae4:	3804      	subs	r0, #4
 8001ae6:	f507 449a 	add.w	r4, r7, #19712	; 0x4d00
 8001aea:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8001aee:	9400      	str	r4, [sp, #0]
 8001af0:	f006 f8b3 	bl	8007c5a <kex_ake_sharedB>
  for(i=0;i<NTESTS;i++) {
 8001af4:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001af8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001b04:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001b0e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b18:	d3c3      	bcc.n	8001aa2 <test_speed+0xb7e>
  }
  print_results("kex_ake_sharedB: ", t, NTESTS);
 8001b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1e:	492d      	ldr	r1, [pc, #180]	; (8001bd4 <test_speed+0xcb0>)
 8001b20:	482f      	ldr	r0, [pc, #188]	; (8001be0 <test_speed+0xcbc>)
 8001b22:	f007 f9b9 	bl	8008e98 <print_results>

  perf_counter_reset();
 8001b26:	f7fe ffc9 	bl	8000abc <perf_counter_reset>
  perf_counter_start();
 8001b2a:	f7fe fff3 	bl	8000b14 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001b34:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e035      	b.n	8001ba8 <test_speed+0xc84>
    t[i] = cpucycles();
 8001b3c:	f7ff f9e2 	bl	8000f04 <cpucycles>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <test_speed+0xcb0>)
 8001b46:	f507 41a6 	add.w	r1, r7, #21248	; 0x5300
 8001b4a:	f101 0164 	add.w	r1, r1, #100	; 0x64
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	00c9      	lsls	r1, r1, #3
 8001b52:	4401      	add	r1, r0
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_sharedA(kexkey, kexsendb, key, sk, sk);
 8001b58:	f507 4481 	add.w	r4, r7, #16512	; 0x4080
 8001b5c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001b60:	3c04      	subs	r4, #4
 8001b62:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8001b66:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001b6a:	3a04      	subs	r2, #4
 8001b6c:	f507 5108 	add.w	r1, r7, #8704	; 0x2200
 8001b70:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001b74:	3904      	subs	r1, #4
 8001b76:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8001b7a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001b7e:	3824      	subs	r0, #36	; 0x24
 8001b80:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001b84:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001b88:	3b04      	subs	r3, #4
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f006 f891 	bl	8007cb4 <kex_ake_sharedA>
  for(i=0;i<NTESTS;i++) {
 8001b92:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001b96:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f507 42a6 	add.w	r2, r7, #21248	; 0x5300
 8001ba2:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	f507 43a6 	add.w	r3, r7, #21248	; 0x5300
 8001bac:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb6:	d3c1      	bcc.n	8001b3c <test_speed+0xc18>
  }
  print_results("kex_ake_sharedA: ", t, NTESTS);
 8001bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bbc:	4905      	ldr	r1, [pc, #20]	; (8001bd4 <test_speed+0xcb0>)
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <test_speed+0xcc0>)
 8001bc0:	f007 f96a 	bl	8008e98 <print_results>

  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f507 47a6 	add.w	r7, r7, #21248	; 0x5300
 8001bcc:	376c      	adds	r7, #108	; 0x6c
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd90      	pop	{r4, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000170 	.word	0x20000170
 8001bd8:	0800a8c8 	.word	0x0800a8c8
 8001bdc:	0800a8dc 	.word	0x0800a8dc
 8001be0:	0800a8ec 	.word	0x0800a8ec
 8001be4:	0800a900 	.word	0x0800a900

08001be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf4:	e002      	b.n	8001bfc <LoopCopyDataInit>

08001bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfa:	3304      	adds	r3, #4

08001bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c00:	d3f9      	bcc.n	8001bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c04:	4c0b      	ldr	r4, [pc, #44]	; (8001c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c08:	e001      	b.n	8001c0e <LoopFillZerobss>

08001c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c0c:	3204      	adds	r2, #4

08001c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c10:	d3fb      	bcc.n	8001c0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c12:	f7ff f965 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c16:	f007 facf 	bl	80091b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1a:	f7fe fca5 	bl	8000568 <main>
  bx  lr    
 8001c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c2c:	0800acac 	.word	0x0800acac
  ldr r2, =_sbss
 8001c30:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c34:	200020c4 	.word	0x200020c4

08001c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC_IRQHandler>
	...

08001c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_Init+0x40>)
 8001c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_Init+0x40>)
 8001c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_Init+0x40>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c64:	2003      	movs	r0, #3
 8001c66:	f000 f94f 	bl	8001f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f808 	bl	8001c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c70:	f7fe ff84 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x54>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_InitTick+0x58>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4619      	mov	r1, r3
 8001c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f967 	bl	8001f72 <HAL_SYSTICK_Config>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e00e      	b.n	8001ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b0f      	cmp	r3, #15
 8001cb2:	d80a      	bhi.n	8001cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	f000 f92f 	bl	8001f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc0:	4a06      	ldr	r2, [pc, #24]	; (8001cdc <HAL_InitTick+0x5c>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_IncTick+0x20>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_IncTick+0x24>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_IncTick+0x24>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000008 	.word	0x20000008
 8001d04:	200020b0 	.word	0x200020b0

08001d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GetTick+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200020b0 	.word	0x200020b0

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff ffee 	bl	8001d08 <HAL_GetTick>
 8001d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4413      	add	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d46:	bf00      	nop
 8001d48:	f7ff ffde 	bl	8001d08 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008

08001d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d84:	4013      	ands	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9a:	4a04      	ldr	r2, [pc, #16]	; (8001dac <__NVIC_SetPriorityGrouping+0x44>)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	60d3      	str	r3, [r2, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	f003 0307 	and.w	r3, r3, #7
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	db0b      	blt.n	8001df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	f003 021f 	and.w	r2, r3, #31
 8001de4:	4907      	ldr	r1, [pc, #28]	; (8001e04 <__NVIC_EnableIRQ+0x38>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2001      	movs	r0, #1
 8001dee:	fa00 f202 	lsl.w	r2, r0, r2
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e100 	.word	0xe000e100

08001e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	6039      	str	r1, [r7, #0]
 8001e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db0a      	blt.n	8001e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	490c      	ldr	r1, [pc, #48]	; (8001e54 <__NVIC_SetPriority+0x4c>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	0112      	lsls	r2, r2, #4
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e30:	e00a      	b.n	8001e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4908      	ldr	r1, [pc, #32]	; (8001e58 <__NVIC_SetPriority+0x50>)
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	0112      	lsls	r2, r2, #4
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	440b      	add	r3, r1
 8001e46:	761a      	strb	r2, [r3, #24]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f1c3 0307 	rsb	r3, r3, #7
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	bf28      	it	cs
 8001e7a:	2304      	movcs	r3, #4
 8001e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d902      	bls.n	8001e8c <NVIC_EncodePriority+0x30>
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3b03      	subs	r3, #3
 8001e8a:	e000      	b.n	8001e8e <NVIC_EncodePriority+0x32>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001eae:	43d9      	mvns	r1, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	4313      	orrs	r3, r2
         );
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	; 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed4:	d301      	bcc.n	8001eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00f      	b.n	8001efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <SysTick_Config+0x40>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee2:	210f      	movs	r1, #15
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f7ff ff8e 	bl	8001e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <SysTick_Config+0x40>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <SysTick_Config+0x40>)
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010

08001f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ff29 	bl	8001d68 <__NVIC_SetPriorityGrouping>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f30:	f7ff ff3e 	bl	8001db0 <__NVIC_GetPriorityGrouping>
 8001f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f7ff ff8e 	bl	8001e5c <NVIC_EncodePriority>
 8001f40:	4602      	mov	r2, r0
 8001f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f46:	4611      	mov	r1, r2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff5d 	bl	8001e08 <__NVIC_SetPriority>
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff31 	bl	8001dcc <__NVIC_EnableIRQ>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa2 	bl	8001ec4 <SysTick_Config>
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e16b      	b.n	8002280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 815a 	bne.w	800227a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d005      	beq.n	8001fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d130      	bne.n	8002040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002014:	2201      	movs	r2, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 0201 	and.w	r2, r3, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b03      	cmp	r3, #3
 800204a:	d017      	beq.n	800207c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d123      	bne.n	80020d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	69b9      	ldr	r1, [r7, #24]
 80020cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0203 	and.w	r2, r3, #3
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80b4 	beq.w	800227a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b60      	ldr	r3, [pc, #384]	; (8002298 <HAL_GPIO_Init+0x30c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a5f      	ldr	r2, [pc, #380]	; (8002298 <HAL_GPIO_Init+0x30c>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_GPIO_Init+0x30c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a5b      	ldr	r2, [pc, #364]	; (800229c <HAL_GPIO_Init+0x310>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_GPIO_Init+0x314>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_GPIO_Init+0x318>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a50      	ldr	r2, [pc, #320]	; (80022a8 <HAL_GPIO_Init+0x31c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	; (80022ac <HAL_GPIO_Init+0x320>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x21a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4e      	ldr	r2, [pc, #312]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x216>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <HAL_GPIO_Init+0x328>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x212>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4c      	ldr	r2, [pc, #304]	; (80022b8 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x20a>
 8002192:	2307      	movs	r3, #7
 8002194:	e00e      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 8002196:	2308      	movs	r3, #8
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219a:	2306      	movs	r3, #6
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x228>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x310>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f6:	4a32      	ldr	r2, [pc, #200]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fc:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_GPIO_Init+0x334>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_GPIO_Init+0x334>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae90 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40013c00 	.word	0x40013c00

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e264      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d075      	beq.n	8002402 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	4ba3      	ldr	r3, [pc, #652]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00c      	beq.n	800233c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4ba0      	ldr	r3, [pc, #640]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800232a:	2b08      	cmp	r3, #8
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232e:	4b9d      	ldr	r3, [pc, #628]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233a:	d10b      	bne.n	8002354 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233c:	4b99      	ldr	r3, [pc, #612]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05b      	beq.n	8002400 <HAL_RCC_OscConfig+0x108>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d157      	bne.n	8002400 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e23f      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d106      	bne.n	800236c <HAL_RCC_OscConfig+0x74>
 800235e:	4b91      	ldr	r3, [pc, #580]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a90      	ldr	r2, [pc, #576]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e01d      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x98>
 8002376:	4b8b      	ldr	r3, [pc, #556]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a8a      	ldr	r2, [pc, #552]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a87      	ldr	r2, [pc, #540]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	e00b      	b.n	80023a8 <HAL_RCC_OscConfig+0xb0>
 8002390:	4b84      	ldr	r3, [pc, #528]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a83      	ldr	r2, [pc, #524]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a80      	ldr	r2, [pc, #512]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d013      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fcaa 	bl	8001d08 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fca6 	bl	8001d08 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e204      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0xc0>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7ff fc96 	bl	8001d08 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fc92 	bl	8001d08 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e1f0      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0xe8>
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002422:	2b08      	cmp	r3, #8
 8002424:	d11c      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d116      	bne.n	8002460 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d001      	beq.n	800244a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e1c4      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244a:	4b56      	ldr	r3, [pc, #344]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4952      	ldr	r1, [pc, #328]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e03a      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <HAL_RCC_OscConfig+0x2b0>)
 800246a:	2201      	movs	r2, #1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246e:	f7ff fc4b 	bl	8001d08 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002476:	f7ff fc47 	bl	8001d08 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e1a5      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4940      	ldr	r1, [pc, #256]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e015      	b.n	80024d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <HAL_RCC_OscConfig+0x2b0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc2a 	bl	8001d08 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b8:	f7ff fc26 	bl	8001d08 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e184      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d030      	beq.n	8002544 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d016      	beq.n	8002518 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ea:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_OscConfig+0x2b4>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7ff fc0a 	bl	8001d08 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f8:	f7ff fc06 	bl	8001d08 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e164      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x200>
 8002516:	e015      	b.n	8002544 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCC_OscConfig+0x2b4>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251e:	f7ff fbf3 	bl	8001d08 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7ff fbef 	bl	8001d08 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e14d      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a0 	beq.w	8002692 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_OscConfig+0x2b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d121      	bne.n	80025d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCC_OscConfig+0x2b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_RCC_OscConfig+0x2b8>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff fbb5 	bl	8001d08 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e011      	b.n	80025c6 <HAL_RCC_OscConfig+0x2ce>
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
 80025b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b4:	f7ff fba8 	bl	8001d08 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e106      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x4e4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d106      	bne.n	80025e8 <HAL_RCC_OscConfig+0x2f0>
 80025da:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	4a80      	ldr	r2, [pc, #512]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6713      	str	r3, [r2, #112]	; 0x70
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x312>
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a7a      	ldr	r2, [pc, #488]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a77      	ldr	r2, [pc, #476]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x32a>
 800260a:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	4a74      	ldr	r2, [pc, #464]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6713      	str	r3, [r2, #112]	; 0x70
 8002616:	4b72      	ldr	r3, [pc, #456]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	4a71      	ldr	r2, [pc, #452]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff fb6d 	bl	8001d08 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff fb69 	bl	8001d08 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0c5      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x33a>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7ff fb57 	bl	8001d08 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7ff fb53 	bl	8001d08 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0af      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a55      	ldr	r2, [pc, #340]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 809b 	beq.w	80027d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d05c      	beq.n	8002762 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d141      	bne.n	8002734 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b4c      	ldr	r3, [pc, #304]	; (80027e4 <HAL_RCC_OscConfig+0x4ec>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb27 	bl	8001d08 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026be:	f7ff fb23 	bl	8001d08 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e081      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d0:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	019b      	lsls	r3, r3, #6
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	4937      	ldr	r1, [pc, #220]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002706:	4b37      	ldr	r3, [pc, #220]	; (80027e4 <HAL_RCC_OscConfig+0x4ec>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7ff fafc 	bl	8001d08 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7ff faf8 	bl	8001d08 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e056      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x41c>
 8002732:	e04e      	b.n	80027d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <HAL_RCC_OscConfig+0x4ec>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff fae5 	bl	8001d08 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002742:	f7ff fae1 	bl	8001d08 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e03f      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x44a>
 8002760:	e037      	b.n	80027d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e032      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <HAL_RCC_OscConfig+0x4e8>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d028      	beq.n	80027ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d121      	bne.n	80027ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d11a      	bne.n	80027ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d111      	bne.n	80027ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40007000 	.word	0x40007000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	42470060 	.word	0x42470060

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0cc      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d90c      	bls.n	8002824 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b65      	ldr	r3, [pc, #404]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0b8      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4a58      	ldr	r2, [pc, #352]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002846:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002860:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	494d      	ldr	r1, [pc, #308]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d044      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d119      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e07f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e067      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b37      	ldr	r3, [pc, #220]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4934      	ldr	r1, [pc, #208]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff fa16 	bl	8001d08 <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff fa12 	bl	8001d08 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04f      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20c      	bcs.n	8002930 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e032      	b.n	8002996 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4916      	ldr	r1, [pc, #88]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295a:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	490e      	ldr	r1, [pc, #56]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296e:	f000 f821 	bl	80029b4 <HAL_RCC_GetSysClockFreq>
 8002972:	4602      	mov	r2, r0
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	490a      	ldr	r1, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	5ccb      	ldrb	r3, [r1, r3]
 8002982:	fa22 f303 	lsr.w	r3, r2, r3
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f976 	bl	8001c80 <HAL_InitTick>

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00
 80029a4:	40023800 	.word	0x40023800
 80029a8:	0800a974 	.word	0x0800a974
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004

080029b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	2300      	movs	r3, #0
 80029c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029cc:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d00d      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0x40>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	f200 80bd 	bhi.w	8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x34>
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0x3a>
 80029e6:	e0b7      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029ea:	60bb      	str	r3, [r7, #8]
       break;
 80029ec:	e0b7      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ee:	4b61      	ldr	r3, [pc, #388]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029f0:	60bb      	str	r3, [r7, #8]
      break;
 80029f2:	e0b4      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f4:	4b5d      	ldr	r3, [pc, #372]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fe:	4b5b      	ldr	r3, [pc, #364]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d04d      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0a:	4b58      	ldr	r3, [pc, #352]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	099b      	lsrs	r3, r3, #6
 8002a10:	461a      	mov	r2, r3
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	ea02 0800 	and.w	r8, r2, r0
 8002a22:	ea03 0901 	and.w	r9, r3, r1
 8002a26:	4640      	mov	r0, r8
 8002a28:	4649      	mov	r1, r9
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	014b      	lsls	r3, r1, #5
 8002a34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a38:	0142      	lsls	r2, r0, #5
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a42:	eb61 0109 	sbc.w	r1, r1, r9
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	018b      	lsls	r3, r1, #6
 8002a50:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a54:	0182      	lsls	r2, r0, #6
 8002a56:	1a12      	subs	r2, r2, r0
 8002a58:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5c:	f04f 0000 	mov.w	r0, #0
 8002a60:	f04f 0100 	mov.w	r1, #0
 8002a64:	00d9      	lsls	r1, r3, #3
 8002a66:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a6a:	00d0      	lsls	r0, r2, #3
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	eb12 0208 	adds.w	r2, r2, r8
 8002a74:	eb43 0309 	adc.w	r3, r3, r9
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0259      	lsls	r1, r3, #9
 8002a82:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a86:	0250      	lsls	r0, r2, #9
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f7fd fbea 	bl	8000270 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e04a      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	461a      	mov	r2, r3
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ab6:	f04f 0100 	mov.w	r1, #0
 8002aba:	ea02 0400 	and.w	r4, r2, r0
 8002abe:	ea03 0501 	and.w	r5, r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 0300 	mov.w	r3, #0
 8002ace:	014b      	lsls	r3, r1, #5
 8002ad0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ad4:	0142      	lsls	r2, r0, #5
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	1b00      	subs	r0, r0, r4
 8002adc:	eb61 0105 	sbc.w	r1, r1, r5
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	018b      	lsls	r3, r1, #6
 8002aea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aee:	0182      	lsls	r2, r0, #6
 8002af0:	1a12      	subs	r2, r2, r0
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	00d9      	lsls	r1, r3, #3
 8002b00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b04:	00d0      	lsls	r0, r2, #3
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	1912      	adds	r2, r2, r4
 8002b0c:	eb45 0303 	adc.w	r3, r5, r3
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0299      	lsls	r1, r3, #10
 8002b1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b1e:	0290      	lsls	r0, r2, #10
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	f7fd fb9e 	bl	8000270 <__aeabi_uldivmod>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4613      	mov	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0c1b      	lsrs	r3, r3, #16
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	3301      	adds	r3, #1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	60bb      	str	r3, [r7, #8]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b5a:	60bb      	str	r3, [r7, #8]
      break;
 8002b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	00f42400 	.word	0x00f42400
 8002b74:	007a1200 	.word	0x007a1200

08002b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b94:	f7ff fff0 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0a9b      	lsrs	r3, r3, #10
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0800a984 	.word	0x0800a984

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bbc:	f7ff ffdc 	bl	8002b78 <HAL_RCC_GetHCLKFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	0b5b      	lsrs	r3, r3, #13
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	0800a984 	.word	0x0800a984

08002be0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e01c      	b.n	8002c2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	795b      	ldrb	r3, [r3, #5]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd ffe2 	bl	8000bcc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0204 	orr.w	r2, r2, #4
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d105      	bne.n	8002c5a <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2210      	movs	r2, #16
 8002c52:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002c54:	2301      	movs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e00b      	b.n	8002c72 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d104      	bne.n	8002c72 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2208      	movs	r2, #8
 8002c6c:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d10b      	bne.n	8002c90 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f839 	bl	8002cf6 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8002c8c:	605a      	str	r2, [r3, #4]

    return;
 8002c8e:	e024      	b.n	8002cda <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d11d      	bne.n	8002cda <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0208 	bic.w	r2, r2, #8
 8002cac:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	795b      	ldrb	r3, [r3, #5]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d00b      	beq.n	8002cda <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f803 	bl	8002ce0 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e041      	b.n	8002da0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fd ff73 	bl	8000c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f000 f95d 	bl	8003008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e046      	b.n	8002e4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <HAL_TIM_Base_Start+0xb4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d01d      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_TIM_Base_Start+0xb8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_TIM_Base_Start+0xbc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_TIM_Base_Start+0xc0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_TIM_Base_Start+0xc4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_TIM_Base_Start+0xc8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_Base_Start+0x70>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_TIM_Base_Start+0xcc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40010400 	.word	0x40010400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40001800 	.word	0x40001800

08002e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x1c>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0b4      	b.n	8002ffe <HAL_TIM_ConfigClockSource+0x186>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d03e      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xd4>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f200 8087 	bhi.w	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	f000 8086 	beq.w	8002fea <HAL_TIM_ConfigClockSource+0x172>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d87f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d01a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xa6>
 8002ee8:	2b70      	cmp	r3, #112	; 0x70
 8002eea:	d87b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d050      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x11a>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d877      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d03c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xfa>
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d873      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d058      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d064      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d86b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d060      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d867      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d05a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f1c:	e062      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 f985 	bl	800323c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e04f      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 f96e 	bl	800323c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6e:	609a      	str	r2, [r3, #8]
      break;
 8002f70:	e03c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 f8e2 	bl	8003148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f93b 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002f90:	e02c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 f901 	bl	80031a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2160      	movs	r1, #96	; 0x60
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f92b 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e01c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 f8c2 	bl	8003148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f91b 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e00c      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 f912 	bl	8003206 <TIM_ITRx_SetConfig>
      break;
 8002fe2:	e003      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe8:	e000      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a40      	ldr	r2, [pc, #256]	; (800311c <TIM_Base_SetConfig+0x114>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003026:	d00f      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00b      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x40>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a3a      	ldr	r2, [pc, #232]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2f      	ldr	r2, [pc, #188]	; (800311c <TIM_Base_SetConfig+0x114>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d02b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003068:	d027      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <TIM_Base_SetConfig+0x118>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d023      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2b      	ldr	r2, [pc, #172]	; (8003124 <TIM_Base_SetConfig+0x11c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2a      	ldr	r2, [pc, #168]	; (8003128 <TIM_Base_SetConfig+0x120>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a29      	ldr	r2, [pc, #164]	; (800312c <TIM_Base_SetConfig+0x124>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d017      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a28      	ldr	r2, [pc, #160]	; (8003130 <TIM_Base_SetConfig+0x128>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <TIM_Base_SetConfig+0x12c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00f      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <TIM_Base_SetConfig+0x130>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <TIM_Base_SetConfig+0x134>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a24      	ldr	r2, [pc, #144]	; (8003140 <TIM_Base_SetConfig+0x138>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <TIM_Base_SetConfig+0x13c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <TIM_Base_SetConfig+0x114>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0xf8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a0c      	ldr	r2, [pc, #48]	; (800312c <TIM_Base_SetConfig+0x124>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d103      	bne.n	8003108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	615a      	str	r2, [r3, #20]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800
 800313c:	40001800 	.word	0x40001800
 8003140:	40001c00 	.word	0x40001c00
 8003144:	40002000 	.word	0x40002000

08003148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	f023 0201 	bic.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f023 030a 	bic.w	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b087      	sub	sp, #28
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0210 	bic.w	r2, r3, #16
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003206:	b480      	push	{r7}
 8003208:	b085      	sub	sp, #20
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	f043 0307 	orr.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	609a      	str	r2, [r3, #8]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	021a      	lsls	r2, r3, #8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	431a      	orrs	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003290:	2302      	movs	r3, #2
 8003292:	e05a      	b.n	800334a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a21      	ldr	r2, [pc, #132]	; (8003358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e0:	d01d      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1d      	ldr	r2, [pc, #116]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a17      	ldr	r2, [pc, #92]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10c      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	4313      	orrs	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40010400 	.word	0x40010400
 800336c:	40014000 	.word	0x40014000
 8003370:	40001800 	.word	0x40001800

08003374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e03f      	b.n	8003406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fc5e 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f929 	bl	8003610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b08a      	sub	sp, #40	; 0x28
 8003412:	af02      	add	r7, sp, #8
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b20      	cmp	r3, #32
 800342c:	d17c      	bne.n	8003528 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_UART_Transmit+0x2c>
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e075      	b.n	800352a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_UART_Transmit+0x3e>
 8003448:	2302      	movs	r3, #2
 800344a:	e06e      	b.n	800352a <HAL_UART_Transmit+0x11c>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2221      	movs	r2, #33	; 0x21
 800345e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003462:	f7fe fc51 	bl	8001d08 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d108      	bne.n	8003490 <HAL_UART_Transmit+0x82>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	e003      	b.n	8003498 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034a0:	e02a      	b.n	80034f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f840 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e036      	b.n	800352a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	3302      	adds	r3, #2
 80034d6:	61bb      	str	r3, [r7, #24]
 80034d8:	e007      	b.n	80034ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1cf      	bne.n	80034a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f810 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e006      	b.n	800352a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b090      	sub	sp, #64	; 0x40
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	e050      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d04c      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
 8003552:	f7fe fbd9 	bl	8001d08 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800355e:	429a      	cmp	r2, r3
 8003560:	d241      	bcs.n	80035e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003582:	637a      	str	r2, [r7, #52]	; 0x34
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e5      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	613b      	str	r3, [r7, #16]
   return(result);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035b6:	623a      	str	r2, [r7, #32]
 80035b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	69f9      	ldr	r1, [r7, #28]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e00f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d09f      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3740      	adds	r7, #64	; 0x40
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	b09f      	sub	sp, #124	; 0x7c
 8003616:	af00      	add	r7, sp, #0
 8003618:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	ea40 0301 	orr.w	r3, r0, r1
 8003630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	431a      	orrs	r2, r3
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4313      	orrs	r3, r2
 8003648:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003654:	f021 010c 	bic.w	r1, r1, #12
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800365e:	430b      	orrs	r3, r1
 8003660:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	6999      	ldr	r1, [r3, #24]
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	ea40 0301 	orr.w	r3, r0, r1
 8003678:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4bc5      	ldr	r3, [pc, #788]	; (8003994 <UART_SetConfig+0x384>)
 8003680:	429a      	cmp	r2, r3
 8003682:	d004      	beq.n	800368e <UART_SetConfig+0x7e>
 8003684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4bc3      	ldr	r3, [pc, #780]	; (8003998 <UART_SetConfig+0x388>)
 800368a:	429a      	cmp	r2, r3
 800368c:	d103      	bne.n	8003696 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800368e:	f7ff fa93 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8003692:	6778      	str	r0, [r7, #116]	; 0x74
 8003694:	e002      	b.n	800369c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003696:	f7ff fa7b 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 800369a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	f040 80b6 	bne.w	8003814 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036aa:	461c      	mov	r4, r3
 80036ac:	f04f 0500 	mov.w	r5, #0
 80036b0:	4622      	mov	r2, r4
 80036b2:	462b      	mov	r3, r5
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	6439      	str	r1, [r7, #64]	; 0x40
 80036b8:	415b      	adcs	r3, r3
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
 80036bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036c0:	1912      	adds	r2, r2, r4
 80036c2:	eb45 0303 	adc.w	r3, r5, r3
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	00d9      	lsls	r1, r3, #3
 80036d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036d4:	00d0      	lsls	r0, r2, #3
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	1911      	adds	r1, r2, r4
 80036dc:	6639      	str	r1, [r7, #96]	; 0x60
 80036de:	416b      	adcs	r3, r5
 80036e0:	667b      	str	r3, [r7, #100]	; 0x64
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80036f0:	415b      	adcs	r3, r3
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036fc:	f7fc fdb8 	bl	8000270 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4ba5      	ldr	r3, [pc, #660]	; (800399c <UART_SetConfig+0x38c>)
 8003706:	fba3 2302 	umull	r2, r3, r3, r2
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	011e      	lsls	r6, r3, #4
 800370e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003710:	461c      	mov	r4, r3
 8003712:	f04f 0500 	mov.w	r5, #0
 8003716:	4622      	mov	r2, r4
 8003718:	462b      	mov	r3, r5
 800371a:	1891      	adds	r1, r2, r2
 800371c:	6339      	str	r1, [r7, #48]	; 0x30
 800371e:	415b      	adcs	r3, r3
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
 8003722:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003726:	1912      	adds	r2, r2, r4
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	00d9      	lsls	r1, r3, #3
 8003736:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800373a:	00d0      	lsls	r0, r2, #3
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	1911      	adds	r1, r2, r4
 8003742:	65b9      	str	r1, [r7, #88]	; 0x58
 8003744:	416b      	adcs	r3, r5
 8003746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	461a      	mov	r2, r3
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	1891      	adds	r1, r2, r2
 8003754:	62b9      	str	r1, [r7, #40]	; 0x28
 8003756:	415b      	adcs	r3, r3
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800375e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003762:	f7fc fd85 	bl	8000270 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4b8c      	ldr	r3, [pc, #560]	; (800399c <UART_SetConfig+0x38c>)
 800376c:	fba3 1302 	umull	r1, r3, r3, r2
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	2164      	movs	r1, #100	; 0x64
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	3332      	adds	r3, #50	; 0x32
 800377e:	4a87      	ldr	r2, [pc, #540]	; (800399c <UART_SetConfig+0x38c>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800378c:	441e      	add	r6, r3
 800378e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003790:	4618      	mov	r0, r3
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	1894      	adds	r4, r2, r2
 800379c:	623c      	str	r4, [r7, #32]
 800379e:	415b      	adcs	r3, r3
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a6:	1812      	adds	r2, r2, r0
 80037a8:	eb41 0303 	adc.w	r3, r1, r3
 80037ac:	f04f 0400 	mov.w	r4, #0
 80037b0:	f04f 0500 	mov.w	r5, #0
 80037b4:	00dd      	lsls	r5, r3, #3
 80037b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037ba:	00d4      	lsls	r4, r2, #3
 80037bc:	4622      	mov	r2, r4
 80037be:	462b      	mov	r3, r5
 80037c0:	1814      	adds	r4, r2, r0
 80037c2:	653c      	str	r4, [r7, #80]	; 0x50
 80037c4:	414b      	adcs	r3, r1
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
 80037c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	1891      	adds	r1, r2, r2
 80037d4:	61b9      	str	r1, [r7, #24]
 80037d6:	415b      	adcs	r3, r3
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037e2:	f7fc fd45 	bl	8000270 <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <UART_SetConfig+0x38c>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a67      	ldr	r2, [pc, #412]	; (800399c <UART_SetConfig+0x38c>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 0207 	and.w	r2, r3, #7
 800380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4432      	add	r2, r6
 8003810:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003812:	e0b9      	b.n	8003988 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003816:	461c      	mov	r4, r3
 8003818:	f04f 0500 	mov.w	r5, #0
 800381c:	4622      	mov	r2, r4
 800381e:	462b      	mov	r3, r5
 8003820:	1891      	adds	r1, r2, r2
 8003822:	6139      	str	r1, [r7, #16]
 8003824:	415b      	adcs	r3, r3
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800382c:	1912      	adds	r2, r2, r4
 800382e:	eb45 0303 	adc.w	r3, r5, r3
 8003832:	f04f 0000 	mov.w	r0, #0
 8003836:	f04f 0100 	mov.w	r1, #0
 800383a:	00d9      	lsls	r1, r3, #3
 800383c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003840:	00d0      	lsls	r0, r2, #3
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	eb12 0804 	adds.w	r8, r2, r4
 800384a:	eb43 0905 	adc.w	r9, r3, r5
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4618      	mov	r0, r3
 8003854:	f04f 0100 	mov.w	r1, #0
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	008b      	lsls	r3, r1, #2
 8003862:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003866:	0082      	lsls	r2, r0, #2
 8003868:	4640      	mov	r0, r8
 800386a:	4649      	mov	r1, r9
 800386c:	f7fc fd00 	bl	8000270 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <UART_SetConfig+0x38c>)
 8003876:	fba3 2302 	umull	r2, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	011e      	lsls	r6, r3, #4
 800387e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003880:	4618      	mov	r0, r3
 8003882:	f04f 0100 	mov.w	r1, #0
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	1894      	adds	r4, r2, r2
 800388c:	60bc      	str	r4, [r7, #8]
 800388e:	415b      	adcs	r3, r3
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003896:	1812      	adds	r2, r2, r0
 8003898:	eb41 0303 	adc.w	r3, r1, r3
 800389c:	f04f 0400 	mov.w	r4, #0
 80038a0:	f04f 0500 	mov.w	r5, #0
 80038a4:	00dd      	lsls	r5, r3, #3
 80038a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038aa:	00d4      	lsls	r4, r2, #3
 80038ac:	4622      	mov	r2, r4
 80038ae:	462b      	mov	r3, r5
 80038b0:	1814      	adds	r4, r2, r0
 80038b2:	64bc      	str	r4, [r7, #72]	; 0x48
 80038b4:	414b      	adcs	r3, r1
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	008b      	lsls	r3, r1, #2
 80038cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038d0:	0082      	lsls	r2, r0, #2
 80038d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038d6:	f7fc fccb 	bl	8000270 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <UART_SetConfig+0x38c>)
 80038e0:	fba3 1302 	umull	r1, r3, r3, r2
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	2164      	movs	r1, #100	; 0x64
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	3332      	adds	r3, #50	; 0x32
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <UART_SetConfig+0x38c>)
 80038f4:	fba2 2303 	umull	r2, r3, r2, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	441e      	add	r6, r3
 8003900:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003902:	4618      	mov	r0, r3
 8003904:	f04f 0100 	mov.w	r1, #0
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	1894      	adds	r4, r2, r2
 800390e:	603c      	str	r4, [r7, #0]
 8003910:	415b      	adcs	r3, r3
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003918:	1812      	adds	r2, r2, r0
 800391a:	eb41 0303 	adc.w	r3, r1, r3
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	f04f 0500 	mov.w	r5, #0
 8003926:	00dd      	lsls	r5, r3, #3
 8003928:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800392c:	00d4      	lsls	r4, r2, #3
 800392e:	4622      	mov	r2, r4
 8003930:	462b      	mov	r3, r5
 8003932:	eb12 0a00 	adds.w	sl, r2, r0
 8003936:	eb43 0b01 	adc.w	fp, r3, r1
 800393a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4618      	mov	r0, r3
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	008b      	lsls	r3, r1, #2
 800394e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003952:	0082      	lsls	r2, r0, #2
 8003954:	4650      	mov	r0, sl
 8003956:	4659      	mov	r1, fp
 8003958:	f7fc fc8a 	bl	8000270 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <UART_SetConfig+0x38c>)
 8003962:	fba3 1302 	umull	r1, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2164      	movs	r1, #100	; 0x64
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	3332      	adds	r3, #50	; 0x32
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <UART_SetConfig+0x38c>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4432      	add	r2, r6
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	377c      	adds	r7, #124	; 0x7c
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003992:	bf00      	nop
 8003994:	40011000 	.word	0x40011000
 8003998:	40011400 	.word	0x40011400
 800399c:	51eb851f 	.word	0x51eb851f

080039a0 <load32_littleendian>:
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns 32-bit unsigned integer loaded from x
**************************************************/
static uint32_t load32_littleendian(const uint8_t x[4])
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t r;
  r  = (uint32_t)x[0];
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[1] << 8;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3301      	adds	r3, #1
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[2] << 16;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3302      	adds	r3, #2
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[3] << 24;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3303      	adds	r3, #3
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
  return r;
 80039d8:	68fb      	ldr	r3, [r7, #12]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <cbd2>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
static void cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b088      	sub	sp, #32
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/8;i++) {
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e03d      	b.n	8003a72 <cbd2+0x8c>
    t  = load32_littleendian(buf+4*i);
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff ffce 	bl	80039a0 <load32_littleendian>
 8003a04:	6178      	str	r0, [r7, #20]
    d  = t & 0x55555555;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8003a0c:	613b      	str	r3, [r7, #16]
    d += (t>>1) & 0x55555555;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    for(j=0;j<8;j++) {
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	e021      	b.n	8003a66 <cbd2+0x80>
      a = (d >> (4*j+0)) & 0x3;
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	81fb      	strh	r3, [r7, #14]
      b = (d >> (4*j+2)) & 0x3;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	81bb      	strh	r3, [r7, #12]
      r->coeffs[8*i+j] = a - b;
 8003a48:	89fa      	ldrh	r2, [r7, #14]
 8003a4a:	89bb      	ldrh	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	b299      	uxth	r1, r3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	441a      	add	r2, r3
 8003a58:	b209      	sxth	r1, r1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<8;j++) {
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d9da      	bls.n	8003a22 <cbd2+0x3c>
  for(i=0;i<KYBER_N/8;i++) {
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2b1f      	cmp	r3, #31
 8003a76:	d9be      	bls.n	80039f6 <cbd2+0x10>
    }
  }
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <pqcrystals_kyber1024_ref_poly_cbd_eta1>:
  }
}
#endif

void poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
#if KYBER_ETA1 == 2
  cbd2(r, buf);
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ffa9 	bl	80039e6 <cbd2>
#elif KYBER_ETA1 == 3
  cbd3(r, buf);
#else
#error "This implementation requires eta1 in {2,3}"
#endif
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <pqcrystals_kyber1024_ref_poly_cbd_eta2>:

void poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
#if KYBER_ETA2 == 2
  cbd2(r, buf);
 8003aa6:	6839      	ldr	r1, [r7, #0]
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff9c 	bl	80039e6 <cbd2>
#else
#error "This implementation requires eta2 = 2"
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <cpucycles>:
static inline uint64_t cpucycles(void) {
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return (uint64_t) *DWT_CYCCNT;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <cpucycles+0x1c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f04f 0300 	mov.w	r3, #0
}
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	2000016c 	.word	0x2000016c

08003ad8 <cpucycles_overhead>:
#include <stdint.h>
#include "cpucycles.h"
#include "main.h"

uint64_t cpucycles_overhead(void) {
 8003ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003adc:	b088      	sub	sp, #32
 8003ade:	af00      	add	r7, sp, #0
  uint64_t t0, t1, overhead = -1LL;
 8003ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  unsigned int i;

  for(i=0;i<100000;i++) {
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e022      	b.n	8003b38 <cpucycles_overhead+0x60>
    t0 = cpucycles();
 8003af2:	f7ff ffe1 	bl	8003ab8 <cpucycles>
 8003af6:	e9c7 0102 	strd	r0, r1, [r7, #8]
    // __asm__ volatile ("");
    __NOP();
 8003afa:	bf00      	nop
    t1 = cpucycles();
 8003afc:	f7ff ffdc 	bl	8003ab8 <cpucycles>
 8003b00:	e9c7 0100 	strd	r0, r1, [r7]
    if(t1 - t0 < overhead)
 8003b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0c:	1a84      	subs	r4, r0, r2
 8003b0e:	eb61 0503 	sbc.w	r5, r1, r3
 8003b12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b16:	429d      	cmp	r5, r3
 8003b18:	bf08      	it	eq
 8003b1a:	4294      	cmpeq	r4, r2
 8003b1c:	d209      	bcs.n	8003b32 <cpucycles_overhead+0x5a>
      overhead = t1 - t0;
 8003b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b26:	ebb0 0802 	subs.w	r8, r0, r2
 8003b2a:	eb61 0903 	sbc.w	r9, r1, r3
 8003b2e:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(i=0;i<100000;i++) {
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	3301      	adds	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <cpucycles_overhead+0x78>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d9d8      	bls.n	8003af2 <cpucycles_overhead+0x1a>
  }

  return overhead;
 8003b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b50:	0001869f 	.word	0x0001869f

08003b54 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 8003b54:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6179      	str	r1, [r7, #20]
 8003b6e:	e021      	b.n	8003bb4 <load64+0x60>
    r |= (uint64_t)x[i] << 8*i;
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	6979      	ldr	r1, [r7, #20]
 8003b74:	4401      	add	r1, r0
 8003b76:	7809      	ldrb	r1, [r1, #0]
 8003b78:	b2c8      	uxtb	r0, r1
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	697c      	ldr	r4, [r7, #20]
 8003b80:	00e4      	lsls	r4, r4, #3
 8003b82:	f1a4 0620 	sub.w	r6, r4, #32
 8003b86:	f1c4 0520 	rsb	r5, r4, #32
 8003b8a:	fa01 f304 	lsl.w	r3, r1, r4
 8003b8e:	fa00 f606 	lsl.w	r6, r0, r6
 8003b92:	4333      	orrs	r3, r6
 8003b94:	fa20 f505 	lsr.w	r5, r0, r5
 8003b98:	432b      	orrs	r3, r5
 8003b9a:	fa00 f204 	lsl.w	r2, r0, r4
 8003b9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ba2:	ea40 0802 	orr.w	r8, r0, r2
 8003ba6:	ea41 0903 	orr.w	r9, r1, r3
 8003baa:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	3101      	adds	r1, #1
 8003bb2:	6179      	str	r1, [r7, #20]
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	2907      	cmp	r1, #7
 8003bb8:	d9da      	bls.n	8003b70 <load64+0x1c>

  return r;
 8003bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003bca:	4770      	bx	lr

08003bcc <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 8003bcc:	b4f0      	push	{r4, r5, r6, r7}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e019      	b.n	8003c12 <store64+0x46>
    x[i] = u >> 8*i;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	00d9      	lsls	r1, r3, #3
 8003be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be6:	f1c1 0620 	rsb	r6, r1, #32
 8003bea:	f1a1 0020 	sub.w	r0, r1, #32
 8003bee:	fa22 f401 	lsr.w	r4, r2, r1
 8003bf2:	fa03 f606 	lsl.w	r6, r3, r6
 8003bf6:	4334      	orrs	r4, r6
 8003bf8:	fa23 f000 	lsr.w	r0, r3, r0
 8003bfc:	4304      	orrs	r4, r0
 8003bfe:	fa23 f501 	lsr.w	r5, r3, r1
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4413      	add	r3, r2
 8003c08:	b2e2      	uxtb	r2, r4
 8003c0a:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d9e2      	bls.n	8003bde <store64+0x12>
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bcf0      	pop	{r4, r5, r6, r7}
 8003c22:	4770      	bx	lr

08003c24 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8003c24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c28:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c32:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8003c34:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8003c42:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 8003c46:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c50:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8003c54:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 8003c58:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c62:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8003c66:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 8003c6a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c74:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8003c78:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 8003c7c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c86:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8003c8a:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 8003c8e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003c98:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8003c9c:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8003ca0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003caa:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8003cae:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8003cb2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003cbc:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8003cc0:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8003cc4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003cce:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8003cd2:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 8003cd6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003ce0:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8003ce8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003cf2:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8003cf6:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 8003cfa:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003d04:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8003d08:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8003d0c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003d16:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8003d1e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003d28:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8003d2c:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 8003d30:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8003d3a:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003d3e:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 8003d42:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003d4c:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8003d50:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 8003d54:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003d5e:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8003d62:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 8003d66:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003d70:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8003d74:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8003d78:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003d82:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8003d86:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8003d8a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003d94:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003d98:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8003d9c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003da6:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003daa:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8003dae:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003db8:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003dbc:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8003dc0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8003dca:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8003dce:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8003dd2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8003ddc:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8003de0:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8003de4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8003dee:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8003df2:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 8003df6:	2300      	movs	r3, #0
 8003df8:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8003dfc:	f002 bd96 	b.w	800692c <KeccakF1600_StatePermute+0x2d08>
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8003e00:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e08:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	ea80 0602 	eor.w	r6, r0, r2
 8003e14:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 8003e18:	404b      	eors	r3, r1
 8003e1a:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8003e1e:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 8003e2a:	4051      	eors	r1, r2
 8003e2c:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 8003e30:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 8003e34:	404b      	eors	r3, r1
 8003e36:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8003e3a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 8003e46:	4051      	eors	r1, r2
 8003e48:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 8003e4c:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8003e50:	404b      	eors	r3, r1
 8003e52:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8003e56:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 8003e62:	4051      	eors	r1, r2
 8003e64:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 8003e68:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 8003e6c:	404b      	eors	r3, r1
 8003e6e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8003e72:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8003e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003e7e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8003e82:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e8a:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	ea80 0602 	eor.w	r6, r0, r2
 8003e96:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 8003e9a:	404b      	eors	r3, r1
 8003e9c:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8003ea0:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 8003eac:	4051      	eors	r1, r2
 8003eae:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 8003eb2:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 8003eb6:	404b      	eors	r3, r1
 8003eb8:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8003ebc:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 8003ec8:	4051      	eors	r1, r2
 8003eca:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 8003ece:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 8003ed2:	404b      	eors	r3, r1
 8003ed4:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8003ed8:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 8003ee4:	4051      	eors	r1, r2
 8003ee6:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 8003eea:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 8003eee:	404b      	eors	r3, r1
 8003ef0:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8003ef4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003f00:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8003f04:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	ea80 0602 	eor.w	r6, r0, r2
 8003f18:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 8003f1c:	404b      	eors	r3, r1
 8003f1e:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8003f22:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 8003f2e:	4051      	eors	r1, r2
 8003f30:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 8003f34:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 8003f38:	404b      	eors	r3, r1
 8003f3a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8003f3e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 8003f4a:	4051      	eors	r1, r2
 8003f4c:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 8003f50:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 8003f54:	404b      	eors	r3, r1
 8003f56:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8003f5a:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 8003f66:	4051      	eors	r1, r2
 8003f68:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 8003f6c:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 8003f70:	404b      	eors	r3, r1
 8003f72:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8003f76:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003f82:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8003f86:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8003f8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f8e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	ea80 0602 	eor.w	r6, r0, r2
 8003f9a:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 8003f9e:	404b      	eors	r3, r1
 8003fa0:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8003fa4:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 8003fb0:	4051      	eors	r1, r2
 8003fb2:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 8003fb6:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 8003fba:	404b      	eors	r3, r1
 8003fbc:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8003fc0:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 8003fcc:	4051      	eors	r1, r2
 8003fce:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 8003fd2:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 8003fd6:	404b      	eors	r3, r1
 8003fd8:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8003fdc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 8003fe8:	4051      	eors	r1, r2
 8003fea:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 8003fee:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 8003ff2:	404b      	eors	r3, r1
 8003ff4:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8003ff8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004004:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8004008:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800400c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004010:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	ea80 0602 	eor.w	r6, r0, r2
 800401c:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 8004020:	404b      	eors	r3, r1
 8004022:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8004026:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 8004032:	4051      	eors	r1, r2
 8004034:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 8004038:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 800403c:	404b      	eors	r3, r1
 800403e:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8004042:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404a:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 800404e:	4051      	eors	r1, r2
 8004050:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 8004054:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 8004058:	404b      	eors	r3, r1
 800405a:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 800405e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 800406a:	4051      	eors	r1, r2
 800406c:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 8004070:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 8004074:	404b      	eors	r3, r1
 8004076:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 800407a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004086:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 800408a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800408e:	0fda      	lsrs	r2, r3, #31
 8004090:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 800409c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80040a0:	0fda      	lsrs	r2, r3, #31
 80040a2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 80040ae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 80040ba:	4051      	eors	r1, r2
 80040bc:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 80040c0:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 80040c4:	404b      	eors	r3, r1
 80040c6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80040ca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80040d6:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80040da:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80040de:	0fda      	lsrs	r2, r3, #31
 80040e0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 80040ec:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80040f0:	0fda      	lsrs	r2, r3, #31
 80040f2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 80040fe:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 800410a:	4051      	eors	r1, r2
 800410c:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 8004110:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 8004114:	404b      	eors	r3, r1
 8004116:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 800411a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8004126:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800412a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800412e:	0fda      	lsrs	r2, r3, #31
 8004130:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 800413c:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8004140:	0fda      	lsrs	r2, r3, #31
 8004142:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 800414e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 800415a:	4051      	eors	r1, r2
 800415c:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 8004160:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 8004164:	404b      	eors	r3, r1
 8004166:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 800416a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8004176:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800417a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800417e:	0fda      	lsrs	r2, r3, #31
 8004180:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 800418c:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8004190:	0fda      	lsrs	r2, r3, #31
 8004192:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 800419e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 80041aa:	4051      	eors	r1, r2
 80041ac:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 80041b0:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 80041b4:	404b      	eors	r3, r1
 80041b6:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 80041ba:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80041c6:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80041ca:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80041ce:	0fda      	lsrs	r2, r3, #31
 80041d0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 80041dc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80041e0:	0fda      	lsrs	r2, r3, #31
 80041e2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 80041ee:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 80041fa:	4051      	eors	r1, r2
 80041fc:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 8004200:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 8004204:	404b      	eors	r3, r1
 8004206:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 800420a:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8004216:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 800421a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800421e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004222:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	ea80 0602 	eor.w	r6, r0, r2
 800422e:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 8004232:	404b      	eors	r3, r1
 8004234:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8004238:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8004244:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8004248:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004254:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8004258:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800425c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004260:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	ea80 0602 	eor.w	r6, r0, r2
 800426c:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 8004270:	404b      	eors	r3, r1
 8004272:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8004276:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8004282:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8004286:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 800428a:	031a      	lsls	r2, r3, #12
 800428c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8004298:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800429c:	031a      	lsls	r2, r3, #12
 800429e:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80042a2:	0d1b      	lsrs	r3, r3, #20
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80042aa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80042b6:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 80042ba:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80042be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	ea80 0602 	eor.w	r6, r0, r2
 80042ce:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 80042d2:	404b      	eors	r3, r1
 80042d4:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 80042d8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80042e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 80042e8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80042ec:	02da      	lsls	r2, r3, #11
 80042ee:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80042f2:	0d5b      	lsrs	r3, r3, #21
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80042fa:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 80042fe:	02da      	lsls	r2, r3, #11
 8004300:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8004304:	0d5b      	lsrs	r3, r3, #21
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 800430c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004318:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 800431c:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8004320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004324:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	ea80 0602 	eor.w	r6, r0, r2
 8004330:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 8004334:	404b      	eors	r3, r1
 8004336:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 800433a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8004346:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 800434a:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 800434e:	0ada      	lsrs	r2, r3, #11
 8004350:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8004354:	055b      	lsls	r3, r3, #21
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 800435c:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8004360:	0ada      	lsrs	r2, r3, #11
 8004362:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8004366:	055b      	lsls	r3, r3, #21
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 800436e:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800437a:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800437e:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8004382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004386:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	ea80 0602 	eor.w	r6, r0, r2
 8004392:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 8004396:	404b      	eors	r3, r1
 8004398:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 800439c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 80043a8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 80043ac:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80043b0:	0c9a      	lsrs	r2, r3, #18
 80043b2:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80043b6:	039b      	lsls	r3, r3, #14
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80043be:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 80043c2:	0c9a      	lsrs	r2, r3, #18
 80043c4:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 80043c8:	039b      	lsls	r3, r3, #14
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 80043d0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80043dc:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 80043e0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	43d1      	mvns	r1, r2
 80043ea:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 80043ee:	43db      	mvns	r3, r3
 80043f0:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80043f4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 8004400:	4011      	ands	r1, r2
 8004402:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 8004406:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 800440a:	400b      	ands	r3, r1
 800440c:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 8004410:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 800441c:	4051      	eors	r1, r2
 800441e:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 8004422:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 8004426:	404b      	eors	r3, r1
 8004428:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 800442c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8004438:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 800443c:	4afd      	ldr	r2, [pc, #1012]	; (8004834 <KeccakF1600_StatePermute+0xc10>)
 800443e:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800444a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	ea82 0600 	eor.w	r6, r2, r0
 8004456:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 800445a:	404b      	eors	r3, r1
 800445c:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8004460:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800446c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 8004470:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	43d1      	mvns	r1, r2
 800447a:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 800447e:	43db      	mvns	r3, r3
 8004480:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8004484:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 8004490:	4011      	ands	r1, r2
 8004492:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 8004496:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 800449a:	400b      	ands	r3, r1
 800449c:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 80044a0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 80044ac:	4051      	eors	r1, r2
 80044ae:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 80044b2:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 80044b6:	404b      	eors	r3, r1
 80044b8:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 80044bc:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 80044c8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 80044cc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	43d1      	mvns	r1, r2
 80044d6:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 80044da:	43db      	mvns	r3, r3
 80044dc:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 80044e0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 80044ec:	4011      	ands	r1, r2
 80044ee:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 80044f2:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 80044f6:	400b      	ands	r3, r1
 80044f8:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 80044fc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8004508:	4051      	eors	r1, r2
 800450a:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 800450e:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 8004512:	404b      	eors	r3, r1
 8004514:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8004518:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8004524:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8004528:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	43d1      	mvns	r1, r2
 8004532:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 8004536:	43db      	mvns	r3, r3
 8004538:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800453c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 8004548:	4011      	ands	r1, r2
 800454a:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 800454e:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 8004552:	400b      	ands	r3, r1
 8004554:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8004558:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 8004564:	4051      	eors	r1, r2
 8004566:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 800456a:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 800456e:	404b      	eors	r3, r1
 8004570:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8004574:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8004580:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 8004584:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458c:	43d1      	mvns	r1, r2
 800458e:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 8004592:	43db      	mvns	r3, r3
 8004594:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8004598:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 80045a4:	4011      	ands	r1, r2
 80045a6:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 80045aa:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 80045ae:	400b      	ands	r3, r1
 80045b0:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 80045b4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 80045c0:	4051      	eors	r1, r2
 80045c2:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 80045c6:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 80045ca:	404b      	eors	r3, r1
 80045cc:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 80045d0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80045dc:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 80045e0:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80045e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045e8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	ea80 0602 	eor.w	r6, r0, r2
 80045f4:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 80045f8:	404b      	eors	r3, r1
 80045fa:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80045fe:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 800460a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800460e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8004612:	091a      	lsrs	r2, r3, #4
 8004614:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8004620:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8004624:	091a      	lsrs	r2, r3, #4
 8004626:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800462a:	071b      	lsls	r3, r3, #28
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004632:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800463e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 8004642:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800464a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	ea80 0602 	eor.w	r6, r0, r2
 8004656:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 800465a:	404b      	eors	r3, r1
 800465c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8004660:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800466c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 8004670:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8004674:	0b1a      	lsrs	r2, r3, #12
 8004676:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800467a:	051b      	lsls	r3, r3, #20
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8004682:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8004686:	0b1a      	lsrs	r2, r3, #12
 8004688:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8004694:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80046a0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 80046a4:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 80046a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ac:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	ea80 0602 	eor.w	r6, r0, r2
 80046b8:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 80046bc:	404b      	eors	r3, r1
 80046be:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 80046c2:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80046ce:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 80046d2:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 80046d6:	0f5a      	lsrs	r2, r3, #29
 80046d8:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80046e4:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 80046e8:	0f5a      	lsrs	r2, r3, #29
 80046ea:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80046f6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004702:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8004706:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 800470a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800470e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	ea80 0602 	eor.w	r6, r0, r2
 800471a:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 800471e:	404b      	eors	r3, r1
 8004720:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004724:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8004730:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 8004734:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004738:	035a      	lsls	r2, r3, #13
 800473a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800473e:	0cdb      	lsrs	r3, r3, #19
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8004746:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800474a:	035a      	lsls	r2, r3, #13
 800474c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004750:	0cdb      	lsrs	r3, r3, #19
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8004758:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004764:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 8004768:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800476c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004770:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	ea80 0602 	eor.w	r6, r0, r2
 800477c:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 8004780:	404b      	eors	r3, r1
 8004782:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8004786:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8004792:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 8004796:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800479a:	075a      	lsls	r2, r3, #29
 800479c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80047a8:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 80047ac:	075a      	lsls	r2, r3, #29
 80047ae:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 80047b2:	08db      	lsrs	r3, r3, #3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80047ba:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80047c6:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 80047ca:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	43d1      	mvns	r1, r2
 80047d4:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 80047d8:	43db      	mvns	r3, r3
 80047da:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 80047de:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 80047ea:	4011      	ands	r1, r2
 80047ec:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 80047f0:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 80047f4:	400b      	ands	r3, r1
 80047f6:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 80047fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 8004806:	4051      	eors	r1, r2
 8004808:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 800480c:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 8004810:	404b      	eors	r3, r1
 8004812:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8004816:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8004822:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 8004826:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	43d1      	mvns	r1, r2
 8004830:	e002      	b.n	8004838 <KeccakF1600_StatePermute+0xc14>
 8004832:	bf00      	nop
 8004834:	0800a990 	.word	0x0800a990
 8004838:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 800483c:	43db      	mvns	r3, r3
 800483e:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 8004842:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 800484e:	4011      	ands	r1, r2
 8004850:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 8004854:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 8004858:	400b      	ands	r3, r1
 800485a:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800485e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 800486a:	4051      	eors	r1, r2
 800486c:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 8004870:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 8004874:	404b      	eors	r3, r1
 8004876:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800487a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8004886:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800488a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	43d1      	mvns	r1, r2
 8004894:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 8004898:	43db      	mvns	r3, r3
 800489a:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 800489e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 80048aa:	4011      	ands	r1, r2
 80048ac:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 80048b0:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 80048b4:	400b      	ands	r3, r1
 80048b6:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 80048ba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 80048c6:	4051      	eors	r1, r2
 80048c8:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 80048cc:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 80048d0:	404b      	eors	r3, r1
 80048d2:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80048d6:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 80048e2:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 80048e6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	43d1      	mvns	r1, r2
 80048f0:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 80048f4:	43db      	mvns	r3, r3
 80048f6:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 80048fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 8004906:	4011      	ands	r1, r2
 8004908:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 800490c:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 8004910:	400b      	ands	r3, r1
 8004912:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 8004916:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 8004922:	4051      	eors	r1, r2
 8004924:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 8004928:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 800492c:	404b      	eors	r3, r1
 800492e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8004932:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 800493e:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 8004942:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	43d1      	mvns	r1, r2
 800494c:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 8004950:	43db      	mvns	r3, r3
 8004952:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8004956:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 8004962:	4011      	ands	r1, r2
 8004964:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 8004968:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 800496c:	400b      	ands	r3, r1
 800496e:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8004972:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 800497e:	4051      	eors	r1, r2
 8004980:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 8004984:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 8004988:	404b      	eors	r3, r1
 800498a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800498e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800499a:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 800499e:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80049a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049a6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	ea80 0602 	eor.w	r6, r0, r2
 80049b2:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 80049b6:	404b      	eors	r3, r1
 80049b8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80049bc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80049c8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 80049cc:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 80049d0:	0fda      	lsrs	r2, r3, #31
 80049d2:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80049de:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 80049e2:	0fda      	lsrs	r2, r3, #31
 80049e4:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80049f0:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80049fc:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 8004a00:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a08:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	ea80 0602 	eor.w	r6, r0, r2
 8004a14:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 8004a18:	404b      	eors	r3, r1
 8004a1a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8004a1e:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8004a22:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8004a26:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 8004a2a:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8004a2e:	0e9a      	lsrs	r2, r3, #26
 8004a30:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8004a3c:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 8004a40:	0e9a      	lsrs	r2, r3, #26
 8004a42:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8004a46:	019b      	lsls	r3, r3, #6
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8004a4e:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8004a52:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004a56:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 8004a5a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8004a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a62:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	ea80 0602 	eor.w	r6, r0, r2
 8004a6e:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 8004a72:	404b      	eors	r3, r1
 8004a74:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8004a78:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8004a7c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8004a80:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 8004a84:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004a88:	09da      	lsrs	r2, r3, #7
 8004a8a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8004a8e:	065b      	lsls	r3, r3, #25
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8004a96:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8004a9a:	09da      	lsrs	r2, r3, #7
 8004a9c:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004aa0:	065b      	lsls	r3, r3, #25
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8004aa8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8004aac:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004ab0:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 8004ab4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004abc:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac4:	ea80 0602 	eor.w	r6, r0, r2
 8004ac8:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 8004acc:	404b      	eors	r3, r1
 8004ace:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8004ad2:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8004ad6:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8004ada:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8004ade:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8004ae2:	0e1a      	lsrs	r2, r3, #24
 8004ae4:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8004af0:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 8004af4:	0e1a      	lsrs	r2, r3, #24
 8004af6:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8004b02:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8004b06:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004b0a:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 8004b0e:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8004b12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b16:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	ea80 0602 	eor.w	r6, r0, r2
 8004b22:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 8004b26:	404b      	eors	r3, r1
 8004b28:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8004b2c:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8004b30:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8004b34:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 8004b38:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 8004b3c:	0b9a      	lsrs	r2, r3, #14
 8004b3e:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8004b42:	049b      	lsls	r3, r3, #18
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8004b4a:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8004b4e:	0b9a      	lsrs	r2, r3, #14
 8004b50:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 8004b54:	049b      	lsls	r3, r3, #18
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8004b5c:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8004b60:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004b64:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 8004b68:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	43d1      	mvns	r1, r2
 8004b72:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 8004b76:	43db      	mvns	r3, r3
 8004b78:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8004b7c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 8004b88:	4011      	ands	r1, r2
 8004b8a:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 8004b8e:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 8004b92:	400b      	ands	r3, r1
 8004b94:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8004b98:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 8004ba4:	4051      	eors	r1, r2
 8004ba6:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 8004baa:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 8004bae:	404b      	eors	r3, r1
 8004bb0:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8004bb4:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8004bb8:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8004bbc:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8004bc0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	43d1      	mvns	r1, r2
 8004bca:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 8004bd4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 8004be0:	4011      	ands	r1, r2
 8004be2:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 8004be6:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 8004bea:	400b      	ands	r3, r1
 8004bec:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8004bf0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 8004bfc:	4051      	eors	r1, r2
 8004bfe:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 8004c02:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 8004c06:	404b      	eors	r3, r1
 8004c08:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8004c0c:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8004c10:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8004c14:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 8004c18:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	43d1      	mvns	r1, r2
 8004c22:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 8004c26:	43db      	mvns	r3, r3
 8004c28:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8004c2c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 8004c38:	4011      	ands	r1, r2
 8004c3a:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 8004c3e:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 8004c42:	400b      	ands	r3, r1
 8004c44:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8004c48:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 8004c54:	4051      	eors	r1, r2
 8004c56:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 8004c5a:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 8004c5e:	404b      	eors	r3, r1
 8004c60:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8004c64:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8004c68:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8004c6c:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8004c70:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	43d1      	mvns	r1, r2
 8004c7a:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8004c84:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8c:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 8004c90:	4011      	ands	r1, r2
 8004c92:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 8004c96:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8004ca0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca8:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 8004cac:	4051      	eors	r1, r2
 8004cae:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8004cb2:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 8004cb6:	404b      	eors	r3, r1
 8004cb8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8004cbc:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8004cc0:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8004cc4:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8004cc8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	43d1      	mvns	r1, r2
 8004cd2:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8004cdc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 8004ce8:	4011      	ands	r1, r2
 8004cea:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 8004cee:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004cf8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 8004d04:	4051      	eors	r1, r2
 8004d06:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8004d0a:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8004d0e:	404b      	eors	r3, r1
 8004d10:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8004d14:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8004d18:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8004d1c:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8004d20:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8004d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d28:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	ea80 0602 	eor.w	r6, r0, r2
 8004d34:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 8004d38:	404b      	eors	r3, r1
 8004d3a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8004d3e:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8004d42:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8004d46:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8004d4a:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8004d4e:	095a      	lsrs	r2, r3, #5
 8004d50:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8004d54:	06db      	lsls	r3, r3, #27
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8004d5c:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8004d60:	095a      	lsrs	r2, r3, #5
 8004d62:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8004d66:	06db      	lsls	r3, r3, #27
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8004d6e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8004d72:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004d76:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8004d7a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004d7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d82:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	ea80 0602 	eor.w	r6, r0, r2
 8004d8e:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 8004d92:	404b      	eors	r3, r1
 8004d94:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8004d98:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8004d9c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8004da0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8004da4:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004da8:	011a      	lsls	r2, r3, #4
 8004daa:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004dae:	0f1b      	lsrs	r3, r3, #28
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8004db6:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004dba:	011a      	lsls	r2, r3, #4
 8004dbc:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004dc0:	0f1b      	lsrs	r3, r3, #28
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8004dc8:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8004dcc:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004dd0:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8004dd4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ddc:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	ea80 0602 	eor.w	r6, r0, r2
 8004de8:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 8004dec:	404b      	eors	r3, r1
 8004dee:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8004df2:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8004df6:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8004dfa:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8004dfe:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004e02:	0d9a      	lsrs	r2, r3, #22
 8004e04:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004e08:	029b      	lsls	r3, r3, #10
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004e10:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004e14:	0d9a      	lsrs	r2, r3, #22
 8004e16:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004e1a:	029b      	lsls	r3, r3, #10
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8004e22:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8004e26:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004e2a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8004e2e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8004e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e36:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3e:	ea80 0602 	eor.w	r6, r0, r2
 8004e42:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 8004e46:	404b      	eors	r3, r1
 8004e48:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004e4c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8004e50:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8004e54:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8004e58:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004e5c:	0c5a      	lsrs	r2, r3, #17
 8004e5e:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004e62:	03db      	lsls	r3, r3, #15
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004e6a:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004e6e:	0c5a      	lsrs	r2, r3, #17
 8004e70:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004e74:	03db      	lsls	r3, r3, #15
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004e7c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8004e80:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004e84:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8004e88:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e90:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	ea80 0602 	eor.w	r6, r0, r2
 8004e9c:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 8004ea0:	404b      	eors	r3, r1
 8004ea2:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004ea6:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8004eaa:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8004eae:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8004eb2:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004eb6:	061a      	lsls	r2, r3, #24
 8004eb8:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004ec4:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004ec8:	061a      	lsls	r2, r3, #24
 8004eca:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004ed6:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8004eda:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004ede:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8004ee2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	43d1      	mvns	r1, r2
 8004eec:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004ef6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 8004f02:	4011      	ands	r1, r2
 8004f04:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 8004f08:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 8004f0c:	400b      	ands	r3, r1
 8004f0e:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8004f12:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 8004f1e:	4051      	eors	r1, r2
 8004f20:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8004f24:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 8004f28:	404b      	eors	r3, r1
 8004f2a:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004f2e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8004f32:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8004f36:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8004f3a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f42:	43d1      	mvns	r1, r2
 8004f44:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8004f4e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 8004f5a:	4011      	ands	r1, r2
 8004f5c:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 8004f60:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 8004f64:	400b      	ands	r3, r1
 8004f66:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8004f6a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f72:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 8004f76:	4051      	eors	r1, r2
 8004f78:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8004f7c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 8004f80:	404b      	eors	r3, r1
 8004f82:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8004f86:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8004f8a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8004f8e:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8004f92:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	43d1      	mvns	r1, r2
 8004f9c:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8004fa6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8004fb2:	4011      	ands	r1, r2
 8004fb4:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 8004fb8:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004fc2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 8004fce:	4051      	eors	r1, r2
 8004fd0:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8004fd4:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 8004fd8:	404b      	eors	r3, r1
 8004fda:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8004fde:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8004fe2:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8004fe6:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8004fea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	43d1      	mvns	r1, r2
 8004ff4:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8004ffe:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 800500a:	4011      	ands	r1, r2
 800500c:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 8005010:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 8005014:	400b      	ands	r3, r1
 8005016:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 800501a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 8005026:	4051      	eors	r1, r2
 8005028:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 800502c:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 8005030:	404b      	eors	r3, r1
 8005032:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8005036:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 800503a:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800503e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8005042:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504a:	43d1      	mvns	r1, r2
 800504c:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8005050:	43db      	mvns	r3, r3
 8005052:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8005056:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 8005062:	4011      	ands	r1, r2
 8005064:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 8005068:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 800506c:	400b      	ands	r3, r1
 800506e:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8005072:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 800507e:	4051      	eors	r1, r2
 8005080:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8005084:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8005088:	404b      	eors	r3, r1
 800508a:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 800508e:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8005092:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8005096:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 800509a:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800509e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050a2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	ea80 0602 	eor.w	r6, r0, r2
 80050ae:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 80050b2:	404b      	eors	r3, r1
 80050b4:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80050b8:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80050bc:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80050c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 80050c4:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 80050c8:	079a      	lsls	r2, r3, #30
 80050ca:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80050d6:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 80050da:	079a      	lsls	r2, r3, #30
 80050dc:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80050e8:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 80050ec:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80050f0:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 80050f4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80050f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80050fc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	ea80 0602 	eor.w	r6, r0, r2
 8005108:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 800510c:	404b      	eors	r3, r1
 800510e:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8005112:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8005116:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800511a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 800511e:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8005122:	05da      	lsls	r2, r3, #23
 8005124:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8005128:	0a5b      	lsrs	r3, r3, #9
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8005130:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8005134:	05da      	lsls	r2, r3, #23
 8005136:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 800513a:	0a5b      	lsrs	r3, r3, #9
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8005142:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8005146:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800514a:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 800514e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005156:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	ea80 0602 	eor.w	r6, r0, r2
 8005162:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 8005166:	404b      	eors	r3, r1
 8005168:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 800516c:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8005170:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8005174:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8005178:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 800517c:	01da      	lsls	r2, r3, #7
 800517e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8005182:	0e5b      	lsrs	r3, r3, #25
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800518a:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 800518e:	01da      	lsls	r2, r3, #7
 8005190:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8005194:	0e5b      	lsrs	r3, r3, #25
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800519c:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80051a0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80051a4:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 80051a8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80051ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80051b0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80051b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b8:	ea80 0602 	eor.w	r6, r0, r2
 80051bc:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 80051c0:	404b      	eors	r3, r1
 80051c2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80051c6:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80051ca:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80051ce:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 80051d2:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80051d6:	025a      	lsls	r2, r3, #9
 80051d8:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80051dc:	0ddb      	lsrs	r3, r3, #23
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80051e4:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80051e8:	025a      	lsls	r2, r3, #9
 80051ea:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80051ee:	0ddb      	lsrs	r3, r3, #23
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 80051f6:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 80051fa:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80051fe:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8005202:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800520a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	ea80 0602 	eor.w	r6, r0, r2
 8005216:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 800521a:	404b      	eors	r3, r1
 800521c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8005220:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8005224:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8005228:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 800522c:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8005230:	0f9a      	lsrs	r2, r3, #30
 8005232:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800523e:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8005242:	0f9a      	lsrs	r2, r3, #30
 8005244:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8005250:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8005254:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005258:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 800525c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	43d1      	mvns	r1, r2
 8005266:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 800526a:	43db      	mvns	r3, r3
 800526c:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8005270:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 800527c:	4011      	ands	r1, r2
 800527e:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 8005282:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8005286:	400b      	ands	r3, r1
 8005288:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 800528c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 8005298:	4051      	eors	r1, r2
 800529a:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 800529e:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 80052a2:	404b      	eors	r3, r1
 80052a4:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80052a8:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80052ac:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 80052b0:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 80052b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	43d1      	mvns	r1, r2
 80052be:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 80052c2:	43db      	mvns	r3, r3
 80052c4:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 80052c8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 80052d4:	4011      	ands	r1, r2
 80052d6:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 80052da:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 80052de:	400b      	ands	r3, r1
 80052e0:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 80052e4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 80052f0:	4051      	eors	r1, r2
 80052f2:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 80052f6:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 80052fa:	404b      	eors	r3, r1
 80052fc:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8005300:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8005304:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8005308:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 800530c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	43d1      	mvns	r1, r2
 8005316:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 800531a:	43db      	mvns	r3, r3
 800531c:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8005320:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 800532c:	4011      	ands	r1, r2
 800532e:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 8005332:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 8005336:	400b      	ands	r3, r1
 8005338:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 800533c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 8005348:	4051      	eors	r1, r2
 800534a:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 800534e:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 8005352:	404b      	eors	r3, r1
 8005354:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8005358:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800535c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8005360:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8005364:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	43d1      	mvns	r1, r2
 800536e:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8005372:	43db      	mvns	r3, r3
 8005374:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8005378:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8005384:	4011      	ands	r1, r2
 8005386:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 800538a:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 800538e:	400b      	ands	r3, r1
 8005390:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 8005394:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 80053a0:	4051      	eors	r1, r2
 80053a2:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 80053a6:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 80053aa:	404b      	eors	r3, r1
 80053ac:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80053b0:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80053b4:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80053b8:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 80053bc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	43d1      	mvns	r1, r2
 80053c6:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 80053ca:	43db      	mvns	r3, r3
 80053cc:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 80053d0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 80053dc:	4011      	ands	r1, r2
 80053de:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 80053e2:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 80053e6:	400b      	ands	r3, r1
 80053e8:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 80053ec:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 80053f8:	4051      	eors	r1, r2
 80053fa:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 80053fe:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 8005402:	404b      	eors	r3, r1
 8005404:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8005408:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800540c:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8005410:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8005414:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800541c:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	ea80 0602 	eor.w	r6, r0, r2
 8005428:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 800542c:	404b      	eors	r3, r1
 800542e:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8005432:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 800543e:	4051      	eors	r1, r2
 8005440:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 8005444:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 8005448:	404b      	eors	r3, r1
 800544a:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 800544e:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 800545a:	4051      	eors	r1, r2
 800545c:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 8005460:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 8005464:	404b      	eors	r3, r1
 8005466:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 800546a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 8005476:	4051      	eors	r1, r2
 8005478:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 800547c:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 8005480:	404b      	eors	r3, r1
 8005482:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8005486:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 800548a:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800548e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8005492:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8005496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800549a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	ea80 0602 	eor.w	r6, r0, r2
 80054a6:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 80054aa:	404b      	eors	r3, r1
 80054ac:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 80054b0:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 80054bc:	4051      	eors	r1, r2
 80054be:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 80054c2:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 80054c6:	404b      	eors	r3, r1
 80054c8:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 80054cc:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 80054d8:	4051      	eors	r1, r2
 80054da:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 80054de:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 80054e2:	404b      	eors	r3, r1
 80054e4:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 80054e8:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 80054f4:	4051      	eors	r1, r2
 80054f6:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 80054fa:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 80054fe:	404b      	eors	r3, r1
 8005500:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8005504:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8005508:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800550c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8005510:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005518:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	ea80 0602 	eor.w	r6, r0, r2
 8005524:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 8005528:	404b      	eors	r3, r1
 800552a:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 800552e:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 800553a:	4051      	eors	r1, r2
 800553c:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 8005540:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 8005544:	404b      	eors	r3, r1
 8005546:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 800554a:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 8005556:	4051      	eors	r1, r2
 8005558:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 800555c:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 8005560:	404b      	eors	r3, r1
 8005562:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 8005566:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 8005572:	4051      	eors	r1, r2
 8005574:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8005578:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 800557c:	404b      	eors	r3, r1
 800557e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8005582:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8005586:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800558a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800558e:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8005592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005596:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	ea80 0602 	eor.w	r6, r0, r2
 80055a2:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 80055a6:	404b      	eors	r3, r1
 80055a8:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 80055ac:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 80055b8:	4051      	eors	r1, r2
 80055ba:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 80055be:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 80055c2:	404b      	eors	r3, r1
 80055c4:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 80055c8:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 80055d4:	4051      	eors	r1, r2
 80055d6:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 80055da:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 80055de:	404b      	eors	r3, r1
 80055e0:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 80055e4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 80055f0:	4051      	eors	r1, r2
 80055f2:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80055f6:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 80055fa:	404b      	eors	r3, r1
 80055fc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005600:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8005604:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005608:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800560c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005614:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	ea80 0602 	eor.w	r6, r0, r2
 8005620:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 8005624:	404b      	eors	r3, r1
 8005626:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 800562a:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 8005636:	4051      	eors	r1, r2
 8005638:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 800563c:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 8005640:	404b      	eors	r3, r1
 8005642:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 8005646:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 8005652:	4051      	eors	r1, r2
 8005654:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 8005658:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 800565c:	404b      	eors	r3, r1
 800565e:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8005662:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 800566e:	4051      	eors	r1, r2
 8005670:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8005674:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 8005678:	404b      	eors	r3, r1
 800567a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800567e:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8005682:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005686:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800568a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800568e:	0fda      	lsrs	r2, r3, #31
 8005690:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800569c:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 80056a0:	0fda      	lsrs	r2, r3, #31
 80056a2:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80056ae:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 80056ba:	4051      	eors	r1, r2
 80056bc:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80056c0:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 80056c4:	404b      	eors	r3, r1
 80056c6:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 80056ca:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 80056ce:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 80056d2:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80056d6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80056da:	0fda      	lsrs	r2, r3, #31
 80056dc:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80056e8:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 80056ec:	0fda      	lsrs	r2, r3, #31
 80056ee:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 80056fa:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 8005706:	4051      	eors	r1, r2
 8005708:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 800570c:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 8005710:	404b      	eors	r3, r1
 8005712:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8005716:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800571a:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 800571e:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8005722:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8005726:	0fda      	lsrs	r2, r3, #31
 8005728:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 8005734:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8005738:	0fda      	lsrs	r2, r3, #31
 800573a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 8005746:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 8005752:	4051      	eors	r1, r2
 8005754:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8005758:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 800575c:	404b      	eors	r3, r1
 800575e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8005762:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8005766:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 800576a:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 800576e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8005772:	0fda      	lsrs	r2, r3, #31
 8005774:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 8005780:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8005784:	0fda      	lsrs	r2, r3, #31
 8005786:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 8005792:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 800579e:	4051      	eors	r1, r2
 80057a0:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80057a4:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 80057a8:	404b      	eors	r3, r1
 80057aa:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80057ae:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 80057b2:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 80057b6:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80057ba:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80057be:	0fda      	lsrs	r2, r3, #31
 80057c0:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 80057cc:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 80057d0:	0fda      	lsrs	r2, r3, #31
 80057d2:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 80057de:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 80057ea:	4051      	eors	r1, r2
 80057ec:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 80057f0:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 80057f4:	404b      	eors	r3, r1
 80057f6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80057fa:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80057fe:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8005802:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8005806:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800580a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800580e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	ea80 0602 	eor.w	r6, r0, r2
 800581a:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 800581e:	404b      	eors	r3, r1
 8005820:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8005824:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8005828:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 800582c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 8005830:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 800583c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 8005840:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8005844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005848:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	ea80 0602 	eor.w	r6, r0, r2
 8005854:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 8005858:	404b      	eors	r3, r1
 800585a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800585e:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8005862:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8005866:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 800586a:	f607 2034 	addw	r0, r7, #2612	; 0xa34
 800586e:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8005872:	6803      	ldr	r3, [r0, #0]
 8005874:	031a      	lsls	r2, r3, #12
 8005876:	680b      	ldr	r3, [r1, #0]
 8005878:	0d1b      	lsrs	r3, r3, #20
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8005880:	680b      	ldr	r3, [r1, #0]
 8005882:	031a      	lsls	r2, r3, #12
 8005884:	6803      	ldr	r3, [r0, #0]
 8005886:	0d1b      	lsrs	r3, r3, #20
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800588e:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 8005892:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005896:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 800589a:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800589e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058a2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80058a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058aa:	ea80 0602 	eor.w	r6, r0, r2
 80058ae:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 80058b2:	404b      	eors	r3, r1
 80058b4:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80058b8:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 80058bc:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80058c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80058c4:	f607 2004 	addw	r0, r7, #2564	; 0xa04
 80058c8:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80058cc:	6803      	ldr	r3, [r0, #0]
 80058ce:	02da      	lsls	r2, r3, #11
 80058d0:	680b      	ldr	r3, [r1, #0]
 80058d2:	0d5b      	lsrs	r3, r3, #21
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 80058da:	680b      	ldr	r3, [r1, #0]
 80058dc:	02da      	lsls	r2, r3, #11
 80058de:	6803      	ldr	r3, [r0, #0]
 80058e0:	0d5b      	lsrs	r3, r3, #21
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 80058e8:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 80058ec:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80058f0:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80058f4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80058f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058fc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	ea80 0602 	eor.w	r6, r0, r2
 8005908:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 800590c:	404b      	eors	r3, r1
 800590e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8005912:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 8005916:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 800591a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 800591e:	f507 601d 	add.w	r0, r7, #2512	; 0x9d0
 8005922:	f607 11d4 	addw	r1, r7, #2516	; 0x9d4
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	0ada      	lsrs	r2, r3, #11
 800592a:	680b      	ldr	r3, [r1, #0]
 800592c:	055b      	lsls	r3, r3, #21
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005934:	680b      	ldr	r3, [r1, #0]
 8005936:	0ada      	lsrs	r2, r3, #11
 8005938:	6803      	ldr	r3, [r0, #0]
 800593a:	055b      	lsls	r3, r3, #21
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8005942:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 8005946:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800594a:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 800594e:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8005952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005956:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	ea80 0602 	eor.w	r6, r0, r2
 8005962:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 8005966:	404b      	eors	r3, r1
 8005968:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800596c:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 8005970:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8005974:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8005978:	f507 601a 	add.w	r0, r7, #2464	; 0x9a0
 800597c:	f607 11a4 	addw	r1, r7, #2468	; 0x9a4
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	0c9a      	lsrs	r2, r3, #18
 8005984:	680b      	ldr	r3, [r1, #0]
 8005986:	039b      	lsls	r3, r3, #14
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800598e:	680b      	ldr	r3, [r1, #0]
 8005990:	0c9a      	lsrs	r2, r3, #18
 8005992:	6803      	ldr	r3, [r0, #0]
 8005994:	039b      	lsls	r3, r3, #14
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800599c:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 80059a0:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80059a4:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80059a8:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	43d1      	mvns	r1, r2
 80059b2:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 80059b6:	43db      	mvns	r3, r3
 80059b8:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 80059bc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 80059c8:	4011      	ands	r1, r2
 80059ca:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 80059ce:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 80059d2:	400b      	ands	r3, r1
 80059d4:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 80059d8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 80059e4:	4051      	eors	r1, r2
 80059e6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80059ea:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 80059ee:	404b      	eors	r3, r1
 80059f0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80059f4:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 80059f8:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80059fc:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005a00:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8005a04:	3301      	adds	r3, #1
 8005a06:	4af3      	ldr	r2, [pc, #972]	; (8005dd4 <KeccakF1600_StatePermute+0x21b0>)
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a10:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	ea82 0600 	eor.w	r6, r2, r0
 8005a1c:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 8005a20:	404b      	eors	r3, r1
 8005a22:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005a26:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 8005a2a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8005a2e:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8005a32:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	43d1      	mvns	r1, r2
 8005a3c:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 8005a40:	43db      	mvns	r3, r3
 8005a42:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8005a46:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 8005a52:	4011      	ands	r1, r2
 8005a54:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 8005a58:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 8005a5c:	400b      	ands	r3, r1
 8005a5e:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8005a62:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 8005a6e:	4051      	eors	r1, r2
 8005a70:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8005a74:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 8005a78:	404b      	eors	r3, r1
 8005a7a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8005a7e:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8005a82:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8005a86:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8005a8a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	43d1      	mvns	r1, r2
 8005a94:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8005a9e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 8005aaa:	4011      	ands	r1, r2
 8005aac:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 8005ab0:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 8005ab4:	400b      	ands	r3, r1
 8005ab6:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8005aba:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 8005ac6:	4051      	eors	r1, r2
 8005ac8:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8005acc:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 8005ad0:	404b      	eors	r3, r1
 8005ad2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005ad6:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005ada:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8005ade:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8005ae2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	43d1      	mvns	r1, r2
 8005aec:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8005af0:	43db      	mvns	r3, r3
 8005af2:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 8005af6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 8005b02:	4011      	ands	r1, r2
 8005b04:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8005b08:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8005b12:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 8005b1e:	4051      	eors	r1, r2
 8005b20:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8005b24:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 8005b28:	404b      	eors	r3, r1
 8005b2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8005b2e:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8005b32:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8005b36:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8005b3a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	43d1      	mvns	r1, r2
 8005b44:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8005b4e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 8005b5a:	4011      	ands	r1, r2
 8005b5c:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 8005b60:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 8005b64:	400b      	ands	r3, r1
 8005b66:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8005b6a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 8005b76:	4051      	eors	r1, r2
 8005b78:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8005b7c:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 8005b80:	404b      	eors	r3, r1
 8005b82:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005b86:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8005b8a:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8005b8e:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8005b92:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8005b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b9a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	ea80 0602 	eor.w	r6, r0, r2
 8005ba6:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 8005baa:	404b      	eors	r3, r1
 8005bac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005bb0:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8005bb4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8005bb8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8005bbc:	f607 2048 	addw	r0, r7, #2632	; 0xa48
 8005bc0:	f607 214c 	addw	r1, r7, #2636	; 0xa4c
 8005bc4:	6803      	ldr	r3, [r0, #0]
 8005bc6:	091a      	lsrs	r2, r3, #4
 8005bc8:	680b      	ldr	r3, [r1, #0]
 8005bca:	071b      	lsls	r3, r3, #28
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	091a      	lsrs	r2, r3, #4
 8005bd6:	6803      	ldr	r3, [r0, #0]
 8005bd8:	071b      	lsls	r3, r3, #28
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005be0:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8005be4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005be8:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8005bec:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bf4:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfc:	ea80 0602 	eor.w	r6, r0, r2
 8005c00:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 8005c04:	404b      	eors	r3, r1
 8005c06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8005c0a:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8005c0e:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8005c12:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8005c16:	f607 2018 	addw	r0, r7, #2584	; 0xa18
 8005c1a:	f607 211c 	addw	r1, r7, #2588	; 0xa1c
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	0b1a      	lsrs	r2, r3, #12
 8005c22:	680b      	ldr	r3, [r1, #0]
 8005c24:	051b      	lsls	r3, r3, #20
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005c2c:	680b      	ldr	r3, [r1, #0]
 8005c2e:	0b1a      	lsrs	r2, r3, #12
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	051b      	lsls	r3, r3, #20
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005c3a:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8005c3e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005c42:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8005c46:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8005c4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c4e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	ea80 0602 	eor.w	r6, r0, r2
 8005c5a:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 8005c5e:	404b      	eors	r3, r1
 8005c60:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005c64:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8005c68:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8005c6c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8005c70:	f507 6021 	add.w	r0, r7, #2576	; 0xa10
 8005c74:	f607 2114 	addw	r1, r7, #2580	; 0xa14
 8005c78:	6803      	ldr	r3, [r0, #0]
 8005c7a:	0f5a      	lsrs	r2, r3, #29
 8005c7c:	680b      	ldr	r3, [r1, #0]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8005c86:	680b      	ldr	r3, [r1, #0]
 8005c88:	0f5a      	lsrs	r2, r3, #29
 8005c8a:	6803      	ldr	r3, [r0, #0]
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005c94:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8005c98:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005c9c:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8005ca0:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8005ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ca8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	ea80 0602 	eor.w	r6, r0, r2
 8005cb4:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8005cb8:	404b      	eors	r3, r1
 8005cba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005cbe:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8005cc2:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8005cc6:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8005cca:	f607 10e4 	addw	r0, r7, #2532	; 0x9e4
 8005cce:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	035a      	lsls	r2, r3, #13
 8005cd6:	680b      	ldr	r3, [r1, #0]
 8005cd8:	0cdb      	lsrs	r3, r3, #19
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	035a      	lsls	r2, r3, #13
 8005ce4:	6803      	ldr	r3, [r0, #0]
 8005ce6:	0cdb      	lsrs	r3, r3, #19
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005cee:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8005cf2:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005cf6:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8005cfa:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8005cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d02:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	ea80 0602 	eor.w	r6, r0, r2
 8005d0e:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 8005d12:	404b      	eors	r3, r1
 8005d14:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005d18:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8005d1c:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8005d20:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8005d24:	f607 10b4 	addw	r0, r7, #2484	; 0x9b4
 8005d28:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8005d2c:	6803      	ldr	r3, [r0, #0]
 8005d2e:	075a      	lsls	r2, r3, #29
 8005d30:	680b      	ldr	r3, [r1, #0]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005d3a:	680b      	ldr	r3, [r1, #0]
 8005d3c:	075a      	lsls	r2, r3, #29
 8005d3e:	6803      	ldr	r3, [r0, #0]
 8005d40:	08db      	lsrs	r3, r3, #3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8005d48:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8005d4c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005d50:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8005d54:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	43d1      	mvns	r1, r2
 8005d5e:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8005d62:	43db      	mvns	r3, r3
 8005d64:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8005d68:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 8005d74:	4011      	ands	r1, r2
 8005d76:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 8005d7a:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 8005d7e:	400b      	ands	r3, r1
 8005d80:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8005d84:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8005d90:	4051      	eors	r1, r2
 8005d92:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8005d96:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8005d9a:	404b      	eors	r3, r1
 8005d9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005da0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005da4:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8005da8:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8005dac:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	43d1      	mvns	r1, r2
 8005db6:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8005dc0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8005dcc:	4011      	ands	r1, r2
 8005dce:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 8005dd2:	e001      	b.n	8005dd8 <KeccakF1600_StatePermute+0x21b4>
 8005dd4:	0800a990 	.word	0x0800a990
 8005dd8:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8005ddc:	400b      	ands	r3, r1
 8005dde:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8005de2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8005dee:	4051      	eors	r1, r2
 8005df0:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8005df4:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 8005df8:	404b      	eors	r3, r1
 8005dfa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005dfe:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005e02:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8005e06:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8005e0a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	43d1      	mvns	r1, r2
 8005e14:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8005e1e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8005e2a:	4011      	ands	r1, r2
 8005e2c:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8005e30:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8005e34:	400b      	ands	r3, r1
 8005e36:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8005e3a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8005e46:	4051      	eors	r1, r2
 8005e48:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8005e4c:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8005e50:	404b      	eors	r3, r1
 8005e52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005e56:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005e5a:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8005e5e:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8005e62:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	43d1      	mvns	r1, r2
 8005e6c:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8005e70:	43db      	mvns	r3, r3
 8005e72:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8005e76:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8005e82:	4011      	ands	r1, r2
 8005e84:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8005e88:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8005e92:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8005e9e:	4051      	eors	r1, r2
 8005ea0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8005ea4:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8005ea8:	404b      	eors	r3, r1
 8005eaa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005eae:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005eb2:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8005eb6:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8005eba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	43d1      	mvns	r1, r2
 8005ec4:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8005ece:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8005eda:	4011      	ands	r1, r2
 8005edc:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8005ee0:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8005eea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 8005ef6:	4051      	eors	r1, r2
 8005ef8:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8005efc:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 8005f00:	404b      	eors	r3, r1
 8005f02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005f06:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005f0a:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8005f0e:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8005f12:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8005f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f1a:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	ea80 0602 	eor.w	r6, r0, r2
 8005f26:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8005f2a:	404b      	eors	r3, r1
 8005f2c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f30:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005f34:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8005f38:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8005f3c:	f607 2058 	addw	r0, r7, #2648	; 0xa58
 8005f40:	f607 215c 	addw	r1, r7, #2652	; 0xa5c
 8005f44:	6803      	ldr	r3, [r0, #0]
 8005f46:	0fda      	lsrs	r2, r3, #31
 8005f48:	680b      	ldr	r3, [r1, #0]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005f52:	680b      	ldr	r3, [r1, #0]
 8005f54:	0fda      	lsrs	r2, r3, #31
 8005f56:	6803      	ldr	r3, [r0, #0]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005f60:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005f64:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005f68:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8005f6c:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8005f70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f74:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	ea80 0602 	eor.w	r6, r0, r2
 8005f80:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8005f84:	404b      	eors	r3, r1
 8005f86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005f8a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005f8e:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8005f92:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8005f96:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8005f9a:	f607 212c 	addw	r1, r7, #2604	; 0xa2c
 8005f9e:	6803      	ldr	r3, [r0, #0]
 8005fa0:	0e9a      	lsrs	r2, r3, #26
 8005fa2:	680b      	ldr	r3, [r1, #0]
 8005fa4:	019b      	lsls	r3, r3, #6
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005fac:	680b      	ldr	r3, [r1, #0]
 8005fae:	0e9a      	lsrs	r2, r3, #26
 8005fb0:	6803      	ldr	r3, [r0, #0]
 8005fb2:	019b      	lsls	r3, r3, #6
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005fba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8005fbe:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005fc2:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8005fc6:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8005fca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fce:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	ea80 0602 	eor.w	r6, r0, r2
 8005fda:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8005fde:	404b      	eors	r3, r1
 8005fe0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005fe4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005fe8:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8005fec:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8005ff0:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 8005ff4:	f607 11fc 	addw	r1, r7, #2556	; 0x9fc
 8005ff8:	6803      	ldr	r3, [r0, #0]
 8005ffa:	09da      	lsrs	r2, r3, #7
 8005ffc:	680b      	ldr	r3, [r1, #0]
 8005ffe:	065b      	lsls	r3, r3, #25
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006006:	680b      	ldr	r3, [r1, #0]
 8006008:	09da      	lsrs	r2, r3, #7
 800600a:	6803      	ldr	r3, [r0, #0]
 800600c:	065b      	lsls	r3, r3, #25
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006014:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8006018:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800601c:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8006020:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8006024:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006028:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	ea80 0602 	eor.w	r6, r0, r2
 8006034:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8006038:	404b      	eors	r3, r1
 800603a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800603e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8006042:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8006046:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 800604a:	f607 10c8 	addw	r0, r7, #2504	; 0x9c8
 800604e:	f607 11cc 	addw	r1, r7, #2508	; 0x9cc
 8006052:	6803      	ldr	r3, [r0, #0]
 8006054:	0e1a      	lsrs	r2, r3, #24
 8006056:	680b      	ldr	r3, [r1, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006060:	680b      	ldr	r3, [r1, #0]
 8006062:	0e1a      	lsrs	r2, r3, #24
 8006064:	6803      	ldr	r3, [r0, #0]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800606e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8006072:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8006076:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 800607a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800607e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006082:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8006086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608a:	ea80 0602 	eor.w	r6, r0, r2
 800608e:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8006092:	404b      	eors	r3, r1
 8006094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006098:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800609c:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 80060a0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 80060a4:	f507 601c 	add.w	r0, r7, #2496	; 0x9c0
 80060a8:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 80060ac:	6803      	ldr	r3, [r0, #0]
 80060ae:	0b9a      	lsrs	r2, r3, #14
 80060b0:	680b      	ldr	r3, [r1, #0]
 80060b2:	049b      	lsls	r3, r3, #18
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060ba:	680b      	ldr	r3, [r1, #0]
 80060bc:	0b9a      	lsrs	r2, r3, #14
 80060be:	6803      	ldr	r3, [r0, #0]
 80060c0:	049b      	lsls	r3, r3, #18
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060c8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80060cc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80060d0:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 80060d4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	43d1      	mvns	r1, r2
 80060de:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 80060e2:	43db      	mvns	r3, r3
 80060e4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 80060e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 80060f4:	4011      	ands	r1, r2
 80060f6:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 80060fa:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 80060fe:	400b      	ands	r3, r1
 8006100:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8006104:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8006110:	4051      	eors	r1, r2
 8006112:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8006116:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 800611a:	404b      	eors	r3, r1
 800611c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006120:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8006124:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8006128:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 800612c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	43d1      	mvns	r1, r2
 8006136:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 800613a:	43db      	mvns	r3, r3
 800613c:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8006140:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 800614c:	4011      	ands	r1, r2
 800614e:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8006152:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 8006156:	400b      	ands	r3, r1
 8006158:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800615c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8006168:	4051      	eors	r1, r2
 800616a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800616e:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8006172:	404b      	eors	r3, r1
 8006174:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006178:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800617c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8006180:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8006184:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	43d1      	mvns	r1, r2
 800618e:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8006192:	43db      	mvns	r3, r3
 8006194:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8006198:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 80061a4:	4011      	ands	r1, r2
 80061a6:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 80061aa:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 80061ae:	400b      	ands	r3, r1
 80061b0:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 80061b4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 80061c0:	4051      	eors	r1, r2
 80061c2:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80061c6:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 80061ca:	404b      	eors	r3, r1
 80061cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061d0:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80061d4:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 80061d8:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 80061dc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	43d1      	mvns	r1, r2
 80061e6:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 80061ea:	43db      	mvns	r3, r3
 80061ec:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 80061f0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 80061fc:	4011      	ands	r1, r2
 80061fe:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8006202:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8006206:	400b      	ands	r3, r1
 8006208:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800620c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 8006218:	4051      	eors	r1, r2
 800621a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800621e:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 8006222:	404b      	eors	r3, r1
 8006224:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006228:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800622c:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8006230:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8006234:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	43d1      	mvns	r1, r2
 800623e:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8006242:	43db      	mvns	r3, r3
 8006244:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8006248:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8006254:	4011      	ands	r1, r2
 8006256:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 800625a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 800625e:	400b      	ands	r3, r1
 8006260:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8006264:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 8006270:	4051      	eors	r1, r2
 8006272:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006276:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 800627a:	404b      	eors	r3, r1
 800627c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006280:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006284:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8006288:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 800628c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006290:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006294:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	ea80 0602 	eor.w	r6, r0, r2
 80062a0:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 80062a4:	404b      	eors	r3, r1
 80062a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062aa:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80062ae:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 80062b2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 80062b6:	f507 6024 	add.w	r0, r7, #2624	; 0xa40
 80062ba:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 80062be:	6803      	ldr	r3, [r0, #0]
 80062c0:	095a      	lsrs	r2, r3, #5
 80062c2:	680b      	ldr	r3, [r1, #0]
 80062c4:	06db      	lsls	r3, r3, #27
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062cc:	680b      	ldr	r3, [r1, #0]
 80062ce:	095a      	lsrs	r2, r3, #5
 80062d0:	6803      	ldr	r3, [r0, #0]
 80062d2:	06db      	lsls	r3, r3, #27
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062da:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80062de:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80062e2:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 80062e6:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 80062ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062ee:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	ea80 0602 	eor.w	r6, r0, r2
 80062fa:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 80062fe:	404b      	eors	r3, r1
 8006300:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006304:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8006308:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800630c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8006310:	f607 203c 	addw	r0, r7, #2620	; 0xa3c
 8006314:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8006318:	6803      	ldr	r3, [r0, #0]
 800631a:	011a      	lsls	r2, r3, #4
 800631c:	680b      	ldr	r3, [r1, #0]
 800631e:	0f1b      	lsrs	r3, r3, #28
 8006320:	4313      	orrs	r3, r2
 8006322:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006326:	680b      	ldr	r3, [r1, #0]
 8006328:	011a      	lsls	r2, r3, #4
 800632a:	6803      	ldr	r3, [r0, #0]
 800632c:	0f1b      	lsrs	r3, r3, #28
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006334:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8006338:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800633c:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8006340:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8006344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006348:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	ea80 0602 	eor.w	r6, r0, r2
 8006354:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 8006358:	404b      	eors	r3, r1
 800635a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800635e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006362:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8006366:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 800636a:	f607 2008 	addw	r0, r7, #2568	; 0xa08
 800636e:	f607 210c 	addw	r1, r7, #2572	; 0xa0c
 8006372:	6803      	ldr	r3, [r0, #0]
 8006374:	0d9a      	lsrs	r2, r3, #22
 8006376:	680b      	ldr	r3, [r1, #0]
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006380:	680b      	ldr	r3, [r1, #0]
 8006382:	0d9a      	lsrs	r2, r3, #22
 8006384:	6803      	ldr	r3, [r0, #0]
 8006386:	029b      	lsls	r3, r3, #10
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8006392:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8006396:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 800639a:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 800639e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063a2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	ea80 0602 	eor.w	r6, r0, r2
 80063ae:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 80063b2:	404b      	eors	r3, r1
 80063b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063b8:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80063bc:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 80063c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 80063c4:	f607 10d8 	addw	r0, r7, #2520	; 0x9d8
 80063c8:	f607 11dc 	addw	r1, r7, #2524	; 0x9dc
 80063cc:	6803      	ldr	r3, [r0, #0]
 80063ce:	0c5a      	lsrs	r2, r3, #17
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	03db      	lsls	r3, r3, #15
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063da:	680b      	ldr	r3, [r1, #0]
 80063dc:	0c5a      	lsrs	r2, r3, #17
 80063de:	6803      	ldr	r3, [r0, #0]
 80063e0:	03db      	lsls	r3, r3, #15
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063e8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80063ec:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80063f0:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 80063f4:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80063f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063fc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	ea80 0602 	eor.w	r6, r0, r2
 8006408:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 800640c:	404b      	eors	r3, r1
 800640e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006412:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006416:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800641a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 800641e:	f607 10ac 	addw	r0, r7, #2476	; 0x9ac
 8006422:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006426:	6803      	ldr	r3, [r0, #0]
 8006428:	061a      	lsls	r2, r3, #24
 800642a:	680b      	ldr	r3, [r1, #0]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006434:	680b      	ldr	r3, [r1, #0]
 8006436:	061a      	lsls	r2, r3, #24
 8006438:	6803      	ldr	r3, [r0, #0]
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006442:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8006446:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800644a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 800644e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	43d1      	mvns	r1, r2
 8006458:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 800645c:	43db      	mvns	r3, r3
 800645e:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8006462:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 800646e:	4011      	ands	r1, r2
 8006470:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 8006474:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 8006478:	400b      	ands	r3, r1
 800647a:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 800647e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 800648a:	4051      	eors	r1, r2
 800648c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006490:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 8006494:	404b      	eors	r3, r1
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800649a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800649e:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80064a2:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 80064a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	43d1      	mvns	r1, r2
 80064b0:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 80064b4:	43db      	mvns	r3, r3
 80064b6:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80064ba:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 80064c6:	4011      	ands	r1, r2
 80064c8:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 80064cc:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 80064d0:	400b      	ands	r3, r1
 80064d2:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 80064d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 80064e2:	4051      	eors	r1, r2
 80064e4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80064e8:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 80064ec:	404b      	eors	r3, r1
 80064ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064f2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80064f6:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80064fa:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 80064fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	43d1      	mvns	r1, r2
 8006508:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 800650c:	43db      	mvns	r3, r3
 800650e:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8006512:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 800651e:	4011      	ands	r1, r2
 8006520:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 8006524:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 8006528:	400b      	ands	r3, r1
 800652a:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800652e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 800653a:	4051      	eors	r1, r2
 800653c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006540:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 8006544:	404b      	eors	r3, r1
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800654a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800654e:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8006552:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 8006556:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	43d1      	mvns	r1, r2
 8006560:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8006564:	43db      	mvns	r3, r3
 8006566:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 800656a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 8006576:	4011      	ands	r1, r2
 8006578:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 800657c:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 8006580:	400b      	ands	r3, r1
 8006582:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8006586:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 8006592:	4051      	eors	r1, r2
 8006594:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006598:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 800659c:	404b      	eors	r3, r1
 800659e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065a2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80065a6:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80065aa:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 80065ae:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	43d1      	mvns	r1, r2
 80065b8:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 80065bc:	43db      	mvns	r3, r3
 80065be:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 80065c2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80065c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ca:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 80065ce:	4011      	ands	r1, r2
 80065d0:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 80065d4:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 80065d8:	400b      	ands	r3, r1
 80065da:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80065de:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80065e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e6:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 80065ea:	4051      	eors	r1, r2
 80065ec:	67b9      	str	r1, [r7, #120]	; 0x78
 80065ee:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 80065f2:	404b      	eors	r3, r1
 80065f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80065fa:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80065fe:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 8006602:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8006606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800660a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	ea80 0602 	eor.w	r6, r0, r2
 8006616:	673e      	str	r6, [r7, #112]	; 0x70
 8006618:	404b      	eors	r3, r1
 800661a:	677b      	str	r3, [r7, #116]	; 0x74
 800661c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006620:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8006624:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 8006628:	f607 2054 	addw	r0, r7, #2644	; 0xa54
 800662c:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8006630:	6803      	ldr	r3, [r0, #0]
 8006632:	079a      	lsls	r2, r3, #30
 8006634:	680b      	ldr	r3, [r1, #0]
 8006636:	089b      	lsrs	r3, r3, #2
 8006638:	4313      	orrs	r3, r2
 800663a:	66bb      	str	r3, [r7, #104]	; 0x68
 800663c:	680b      	ldr	r3, [r1, #0]
 800663e:	079a      	lsls	r2, r3, #30
 8006640:	6803      	ldr	r3, [r0, #0]
 8006642:	089b      	lsrs	r3, r3, #2
 8006644:	4313      	orrs	r3, r2
 8006646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006648:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800664c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8006650:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 8006654:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8006658:	e9d3 0100 	ldrd	r0, r1, [r3]
 800665c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	ea80 0602 	eor.w	r6, r0, r2
 8006668:	663e      	str	r6, [r7, #96]	; 0x60
 800666a:	404b      	eors	r3, r1
 800666c:	667b      	str	r3, [r7, #100]	; 0x64
 800666e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006672:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8006676:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 800667a:	f607 2024 	addw	r0, r7, #2596	; 0xa24
 800667e:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8006682:	6803      	ldr	r3, [r0, #0]
 8006684:	05da      	lsls	r2, r3, #23
 8006686:	680b      	ldr	r3, [r1, #0]
 8006688:	0a5b      	lsrs	r3, r3, #9
 800668a:	4313      	orrs	r3, r2
 800668c:	65bb      	str	r3, [r7, #88]	; 0x58
 800668e:	680b      	ldr	r3, [r1, #0]
 8006690:	05da      	lsls	r2, r3, #23
 8006692:	6803      	ldr	r3, [r0, #0]
 8006694:	0a5b      	lsrs	r3, r3, #9
 8006696:	4313      	orrs	r3, r2
 8006698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800669e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80066a2:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 80066a6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80066aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ae:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	ea80 0602 	eor.w	r6, r0, r2
 80066ba:	653e      	str	r6, [r7, #80]	; 0x50
 80066bc:	404b      	eors	r3, r1
 80066be:	657b      	str	r3, [r7, #84]	; 0x54
 80066c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066c4:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 80066c8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 80066cc:	f607 10f4 	addw	r0, r7, #2548	; 0x9f4
 80066d0:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 80066d4:	6803      	ldr	r3, [r0, #0]
 80066d6:	01da      	lsls	r2, r3, #7
 80066d8:	680b      	ldr	r3, [r1, #0]
 80066da:	0e5b      	lsrs	r3, r3, #25
 80066dc:	4313      	orrs	r3, r2
 80066de:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e0:	680b      	ldr	r3, [r1, #0]
 80066e2:	01da      	lsls	r2, r3, #7
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	0e5b      	lsrs	r3, r3, #25
 80066e8:	4313      	orrs	r3, r2
 80066ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066f0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80066f4:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80066f8:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80066fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006700:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	ea80 0602 	eor.w	r6, r0, r2
 800670c:	643e      	str	r6, [r7, #64]	; 0x40
 800670e:	404b      	eors	r3, r1
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
 8006712:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006716:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800671a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 800671e:	f607 10ec 	addw	r0, r7, #2540	; 0x9ec
 8006722:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8006726:	6803      	ldr	r3, [r0, #0]
 8006728:	025a      	lsls	r2, r3, #9
 800672a:	680b      	ldr	r3, [r1, #0]
 800672c:	0ddb      	lsrs	r3, r3, #23
 800672e:	4313      	orrs	r3, r2
 8006730:	63bb      	str	r3, [r7, #56]	; 0x38
 8006732:	680b      	ldr	r3, [r1, #0]
 8006734:	025a      	lsls	r2, r3, #9
 8006736:	6803      	ldr	r3, [r0, #0]
 8006738:	0ddb      	lsrs	r3, r3, #23
 800673a:	4313      	orrs	r3, r2
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006742:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8006746:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 800674a:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 800674e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006752:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	ea80 0602 	eor.w	r6, r0, r2
 800675e:	633e      	str	r6, [r7, #48]	; 0x30
 8006760:	404b      	eors	r3, r1
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
 8006764:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006768:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 800676c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8006770:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 8006774:	f607 11bc 	addw	r1, r7, #2492	; 0x9bc
 8006778:	6803      	ldr	r3, [r0, #0]
 800677a:	0f9a      	lsrs	r2, r3, #30
 800677c:	680b      	ldr	r3, [r1, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4313      	orrs	r3, r2
 8006782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006784:	680b      	ldr	r3, [r1, #0]
 8006786:	0f9a      	lsrs	r2, r3, #30
 8006788:	6803      	ldr	r3, [r0, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4313      	orrs	r3, r2
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006794:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8006798:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 800679c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80067a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a4:	43d1      	mvns	r1, r2
 80067a6:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 80067aa:	43db      	mvns	r3, r3
 80067ac:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80067b0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 80067bc:	4011      	ands	r1, r2
 80067be:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 80067c2:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 80067c6:	400b      	ands	r3, r1
 80067c8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80067cc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 80067d8:	4051      	eors	r1, r2
 80067da:	6239      	str	r1, [r7, #32]
 80067dc:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 80067e0:	404b      	eors	r3, r1
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
 80067e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e8:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80067ec:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 80067f0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	43d1      	mvns	r1, r2
 80067fa:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 80067fe:	43db      	mvns	r3, r3
 8006800:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8006804:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8006810:	4011      	ands	r1, r2
 8006812:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 8006816:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 800681a:	400b      	ands	r3, r1
 800681c:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8006820:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 800682c:	4051      	eors	r1, r2
 800682e:	61b9      	str	r1, [r7, #24]
 8006830:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8006834:	404b      	eors	r3, r1
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800683c:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8006840:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8006844:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	43d1      	mvns	r1, r2
 800684e:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8006852:	43db      	mvns	r3, r3
 8006854:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 8006858:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 8006864:	4011      	ands	r1, r2
 8006866:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 800686a:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 800686e:	400b      	ands	r3, r1
 8006870:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 8006874:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 8006880:	4051      	eors	r1, r2
 8006882:	6139      	str	r1, [r7, #16]
 8006884:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8006888:	404b      	eors	r3, r1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006890:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8006894:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8006898:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	43d1      	mvns	r1, r2
 80068a2:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 80068a6:	43db      	mvns	r3, r3
 80068a8:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80068ac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 80068b8:	ea01 0a02 	and.w	sl, r1, r2
 80068bc:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 80068c0:	ea01 0b03 	and.w	fp, r1, r3
 80068c4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	ea82 010a 	eor.w	r1, r2, sl
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	ea83 030b 	eor.w	r3, r3, fp
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068dc:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 80068e0:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 80068e4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	ea6f 0802 	mvn.w	r8, r2
 80068f0:	ea6f 0903 	mvn.w	r9, r3
 80068f4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	ea08 0402 	and.w	r4, r8, r2
 8006900:	ea09 0503 	and.w	r5, r9, r3
 8006904:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	ea82 0104 	eor.w	r1, r2, r4
 8006910:	6039      	str	r1, [r7, #0]
 8006912:	406b      	eors	r3, r5
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800691e:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 8006922:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8006926:	3302      	adds	r3, #2
 8006928:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800692c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8006930:	2b17      	cmp	r3, #23
 8006932:	f77d aa65 	ble.w	8003e00 <KeccakF1600_StatePermute+0x1dc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8006936:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800693a:	6819      	ldr	r1, [r3, #0]
 800693c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8006948:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f103 0108 	add.w	r1, r3, #8
 8006952:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 800695e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f103 0110 	add.w	r1, r3, #16
 8006968:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8006974:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f103 0118 	add.w	r1, r3, #24
 800697e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006986:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 800698a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f103 0120 	add.w	r1, r3, #32
 8006994:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 80069a0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80069aa:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80069ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 80069b6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069c0:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 80069c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 80069cc:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80069d6:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 80069e2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80069ec:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 80069f8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006a02:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8006a0e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006a18:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8006a24:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8006a2e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8006a3a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8006a44:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8006a50:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8006a5a:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8006a66:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8006a70:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8006a7c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006a86:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8006a92:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8006a9c:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8006aa8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8006ab2:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8006abe:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8006ac8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8006ad4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8006ade:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8006aea:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006af4:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8006b00:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8006b0a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8006b16:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8006b20:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8006b2c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8006b36:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8006b42:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8006b4c:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006b58:	bf00      	nop
 8006b5a:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int pos,
                                   unsigned int r)
{
 8006b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(outlen) {
 8006b76:	e03e      	b.n	8006bf6 <keccak_squeeze+0x8e>
    if(pos == r) {
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d104      	bne.n	8006b8a <keccak_squeeze+0x22>
      KeccakF1600_StatePermute(s);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7fd f84f 	bl	8003c24 <KeccakF1600_StatePermute>
      pos = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	603b      	str	r3, [r7, #0]
    }
    for(i=pos;i < r && i < pos+outlen; i++)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	617b      	str	r3, [r7, #20]
 8006b8e:	e020      	b.n	8006bd2 <keccak_squeeze+0x6a>
      *out++ = s[i/8] >> 8*(i%8);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	6979      	ldr	r1, [r7, #20]
 8006ba0:	f001 0107 	and.w	r1, r1, #7
 8006ba4:	00c9      	lsls	r1, r1, #3
 8006ba6:	f1c1 0620 	rsb	r6, r1, #32
 8006baa:	f1a1 0020 	sub.w	r0, r1, #32
 8006bae:	fa22 f401 	lsr.w	r4, r2, r1
 8006bb2:	fa03 f606 	lsl.w	r6, r3, r6
 8006bb6:	4334      	orrs	r4, r6
 8006bb8:	fa23 f000 	lsr.w	r0, r3, r0
 8006bbc:	4304      	orrs	r4, r0
 8006bbe:	fa23 f501 	lsr.w	r5, r3, r1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	60fa      	str	r2, [r7, #12]
 8006bc8:	b2e2      	uxtb	r2, r4
 8006bca:	701a      	strb	r2, [r3, #0]
    for(i=pos;i < r && i < pos+outlen; i++)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d205      	bcs.n	8006be6 <keccak_squeeze+0x7e>
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4413      	add	r3, r2
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3d4      	bcc.n	8006b90 <keccak_squeeze+0x28>
    outlen -= i-pos;
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]
    pos = i;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	603b      	str	r3, [r7, #0]
  while(outlen) {
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1bd      	bne.n	8006b78 <keccak_squeeze+0x10>
  }

  return pos;
 8006bfc:	683b      	ldr	r3, [r7, #0]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c06 <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 8006c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	b08f      	sub	sp, #60	; 0x3c
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c10:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c12:	627a      	str	r2, [r7, #36]	; 0x24
 8006c14:	623b      	str	r3, [r7, #32]
  unsigned int i;

  for(i=0;i<25;i++)
 8006c16:	2300      	movs	r3, #0
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	e00c      	b.n	8006c36 <keccak_absorb_once+0x30>
    s[i] = 0;
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c22:	18d1      	adds	r1, r2, r3
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	3301      	adds	r3, #1
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	2b18      	cmp	r3, #24
 8006c3a:	d9ef      	bls.n	8006c1c <keccak_absorb_once+0x16>

  while(inlen >= r) {
 8006c3c:	e032      	b.n	8006ca4 <keccak_absorb_once+0x9e>
    for(i=0;i<r/8;i++)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
 8006c42:	e01f      	b.n	8006c84 <keccak_absorb_once+0x7e>
      s[i] ^= load64(in+8*i);
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c4a:	4413      	add	r3, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fc ff81 	bl	8003b54 <load64>
 8006c52:	4604      	mov	r4, r0
 8006c54:	460d      	mov	r5, r1
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	00da      	lsls	r2, r3, #3
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	4413      	add	r3, r2
 8006c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	00da      	lsls	r2, r3, #3
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	4413      	add	r3, r2
 8006c6a:	ea84 0200 	eor.w	r2, r4, r0
 8006c6e:	61ba      	str	r2, [r7, #24]
 8006c70:	ea85 0201 	eor.w	r2, r5, r1
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c7a:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	3301      	adds	r3, #1
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	08db      	lsrs	r3, r3, #3
 8006c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3da      	bcc.n	8006c44 <keccak_absorb_once+0x3e>
    in += r;
 8006c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	4413      	add	r3, r2
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
    inlen -= r;
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	623b      	str	r3, [r7, #32]
    KeccakF1600_StatePermute(s);
 8006c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ca0:	f7fc ffc0 	bl	8003c24 <KeccakF1600_StatePermute>
  while(inlen >= r) {
 8006ca4:	6a3a      	ldr	r2, [r7, #32]
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d2c8      	bcs.n	8006c3e <keccak_absorb_once+0x38>
  }

  for(i=0;i<inlen;i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb0:	e033      	b.n	8006d1a <keccak_absorb_once+0x114>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8006cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb4:	f023 0307 	bic.w	r3, r3, #7
 8006cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cba:	4413      	add	r3, r2
 8006cbc:	e9d3 5600 	ldrd	r5, r6, [r3]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b2d8      	uxtb	r0, r3
 8006cca:	f04f 0100 	mov.w	r1, #0
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	00dc      	lsls	r4, r3, #3
 8006cd6:	f1a4 0320 	sub.w	r3, r4, #32
 8006cda:	f1c4 0220 	rsb	r2, r4, #32
 8006cde:	fa01 fb04 	lsl.w	fp, r1, r4
 8006ce2:	fa00 f303 	lsl.w	r3, r0, r3
 8006ce6:	ea4b 0b03 	orr.w	fp, fp, r3
 8006cea:	fa20 f202 	lsr.w	r2, r0, r2
 8006cee:	ea4b 0b02 	orr.w	fp, fp, r2
 8006cf2:	fa00 fa04 	lsl.w	sl, r0, r4
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	f023 0307 	bic.w	r3, r3, #7
 8006cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cfe:	4413      	add	r3, r2
 8006d00:	ea85 020a 	eor.w	r2, r5, sl
 8006d04:	613a      	str	r2, [r7, #16]
 8006d06:	ea86 020b 	eor.w	r2, r6, fp
 8006d0a:	617a      	str	r2, [r7, #20]
 8006d0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d10:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	3301      	adds	r3, #1
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d3c7      	bcc.n	8006cb2 <keccak_absorb_once+0xac>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	f023 0307 	bic.w	r3, r3, #7
 8006d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2a:	4413      	add	r3, r2
 8006d2c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006d30:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d3a:	f001 0107 	and.w	r1, r1, #7
 8006d3e:	00c9      	lsls	r1, r1, #3
 8006d40:	f1a1 0620 	sub.w	r6, r1, #32
 8006d44:	f1c1 0020 	rsb	r0, r1, #32
 8006d48:	fa03 f901 	lsl.w	r9, r3, r1
 8006d4c:	fa02 f606 	lsl.w	r6, r2, r6
 8006d50:	ea49 0906 	orr.w	r9, r9, r6
 8006d54:	fa22 f000 	lsr.w	r0, r2, r0
 8006d58:	ea49 0900 	orr.w	r9, r9, r0
 8006d5c:	fa02 f801 	lsl.w	r8, r2, r1
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	f023 0307 	bic.w	r3, r3, #7
 8006d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d68:	4413      	add	r3, r2
 8006d6a:	ea84 0208 	eor.w	r2, r4, r8
 8006d6e:	60ba      	str	r2, [r7, #8]
 8006d70:	ea85 0209 	eor.w	r2, r5, r9
 8006d74:	60fa      	str	r2, [r7, #12]
 8006d76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d7a:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f023 0307 	bic.w	r3, r3, #7
 8006d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d88:	4413      	add	r3, r2
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d90:	3901      	subs	r1, #1
 8006d92:	f021 0107 	bic.w	r1, r1, #7
 8006d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d98:	4401      	add	r1, r0
 8006d9a:	603a      	str	r2, [r7, #0]
 8006d9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006da6:	e9c1 3400 	strd	r3, r4, [r1]
}
 8006daa:	bf00      	nop
 8006dac:	373c      	adds	r7, #60	; 0x3c
 8006dae:	46bd      	mov	sp, r7
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006db4 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks) {
 8006dc2:	e021      	b.n	8006e08 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fc ff2d 	bl	8003c24 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e00f      	b.n	8006df0 <keccak_squeezeblocks+0x3c>
      store64(out+8*i, s[i]);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	18d1      	adds	r1, r2, r3
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	4608      	mov	r0, r1
 8006de6:	f7fc fef1 	bl	8003bcc <store64>
    for(i=0;i<r/8;i++)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	3301      	adds	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	08db      	lsrs	r3, r3, #3
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3ea      	bcc.n	8006dd0 <keccak_squeezeblocks+0x1c>
    out += r;
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4413      	add	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    nblocks -= 1;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60bb      	str	r3, [r7, #8]
  while(nblocks) {
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1da      	bne.n	8006dc4 <keccak_squeezeblocks+0x10>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	231f      	movs	r3, #31
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	21a8      	movs	r1, #168	; 0xa8
 8006e30:	f7ff fee9 	bl	8006c06 <keccak_absorb_once>
  state->pos = SHAKE128_RATE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	22a8      	movs	r2, #168	; 0xa8
 8006e38:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	23a8      	movs	r3, #168	; 0xa8
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff ffac 	bl	8006db4 <keccak_squeezeblocks>
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <pqcrystals_kyber_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006e78:	2188      	movs	r1, #136	; 0x88
 8006e7a:	9100      	str	r1, [sp, #0]
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7ff fe72 	bl	8006b68 <keccak_squeeze>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <pqcrystals_kyber_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	231f      	movs	r3, #31
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	2188      	movs	r1, #136	; 0x88
 8006eac:	f7ff feab 	bl	8006c06 <keccak_absorb_once>
  state->pos = SHAKE256_RATE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2288      	movs	r2, #136	; 0x88
 8006eb4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	2388      	movs	r3, #136	; 0x88
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff ff6e 	bl	8006db4 <keccak_squeezeblocks>
}
 8006ed8:	bf00      	nop
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <pqcrystals_kyber_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b0ba      	sub	sp, #232	; 0xe8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
 8006eee:	f107 0310 	add.w	r3, r7, #16
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff ffcc 	bl	8006e94 <pqcrystals_kyber_fips202_ref_shake256_absorb_once>
  nblocks = outlen/SHAKE256_RATE;
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <pqcrystals_kyber_fips202_ref_shake256+0x78>)
 8006f00:	fba2 2303 	umull	r2, r3, r2, r3
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  shake256_squeezeblocks(out, nblocks, &state);
 8006f0a:	f107 0310 	add.w	r3, r7, #16
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7ff ffd3 	bl	8006ec0 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>
  outlen -= nblocks*SHAKE256_RATE;
 8006f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f1e:	4613      	mov	r3, r2
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	4413      	add	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	461a      	mov	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]
  out += nblocks*SHAKE256_RATE;
 8006f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006f32:	4613      	mov	r3, r2
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	4413      	add	r3, r2
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
  shake256_squeeze(out, outlen, &state);
 8006f42:	f107 0310 	add.w	r3, r7, #16
 8006f46:	461a      	mov	r2, r3
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f7ff ff8a 	bl	8006e64 <pqcrystals_kyber_fips202_ref_shake256_squeeze>
}
 8006f50:	bf00      	nop
 8006f52:	37e8      	adds	r7, #232	; 0xe8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	f0f0f0f1 	.word	0xf0f0f0f1

08006f5c <pqcrystals_kyber_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b0ba      	sub	sp, #232	; 0xe8
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
 8006f68:	f107 0010 	add.w	r0, r7, #16
 8006f6c:	2306      	movs	r3, #6
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	2188      	movs	r1, #136	; 0x88
 8006f76:	f7ff fe46 	bl	8006c06 <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8006f7a:	f107 0310 	add.w	r3, r7, #16
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc fe50 	bl	8003c24 <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f8a:	e015      	b.n	8006fb8 <pqcrystals_kyber_fips202_ref_sha3_256+0x5c>
    store64(h+8*i,s[i]);
 8006f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	18d1      	adds	r1, r2, r3
 8006f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3bd0      	subs	r3, #208	; 0xd0
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	4608      	mov	r0, r1
 8006faa:	f7fc fe0f 	bl	8003bcc <store64>
  for(i=0;i<4;i++)
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d9e5      	bls.n	8006f8c <pqcrystals_kyber_fips202_ref_sha3_256+0x30>
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	37e0      	adds	r7, #224	; 0xe0
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <pqcrystals_kyber_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b0ba      	sub	sp, #232	; 0xe8
 8006fce:	af02      	add	r7, sp, #8
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 8006fd6:	f107 0010 	add.w	r0, r7, #16
 8006fda:	2306      	movs	r3, #6
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	2148      	movs	r1, #72	; 0x48
 8006fe4:	f7ff fe0f 	bl	8006c06 <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fc fe19 	bl	8003c24 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ff8:	e015      	b.n	8007026 <pqcrystals_kyber_fips202_ref_sha3_512+0x5c>
    store64(h+8*i,s[i]);
 8006ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	18d1      	adds	r1, r2, r3
 8007004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800700e:	4413      	add	r3, r2
 8007010:	3bd0      	subs	r3, #208	; 0xd0
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	4608      	mov	r0, r1
 8007018:	f7fc fdd8 	bl	8003bcc <store64>
  for(i=0;i<8;i++)
 800701c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007020:	3301      	adds	r3, #1
 8007022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800702a:	2b07      	cmp	r3, #7
 800702c:	d9e5      	bls.n	8006ffa <pqcrystals_kyber_fips202_ref_sha3_512+0x30>
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	37e0      	adds	r7, #224	; 0xe0
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <pack_pk>:
*              const uint8_t *seed: pointer to the input public seed
**************************************************/
static void pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES],
                    polyvec *pk,
                    const uint8_t seed[KYBER_SYMBYTES])
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  size_t i;
  polyvec_tobytes(r, pk);
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f001 fd2d 	bl	8008aa6 <pqcrystals_kyber1024_ref_polyvec_tobytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e00c      	b.n	800706c <pack_pk+0x34>
    r[i+KYBER_POLYVECBYTES] = seed[i];
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	441a      	add	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	440b      	add	r3, r1
 8007062:	7812      	ldrb	r2, [r2, #0]
 8007064:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	3301      	adds	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b1f      	cmp	r3, #31
 8007070:	d9ef      	bls.n	8007052 <pack_pk+0x1a>
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <unpack_pk>:
*              - const uint8_t *packedpk: pointer to input serialized public key
**************************************************/
static void unpack_pk(polyvec *pk,
                      uint8_t seed[KYBER_SYMBYTES],
                      const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES])
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  size_t i;
  polyvec_frombytes(pk, packedpk);
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 fd2d 	bl	8008aea <pqcrystals_kyber1024_ref_polyvec_frombytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e00c      	b.n	80070b0 <unpack_pk+0x34>
    seed[i] = packedpk[i+KYBER_POLYVECBYTES];
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	441a      	add	r2, r3
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	440b      	add	r3, r1
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	3301      	adds	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b1f      	cmp	r3, #31
 80070b4:	d9ef      	bls.n	8007096 <unpack_pk+0x1a>
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <pack_sk>:
*
* Arguments:   - uint8_t *r: pointer to output serialized secret key
*              - polyvec *sk: pointer to input vector of polynomials (secret key)
**************************************************/
static void pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  polyvec_tobytes(r, sk);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 fcea 	bl	8008aa6 <pqcrystals_kyber1024_ref_polyvec_tobytes>
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <unpack_sk>:
*
* Arguments:   - polyvec *sk: pointer to output vector of polynomials (secret key)
*              - const uint8_t *packedsk: pointer to input serialized secret key
**************************************************/
static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES])
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  polyvec_frombytes(sk, packedsk);
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f001 fcff 	bl	8008aea <pqcrystals_kyber1024_ref_polyvec_frombytes>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <pack_ciphertext>:
* Arguments:   uint8_t *r: pointer to the output serialized ciphertext
*              poly *pk: pointer to the input vector of polynomials b
*              poly *v: pointer to the input polynomial v
**************************************************/
static void pack_ciphertext(uint8_t r[KYBER_INDCPA_BYTES], polyvec *b, poly *v)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  polyvec_compress(r, b);
 8007100:	68b9      	ldr	r1, [r7, #8]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f001 fb14 	bl	8008730 <pqcrystals_kyber1024_ref_polyvec_compress>
  poly_compress(r+KYBER_POLYVECCOMPRESSEDBYTES, v);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 ff7f 	bl	8008014 <pqcrystals_kyber1024_ref_poly_compress>
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <unpack_ciphertext>:
* Arguments:   - polyvec *b: pointer to the output vector of polynomials b
*              - poly *v: pointer to the output polynomial v
*              - const uint8_t *c: pointer to the input serialized ciphertext
**************************************************/
static void unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES])
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  polyvec_decompress(b, c);
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f001 fbef 	bl	8008910 <pqcrystals_kyber1024_ref_polyvec_decompress>
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8007138:	4619      	mov	r1, r3
 800713a:	68b8      	ldr	r0, [r7, #8]
 800713c:	f001 f802 	bl	8008144 <pqcrystals_kyber1024_ref_poly_decompress>
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int16_t *r,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8007148:	b480      	push	{r7}
 800714a:	b089      	sub	sp, #36	; 0x24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint16_t val0, val1;

  ctr = pos = 0;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 800715e:	e047      	b.n	80071f0 <rej_uniform+0xa8>
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	4413      	add	r3, r2
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b21a      	sxth	r2, r3
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	3301      	adds	r3, #1
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	440b      	add	r3, r1
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	b21b      	sxth	r3, r3
 8007178:	4313      	orrs	r3, r2
 800717a:	b21b      	sxth	r3, r3
 800717c:	b29b      	uxth	r3, r3
 800717e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007182:	82fb      	strh	r3, [r7, #22]
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	3301      	adds	r3, #1
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	4413      	add	r3, r2
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	091b      	lsrs	r3, r3, #4
 8007190:	b2db      	uxtb	r3, r3
 8007192:	b21a      	sxth	r2, r3
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3302      	adds	r3, #2
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	440b      	add	r3, r1
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	b21b      	sxth	r3, r3
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ac:	82bb      	strh	r3, [r7, #20]
    pos += 3;
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	3303      	adds	r3, #3
 80071b2:	61bb      	str	r3, [r7, #24]

    if(val0 < KYBER_Q)
 80071b4:	8afb      	ldrh	r3, [r7, #22]
 80071b6:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80071ba:	d808      	bhi.n	80071ce <rej_uniform+0x86>
      r[ctr++] = val0;
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	61fa      	str	r2, [r7, #28]
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80071cc:	801a      	strh	r2, [r3, #0]
    if(ctr < len && val1 < KYBER_Q)
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d20c      	bcs.n	80071f0 <rej_uniform+0xa8>
 80071d6:	8abb      	ldrh	r3, [r7, #20]
 80071d8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80071dc:	d808      	bhi.n	80071f0 <rej_uniform+0xa8>
      r[ctr++] = val1;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	61fa      	str	r2, [r7, #28]
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	4413      	add	r3, r2
 80071ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80071ee:	801a      	strh	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d204      	bcs.n	8007202 <rej_uniform+0xba>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3303      	adds	r3, #3
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d2ae      	bcs.n	8007160 <rej_uniform+0x18>
  }

  return ctr;
 8007202:	69fb      	ldr	r3, [r7, #28]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3724      	adds	r7, #36	; 0x24
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <pqcrystals_kyber1024_ref_gen_matrix>:
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8007216:	af00      	add	r7, sp, #0
 8007218:	f107 030c 	add.w	r3, r7, #12
 800721c:	6018      	str	r0, [r3, #0]
 800721e:	f107 0308 	add.w	r3, r7, #8
 8007222:	6019      	str	r1, [r3, #0]
 8007224:	1d3b      	adds	r3, r7, #4
 8007226:	601a      	str	r2, [r3, #0]
  unsigned int ctr, i, j, k;
  unsigned int buflen, off;
  uint8_t buf[GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES+2];
  xof_state state;

  for(i=0;i<KYBER_K;i++) {
 8007228:	2300      	movs	r3, #0
 800722a:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800722e:	e0b3      	b.n	8007398 <pqcrystals_kyber1024_ref_gen_matrix+0x188>
    for(j=0;j<KYBER_K;j++) {
 8007230:	2300      	movs	r3, #0
 8007232:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8007236:	e0a5      	b.n	8007384 <pqcrystals_kyber1024_ref_gen_matrix+0x174>
      if(transposed)
 8007238:	1d3b      	adds	r3, r7, #4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00d      	beq.n	800725c <pqcrystals_kyber1024_ref_gen_matrix+0x4c>
        xof_absorb(&state, seed, i, j);
 8007240:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007244:	b2da      	uxtb	r2, r3
 8007246:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800724a:	b2db      	uxtb	r3, r3
 800724c:	f107 0108 	add.w	r1, r7, #8
 8007250:	f107 0010 	add.w	r0, r7, #16
 8007254:	6809      	ldr	r1, [r1, #0]
 8007256:	f001 fe97 	bl	8008f88 <pqcrystals_kyber1024_ref_kyber_shake128_absorb>
 800725a:	e00c      	b.n	8007276 <pqcrystals_kyber1024_ref_gen_matrix+0x66>
      else
        xof_absorb(&state, seed, j, i);
 800725c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8007260:	b2da      	uxtb	r2, r3
 8007262:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007266:	b2db      	uxtb	r3, r3
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	f107 0010 	add.w	r0, r7, #16
 8007270:	6809      	ldr	r1, [r1, #0]
 8007272:	f001 fe89 	bl	8008f88 <pqcrystals_kyber1024_ref_kyber_shake128_absorb>

      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 8007276:	f107 0210 	add.w	r2, r7, #16
 800727a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800727e:	2103      	movs	r1, #3
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff fddf 	bl	8006e44 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
      buflen = GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES;
 8007286:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800728a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 800728e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007292:	02db      	lsls	r3, r3, #11
 8007294:	f107 020c 	add.w	r2, r7, #12
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	441a      	add	r2, r3
 800729c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80072a0:	025b      	lsls	r3, r3, #9
 80072a2:	18d0      	adds	r0, r2, r3
 80072a4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80072a8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80072ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072b0:	f7ff ff4a 	bl	8007148 <rej_uniform>
 80072b4:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4

      while(ctr < KYBER_N) {
 80072b8:	e05b      	b.n	8007372 <pqcrystals_kyber1024_ref_gen_matrix+0x162>
        off = buflen % 3;
 80072ba:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80072be:	4b3c      	ldr	r3, [pc, #240]	; (80073b0 <pqcrystals_kyber1024_ref_gen_matrix+0x1a0>)
 80072c0:	fba3 1302 	umull	r1, r3, r3, r2
 80072c4:	0859      	lsrs	r1, r3, #1
 80072c6:	460b      	mov	r3, r1
 80072c8:	005b      	lsls	r3, r3, #1
 80072ca:	440b      	add	r3, r1
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        for(k = 0; k < off; k++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80072d8:	e016      	b.n	8007308 <pqcrystals_kyber1024_ref_gen_matrix+0xf8>
          buf[k] = buf[buflen - off + k];
 80072da:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80072de:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80072e2:	1ad2      	subs	r2, r2, r3
 80072e4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80072e8:	4413      	add	r3, r2
 80072ea:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80072ee:	5cd1      	ldrb	r1, [r2, r3]
 80072f0:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80072f4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80072f8:	4413      	add	r3, r2
 80072fa:	460a      	mov	r2, r1
 80072fc:	701a      	strb	r2, [r3, #0]
        for(k = 0; k < off; k++)
 80072fe:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8007302:	3301      	adds	r3, #1
 8007304:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8007308:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800730c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8007310:	429a      	cmp	r2, r3
 8007312:	d3e2      	bcc.n	80072da <pqcrystals_kyber1024_ref_gen_matrix+0xca>
        xof_squeezeblocks(buf + off, 1, &state);
 8007314:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8007318:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800731c:	4413      	add	r3, r2
 800731e:	f107 0210 	add.w	r2, r7, #16
 8007322:	2101      	movs	r1, #1
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fd8d 	bl	8006e44 <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
        buflen = off + XOF_BLOCKBYTES;
 800732a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800732e:	33a8      	adds	r3, #168	; 0xa8
 8007330:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 8007334:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007338:	02db      	lsls	r3, r3, #11
 800733a:	f107 020c 	add.w	r2, r7, #12
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	441a      	add	r2, r3
 8007342:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8007346:	025b      	lsls	r3, r3, #9
 8007348:	441a      	add	r2, r3
 800734a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	18d0      	adds	r0, r2, r3
 8007352:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8007356:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 800735a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800735e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8007362:	f7ff fef1 	bl	8007148 <rej_uniform>
 8007366:	4602      	mov	r2, r0
 8007368:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800736c:	4413      	add	r3, r2
 800736e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
      while(ctr < KYBER_N) {
 8007372:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d99f      	bls.n	80072ba <pqcrystals_kyber1024_ref_gen_matrix+0xaa>
    for(j=0;j<KYBER_K;j++) {
 800737a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800737e:	3301      	adds	r3, #1
 8007380:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8007384:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8007388:	2b03      	cmp	r3, #3
 800738a:	f67f af55 	bls.w	8007238 <pqcrystals_kyber1024_ref_gen_matrix+0x28>
  for(i=0;i<KYBER_K;i++) {
 800738e:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007392:	3301      	adds	r3, #1
 8007394:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8007398:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800739c:	2b03      	cmp	r3, #3
 800739e:	f67f af47 	bls.w	8007230 <pqcrystals_kyber1024_ref_gen_matrix+0x20>
      }
    }
  }
}
 80073a2:	bf00      	nop
 80073a4:	bf00      	nop
 80073a6:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	aaaaaaab 	.word	0xaaaaaaab

080073b4 <pqcrystals_kyber1024_ref_indcpa_keypair>:
*              - uint8_t *sk: pointer to output private key
                              (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
**************************************************/
void indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                    uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	f5ad 5d61 	sub.w	sp, sp, #14400	; 0x3840
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	f107 0318 	add.w	r3, r7, #24
 80073c2:	3b14      	subs	r3, #20
 80073c4:	6018      	str	r0, [r3, #0]
 80073c6:	f107 0318 	add.w	r3, r7, #24
 80073ca:	3b18      	subs	r3, #24
 80073cc:	6019      	str	r1, [r3, #0]
  unsigned int i;
  uint8_t buf[2*KYBER_SYMBYTES];
  const uint8_t *publicseed = buf;
 80073ce:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 80073d2:	f103 0308 	add.w	r3, r3, #8
 80073d6:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80073da:	f102 020c 	add.w	r2, r2, #12
 80073de:	6013      	str	r3, [r2, #0]
  const uint8_t *noiseseed = buf+KYBER_SYMBYTES;
 80073e0:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 80073e4:	f103 0308 	add.w	r3, r3, #8
 80073e8:	3320      	adds	r3, #32
 80073ea:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80073ee:	f102 0208 	add.w	r2, r2, #8
 80073f2:	6013      	str	r3, [r2, #0]
  uint8_t nonce = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80073fa:	f102 0213 	add.w	r2, r2, #19
 80073fe:	7013      	strb	r3, [r2, #0]
  polyvec a[KYBER_K], e, pkpv, skpv;

  randombytes(buf, KYBER_SYMBYTES);
 8007400:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 8007404:	f103 0308 	add.w	r3, r3, #8
 8007408:	2120      	movs	r1, #32
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fc46 	bl	8008c9c <randombytes>
  hash_g(buf, buf, KYBER_SYMBYTES);
 8007410:	f507 5160 	add.w	r1, r7, #14336	; 0x3800
 8007414:	f101 0108 	add.w	r1, r1, #8
 8007418:	f507 5360 	add.w	r3, r7, #14336	; 0x3800
 800741c:	f103 0308 	add.w	r3, r3, #8
 8007420:	2220      	movs	r2, #32
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fdd1 	bl	8006fca <pqcrystals_kyber_fips202_ref_sha3_512>

  gen_a(a, publicseed);
 8007428:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800742c:	f103 0318 	add.w	r3, r3, #24
 8007430:	3b10      	subs	r3, #16
 8007432:	2200      	movs	r2, #0
 8007434:	f507 5161 	add.w	r1, r7, #14400	; 0x3840
 8007438:	f101 010c 	add.w	r1, r1, #12
 800743c:	6809      	ldr	r1, [r1, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fee6 	bl	8007210 <pqcrystals_kyber1024_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
 8007444:	2300      	movs	r3, #0
 8007446:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800744a:	f102 0214 	add.w	r2, r2, #20
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	e027      	b.n	80074a2 <pqcrystals_kyber1024_ref_indcpa_keypair+0xee>
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 8007452:	f107 0318 	add.w	r3, r7, #24
 8007456:	3b10      	subs	r3, #16
 8007458:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800745c:	f102 0214 	add.w	r2, r2, #20
 8007460:	6812      	ldr	r2, [r2, #0]
 8007462:	0252      	lsls	r2, r2, #9
 8007464:	1898      	adds	r0, r3, r2
 8007466:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 800746a:	f103 0313 	add.w	r3, r3, #19
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	f507 5161 	add.w	r1, r7, #14400	; 0x3840
 8007476:	f101 0113 	add.w	r1, r1, #19
 800747a:	700a      	strb	r2, [r1, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 8007482:	f103 0308 	add.w	r3, r3, #8
 8007486:	6819      	ldr	r1, [r3, #0]
 8007488:	f001 f828 	bl	80084dc <pqcrystals_kyber1024_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 800748c:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 8007490:	f103 0314 	add.w	r3, r3, #20
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3301      	adds	r3, #1
 8007498:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800749c:	f102 0214 	add.w	r2, r2, #20
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80074a6:	f103 0314 	add.w	r3, r3, #20
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d9d0      	bls.n	8007452 <pqcrystals_kyber1024_ref_indcpa_keypair+0x9e>
  for(i=0;i<KYBER_K;i++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80074b6:	f102 0214 	add.w	r2, r2, #20
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e029      	b.n	8007512 <pqcrystals_kyber1024_ref_indcpa_keypair+0x15e>
    poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
 80074be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80074c2:	f103 0318 	add.w	r3, r3, #24
 80074c6:	3b10      	subs	r3, #16
 80074c8:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80074cc:	f102 0214 	add.w	r2, r2, #20
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	0252      	lsls	r2, r2, #9
 80074d4:	1898      	adds	r0, r3, r2
 80074d6:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80074da:	f103 0313 	add.w	r3, r3, #19
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	f507 5161 	add.w	r1, r7, #14400	; 0x3840
 80074e6:	f101 0113 	add.w	r1, r1, #19
 80074ea:	700a      	strb	r2, [r1, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80074f2:	f103 0308 	add.w	r3, r3, #8
 80074f6:	6819      	ldr	r1, [r3, #0]
 80074f8:	f000 fff0 	bl	80084dc <pqcrystals_kyber1024_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 80074fc:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 8007500:	f103 0314 	add.w	r3, r3, #20
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800750c:	f102 0214 	add.w	r2, r2, #20
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 8007516:	f103 0314 	add.w	r3, r3, #20
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d9ce      	bls.n	80074be <pqcrystals_kyber1024_ref_indcpa_keypair+0x10a>

  polyvec_ntt(&skpv);
 8007520:	f107 0318 	add.w	r3, r7, #24
 8007524:	3b10      	subs	r3, #16
 8007526:	4618      	mov	r0, r3
 8007528:	f001 fb01 	bl	8008b2e <pqcrystals_kyber1024_ref_polyvec_ntt>
  polyvec_ntt(&e);
 800752c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8007530:	f103 0318 	add.w	r3, r3, #24
 8007534:	3b10      	subs	r3, #16
 8007536:	4618      	mov	r0, r3
 8007538:	f001 faf9 	bl	8008b2e <pqcrystals_kyber1024_ref_polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++) {
 800753c:	2300      	movs	r3, #0
 800753e:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 8007542:	f102 0214 	add.w	r2, r2, #20
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e033      	b.n	80075b2 <pqcrystals_kyber1024_ref_indcpa_keypair+0x1fe>
    polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
 800754a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800754e:	3b10      	subs	r3, #16
 8007550:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 8007554:	f102 0214 	add.w	r2, r2, #20
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	0252      	lsls	r2, r2, #9
 800755c:	1898      	adds	r0, r3, r2
 800755e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8007562:	f103 0318 	add.w	r3, r3, #24
 8007566:	3b10      	subs	r3, #16
 8007568:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800756c:	f102 0214 	add.w	r2, r2, #20
 8007570:	6812      	ldr	r2, [r2, #0]
 8007572:	02d2      	lsls	r2, r2, #11
 8007574:	1899      	adds	r1, r3, r2
 8007576:	f107 0318 	add.w	r3, r7, #24
 800757a:	3b10      	subs	r3, #16
 800757c:	461a      	mov	r2, r3
 800757e:	f001 fb08 	bl	8008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>
    poly_tomont(&pkpv.vec[i]);
 8007582:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8007586:	3b10      	subs	r3, #16
 8007588:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800758c:	f102 0214 	add.w	r2, r2, #20
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	0252      	lsls	r2, r2, #9
 8007594:	4413      	add	r3, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 f836 	bl	8008608 <pqcrystals_kyber1024_ref_poly_tomont>
  for(i=0;i<KYBER_K;i++) {
 800759c:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80075a0:	f103 0314 	add.w	r3, r3, #20
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 80075ac:	f102 0214 	add.w	r2, r2, #20
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	f507 5361 	add.w	r3, r7, #14400	; 0x3840
 80075b6:	f103 0314 	add.w	r3, r3, #20
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d9c4      	bls.n	800754a <pqcrystals_kyber1024_ref_indcpa_keypair+0x196>
  }

  polyvec_add(&pkpv, &pkpv, &e);
 80075c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80075c4:	f102 0218 	add.w	r2, r2, #24
 80075c8:	3a10      	subs	r2, #16
 80075ca:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80075ce:	3910      	subs	r1, #16
 80075d0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80075d4:	3b10      	subs	r3, #16
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fb3d 	bl	8008c56 <pqcrystals_kyber1024_ref_polyvec_add>
  polyvec_reduce(&pkpv);
 80075dc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80075e0:	3b10      	subs	r3, #16
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fb1e 	bl	8008c24 <pqcrystals_kyber1024_ref_polyvec_reduce>

  pack_sk(sk, &skpv);
 80075e8:	f107 0218 	add.w	r2, r7, #24
 80075ec:	3a10      	subs	r2, #16
 80075ee:	f107 0318 	add.w	r3, r7, #24
 80075f2:	3b18      	subs	r3, #24
 80075f4:	4611      	mov	r1, r2
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	f7ff fd62 	bl	80070c0 <pack_sk>
  pack_pk(pk, &pkpv, publicseed);
 80075fc:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8007600:	3910      	subs	r1, #16
 8007602:	f107 0318 	add.w	r3, r7, #24
 8007606:	3b14      	subs	r3, #20
 8007608:	f507 5261 	add.w	r2, r7, #14400	; 0x3840
 800760c:	f102 020c 	add.w	r2, r2, #12
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	f7ff fd10 	bl	8007038 <pack_pk>
}
 8007618:	bf00      	nop
 800761a:	f507 5761 	add.w	r7, r7, #14400	; 0x3840
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <pqcrystals_kyber1024_ref_indcpa_enc>:
**************************************************/
void indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                const uint8_t coins[KYBER_SYMBYTES])
{
 8007624:	b590      	push	{r4, r7, lr}
 8007626:	f5ad 4d8c 	sub.w	sp, sp, #17920	; 0x4600
 800762a:	b08f      	sub	sp, #60	; 0x3c
 800762c:	af00      	add	r7, sp, #0
 800762e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8007632:	3c2c      	subs	r4, #44	; 0x2c
 8007634:	6020      	str	r0, [r4, #0]
 8007636:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800763a:	3830      	subs	r0, #48	; 0x30
 800763c:	6001      	str	r1, [r0, #0]
 800763e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8007642:	3934      	subs	r1, #52	; 0x34
 8007644:	600a      	str	r2, [r1, #0]
 8007646:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800764a:	3a38      	subs	r2, #56	; 0x38
 800764c:	6013      	str	r3, [r2, #0]
  unsigned int i;
  uint8_t seed[KYBER_SYMBYTES];
  uint8_t nonce = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 8007654:	f102 0233 	add.w	r2, r2, #51	; 0x33
 8007658:	7013      	strb	r3, [r2, #0]
  polyvec sp, pkpv, ep, at[KYBER_K], b;
  poly v, k, epp;

  unpack_pk(&pkpv, seed, pk);
 800765a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800765e:	3b34      	subs	r3, #52	; 0x34
 8007660:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
 8007664:	f101 0110 	add.w	r1, r1, #16
 8007668:	f507 5058 	add.w	r0, r7, #13824	; 0x3600
 800766c:	f100 0018 	add.w	r0, r0, #24
 8007670:	3808      	subs	r0, #8
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	f7ff fd02 	bl	800707c <unpack_pk>
  poly_frommsg(&k, m);
 8007678:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800767c:	3b30      	subs	r3, #48	; 0x30
 800767e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8007682:	3a28      	subs	r2, #40	; 0x28
 8007684:	6819      	ldr	r1, [r3, #0]
 8007686:	4610      	mov	r0, r2
 8007688:	f000 fe94 	bl	80083b4 <pqcrystals_kyber1024_ref_poly_frommsg>
  gen_at(at, seed);
 800768c:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
 8007690:	f101 0110 	add.w	r1, r1, #16
 8007694:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 8007698:	3b28      	subs	r3, #40	; 0x28
 800769a:	2201      	movs	r2, #1
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff fdb7 	bl	8007210 <pqcrystals_kyber1024_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
 80076a2:	2300      	movs	r3, #0
 80076a4:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 80076a8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e026      	b.n	80076fe <pqcrystals_kyber1024_ref_indcpa_enc+0xda>
    poly_getnoise_eta1(sp.vec+i, coins, nonce++);
 80076b0:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 80076b4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	025b      	lsls	r3, r3, #9
 80076bc:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 80076c0:	f102 0210 	add.w	r2, r2, #16
 80076c4:	18d0      	adds	r0, r2, r3
 80076c6:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 80076ca:	f103 0333 	add.w	r3, r3, #51	; 0x33
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	1c53      	adds	r3, r2, #1
 80076d2:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
 80076d6:	f101 0133 	add.w	r1, r1, #51	; 0x33
 80076da:	700b      	strb	r3, [r1, #0]
 80076dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076e0:	3b38      	subs	r3, #56	; 0x38
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	f000 fefa 	bl	80084dc <pqcrystals_kyber1024_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 80076e8:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 80076ec:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 80076f8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 8007702:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d9d1      	bls.n	80076b0 <pqcrystals_kyber1024_ref_indcpa_enc+0x8c>
  for(i=0;i<KYBER_K;i++)
 800770c:	2300      	movs	r3, #0
 800770e:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 8007712:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e027      	b.n	800776a <pqcrystals_kyber1024_ref_indcpa_enc+0x146>
    poly_getnoise_eta2(ep.vec+i, coins, nonce++);
 800771a:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 800771e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	025a      	lsls	r2, r3, #9
 8007726:	f507 5338 	add.w	r3, r7, #11776	; 0x2e00
 800772a:	f103 0318 	add.w	r3, r3, #24
 800772e:	3b08      	subs	r3, #8
 8007730:	1898      	adds	r0, r3, r2
 8007732:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 8007736:	f103 0333 	add.w	r3, r3, #51	; 0x33
 800773a:	781a      	ldrb	r2, [r3, #0]
 800773c:	1c53      	adds	r3, r2, #1
 800773e:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
 8007742:	f101 0133 	add.w	r1, r1, #51	; 0x33
 8007746:	700b      	strb	r3, [r1, #0]
 8007748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800774c:	3b38      	subs	r3, #56	; 0x38
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	f000 fedc 	bl	800850c <pqcrystals_kyber1024_ref_poly_getnoise_eta2>
  for(i=0;i<KYBER_K;i++)
 8007754:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 8007758:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 8007764:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 800776e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d9d0      	bls.n	800771a <pqcrystals_kyber1024_ref_indcpa_enc+0xf6>
  poly_getnoise_eta2(&epp, coins, nonce++);
 8007778:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 800777c:	f103 0333 	add.w	r3, r3, #51	; 0x33
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	1c53      	adds	r3, r2, #1
 8007784:	f507 418c 	add.w	r1, r7, #17920	; 0x4600
 8007788:	f101 0133 	add.w	r1, r1, #51	; 0x33
 800778c:	700b      	strb	r3, [r1, #0]
 800778e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007792:	3b38      	subs	r3, #56	; 0x38
 8007794:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8007798:	3828      	subs	r0, #40	; 0x28
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	f000 feb6 	bl	800850c <pqcrystals_kyber1024_ref_poly_getnoise_eta2>

  polyvec_ntt(&sp);
 80077a0:	f507 5378 	add.w	r3, r7, #15872	; 0x3e00
 80077a4:	f103 0310 	add.w	r3, r3, #16
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f9c0 	bl	8008b2e <pqcrystals_kyber1024_ref_polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 80077b4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e025      	b.n	8007808 <pqcrystals_kyber1024_ref_indcpa_enc+0x1e4>
    polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
 80077bc:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80077c0:	3b28      	subs	r3, #40	; 0x28
 80077c2:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 80077c6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	0252      	lsls	r2, r2, #9
 80077ce:	1898      	adds	r0, r3, r2
 80077d0:	f607 6338 	addw	r3, r7, #3640	; 0xe38
 80077d4:	3b28      	subs	r3, #40	; 0x28
 80077d6:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 80077da:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	02d2      	lsls	r2, r2, #11
 80077e2:	4413      	add	r3, r2
 80077e4:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 80077e8:	f102 0210 	add.w	r2, r2, #16
 80077ec:	4619      	mov	r1, r3
 80077ee:	f001 f9d0 	bl	8008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>
  for(i=0;i<KYBER_K;i++)
 80077f2:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 80077f6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3301      	adds	r3, #1
 80077fe:	f507 428c 	add.w	r2, r7, #17920	; 0x4600
 8007802:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	f507 438c 	add.w	r3, r7, #17920	; 0x4600
 800780c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b03      	cmp	r3, #3
 8007814:	d9d2      	bls.n	80077bc <pqcrystals_kyber1024_ref_indcpa_enc+0x198>

  polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
 8007816:	f507 5278 	add.w	r2, r7, #15872	; 0x3e00
 800781a:	f102 0210 	add.w	r2, r2, #16
 800781e:	f507 5158 	add.w	r1, r7, #13824	; 0x3600
 8007822:	f101 0118 	add.w	r1, r1, #24
 8007826:	3908      	subs	r1, #8
 8007828:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800782c:	3b28      	subs	r3, #40	; 0x28
 800782e:	4618      	mov	r0, r3
 8007830:	f001 f9af 	bl	8008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>

  polyvec_invntt_tomont(&b);
 8007834:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8007838:	3b28      	subs	r3, #40	; 0x28
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f990 	bl	8008b60 <pqcrystals_kyber1024_ref_polyvec_invntt_tomont>
  poly_invntt_tomont(&v);
 8007840:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8007844:	3b28      	subs	r3, #40	; 0x28
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fe87 	bl	800855a <pqcrystals_kyber1024_ref_poly_invntt_tomont>

  polyvec_add(&b, &b, &ep);
 800784c:	f507 5238 	add.w	r2, r7, #11776	; 0x2e00
 8007850:	f102 0218 	add.w	r2, r2, #24
 8007854:	3a08      	subs	r2, #8
 8007856:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 800785a:	3928      	subs	r1, #40	; 0x28
 800785c:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8007860:	3b28      	subs	r3, #40	; 0x28
 8007862:	4618      	mov	r0, r3
 8007864:	f001 f9f7 	bl	8008c56 <pqcrystals_kyber1024_ref_polyvec_add>
  poly_add(&v, &v, &epp);
 8007868:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800786c:	3a28      	subs	r2, #40	; 0x28
 800786e:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8007872:	3928      	subs	r1, #40	; 0x28
 8007874:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8007878:	3b28      	subs	r3, #40	; 0x28
 800787a:	4618      	mov	r0, r3
 800787c:	f000 ff0a 	bl	8008694 <pqcrystals_kyber1024_ref_poly_add>
  poly_add(&v, &v, &k);
 8007880:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8007884:	3a28      	subs	r2, #40	; 0x28
 8007886:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 800788a:	3928      	subs	r1, #40	; 0x28
 800788c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8007890:	3b28      	subs	r3, #40	; 0x28
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fefe 	bl	8008694 <pqcrystals_kyber1024_ref_poly_add>
  polyvec_reduce(&b);
 8007898:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800789c:	3b28      	subs	r3, #40	; 0x28
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f9c0 	bl	8008c24 <pqcrystals_kyber1024_ref_polyvec_reduce>
  poly_reduce(&v);
 80078a4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80078a8:	3b28      	subs	r3, #40	; 0x28
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 fed3 	bl	8008656 <pqcrystals_kyber1024_ref_poly_reduce>

  pack_ciphertext(c, &b, &v);
 80078b0:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80078b4:	3a28      	subs	r2, #40	; 0x28
 80078b6:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 80078ba:	3928      	subs	r1, #40	; 0x28
 80078bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078c0:	3b2c      	subs	r3, #44	; 0x2c
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	f7ff fc16 	bl	80070f4 <pack_ciphertext>
}
 80078c8:	bf00      	nop
 80078ca:	f507 478c 	add.w	r7, r7, #17920	; 0x4600
 80078ce:	373c      	adds	r7, #60	; 0x3c
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd90      	pop	{r4, r7, pc}

080078d4 <pqcrystals_kyber1024_ref_indcpa_dec>:
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	f5ad 5da0 	sub.w	sp, sp, #5120	; 0x1400
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	f107 0310 	add.w	r3, r7, #16
 80078e2:	3b04      	subs	r3, #4
 80078e4:	6018      	str	r0, [r3, #0]
 80078e6:	f107 0310 	add.w	r3, r7, #16
 80078ea:	3b08      	subs	r3, #8
 80078ec:	6019      	str	r1, [r3, #0]
 80078ee:	f107 0310 	add.w	r3, r7, #16
 80078f2:	3b0c      	subs	r3, #12
 80078f4:	601a      	str	r2, [r3, #0]
  polyvec b, skpv;
  poly v, mp;

  unpack_ciphertext(&b, &v, c);
 80078f6:	f107 0310 	add.w	r3, r7, #16
 80078fa:	3b08      	subs	r3, #8
 80078fc:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007900:	f507 6041 	add.w	r0, r7, #3088	; 0xc10
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	f7ff fc0a 	bl	800711e <unpack_ciphertext>
  unpack_sk(&skpv, sk);
 800790a:	f107 0310 	add.w	r3, r7, #16
 800790e:	3b0c      	subs	r3, #12
 8007910:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	4610      	mov	r0, r2
 8007918:	f7ff fbdf 	bl	80070da <unpack_sk>

  polyvec_ntt(&b);
 800791c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8007920:	4618      	mov	r0, r3
 8007922:	f001 f904 	bl	8008b2e <pqcrystals_kyber1024_ref_polyvec_ntt>
  polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
 8007926:	f507 6241 	add.w	r2, r7, #3088	; 0xc10
 800792a:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	4618      	mov	r0, r3
 8007934:	f001 f92d 	bl	8008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>
  poly_invntt_tomont(&mp);
 8007938:	f107 0310 	add.w	r3, r7, #16
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fe0c 	bl	800855a <pqcrystals_kyber1024_ref_poly_invntt_tomont>

  poly_sub(&mp, &v, &mp);
 8007942:	f107 0210 	add.w	r2, r7, #16
 8007946:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800794a:	f107 0310 	add.w	r3, r7, #16
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fec7 	bl	80086e2 <pqcrystals_kyber1024_ref_poly_sub>
  poly_reduce(&mp);
 8007954:	f107 0310 	add.w	r3, r7, #16
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fe7c 	bl	8008656 <pqcrystals_kyber1024_ref_poly_reduce>

  poly_tomsg(m, &mp);
 800795e:	f107 0210 	add.w	r2, r7, #16
 8007962:	f107 0310 	add.w	r3, r7, #16
 8007966:	3b04      	subs	r3, #4
 8007968:	4611      	mov	r1, r2
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	f000 fd5c 	bl	8008428 <pqcrystals_kyber1024_ref_poly_tomsg>
}
 8007970:	bf00      	nop
 8007972:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <pqcrystals_kyber1024_ref_keypair>:
*
* Returns 0 (success)
**************************************************/
int crypto_kem_keypair(uint8_t pk[KYBER_PUBLICKEYBYTES],
                       uint8_t sk[KYBER_SECRETKEYBYTES])
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  size_t i;
  indcpa_keypair(pk, sk);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fd13 	bl	80073b4 <pqcrystals_kyber1024_ref_indcpa_keypair>
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e00c      	b.n	80079ae <pqcrystals_kyber1024_ref_keypair+0x32>
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	441a      	add	r2, r3
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	440b      	add	r3, r1
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 80079b4:	d3ee      	bcc.n	8007994 <pqcrystals_kyber1024_ref_keypair+0x18>
  hash_h(sk+KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 80079bc:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7ff faca 	bl	8006f5c <pqcrystals_kyber_fips202_ref_sha3_256>
  /* Value z for pseudo-random output on reject */
  randombytes(sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f503 6344 	add.w	r3, r3, #3136	; 0xc40
 80079ce:	2120      	movs	r1, #32
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 f963 	bl	8008c9c <randombytes>
  return 0;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <pqcrystals_kyber1024_ref_enc>:
* Returns 0 (success)
**************************************************/
int crypto_kem_enc(uint8_t ct[KYBER_CIPHERTEXTBYTES],
                   uint8_t ss[KYBER_SSBYTES],
                   const uint8_t pk[KYBER_PUBLICKEYBYTES])
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b0a4      	sub	sp, #144	; 0x90
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  uint8_t buf[2*KYBER_SYMBYTES];
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];

  randombytes(buf, KYBER_SYMBYTES);
 80079ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80079f0:	2120      	movs	r1, #32
 80079f2:	4618      	mov	r0, r3
 80079f4:	f001 f952 	bl	8008c9c <randombytes>
  /* Don't release system RNG output */
  hash_h(buf, buf, KYBER_SYMBYTES);
 80079f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80079fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a00:	2220      	movs	r2, #32
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff faaa 	bl	8006f5c <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Multitarget countermeasure for coins + contributory KEM */
  hash_h(buf+KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 8007a08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a0c:	3320      	adds	r3, #32
 8007a0e:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff faa1 	bl	8006f5c <pqcrystals_kyber_fips202_ref_sha3_256>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8007a1a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007a1e:	f107 0310 	add.w	r3, r7, #16
 8007a22:	2240      	movs	r2, #64	; 0x40
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fad0 	bl	8006fca <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(ct, buf, pk, kr+KYBER_SYMBYTES);
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	3320      	adds	r3, #32
 8007a30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fdf4 	bl	8007624 <pqcrystals_kyber1024_ref_indcpa_enc>

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 8007a3c:	f107 0310 	add.w	r3, r7, #16
 8007a40:	3320      	adds	r3, #32
 8007a42:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fa87 	bl	8006f5c <pqcrystals_kyber_fips202_ref_sha3_256>
  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 8007a4e:	f107 0210 	add.w	r2, r7, #16
 8007a52:	2340      	movs	r3, #64	; 0x40
 8007a54:	2120      	movs	r1, #32
 8007a56:	68b8      	ldr	r0, [r7, #8]
 8007a58:	f7ff fa42 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3790      	adds	r7, #144	; 0x90
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <pqcrystals_kyber1024_ref_dec>:
* On failure, ss will contain a pseudo-random value.
**************************************************/
int crypto_kem_dec(uint8_t ss[KYBER_SSBYTES],
                   const uint8_t ct[KYBER_CIPHERTEXTBYTES],
                   const uint8_t sk[KYBER_SECRETKEYBYTES])
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	f5ad 6dd8 	sub.w	sp, sp, #1728	; 0x6c0
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	f107 030c 	add.w	r3, r7, #12
 8007a72:	6018      	str	r0, [r3, #0]
 8007a74:	f107 0308 	add.w	r3, r7, #8
 8007a78:	6019      	str	r1, [r3, #0]
 8007a7a:	1d3b      	adds	r3, r7, #4
 8007a7c:	601a      	str	r2, [r3, #0]
  int fail;
  uint8_t buf[2*KYBER_SYMBYTES];
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];
  uint8_t cmp[KYBER_CIPHERTEXTBYTES];
  const uint8_t *pk = sk+KYBER_INDCPA_SECRETKEYBYTES;
 8007a7e:	1d3b      	adds	r3, r7, #4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007a86:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8

  indcpa_dec(buf, ct, sk);
 8007a8a:	1d3a      	adds	r2, r7, #4
 8007a8c:	f107 0308 	add.w	r3, r7, #8
 8007a90:	f207 6074 	addw	r0, r7, #1652	; 0x674
 8007a94:	6812      	ldr	r2, [r2, #0]
 8007a96:	6819      	ldr	r1, [r3, #0]
 8007a98:	f7ff ff1c 	bl	80078d4 <pqcrystals_kyber1024_ref_indcpa_dec>

  /* Multitarget countermeasure for coins + contributory KEM */
  for(i=0;i<KYBER_SYMBYTES;i++)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8007aa2:	e014      	b.n	8007ace <pqcrystals_kyber1024_ref_dec+0x68>
    buf[KYBER_SYMBYTES+i] = sk[KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES+i];
 8007aa4:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8007aa8:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8007aac:	1d3a      	adds	r2, r7, #4
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8007ab6:	3320      	adds	r3, #32
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8007abe:	440b      	add	r3, r1
 8007ac0:	f803 2c4c 	strb.w	r2, [r3, #-76]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8007ac4:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8007ace:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8007ad2:	2b1f      	cmp	r3, #31
 8007ad4:	d9e6      	bls.n	8007aa4 <pqcrystals_kyber1024_ref_dec+0x3e>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8007ad6:	f207 6174 	addw	r1, r7, #1652	; 0x674
 8007ada:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff fa72 	bl	8006fca <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(cmp, buf, pk, kr+KYBER_SYMBYTES);
 8007ae6:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8007aea:	3320      	adds	r3, #32
 8007aec:	f207 6174 	addw	r1, r7, #1652	; 0x674
 8007af0:	f107 0014 	add.w	r0, r7, #20
 8007af4:	f8d7 26b8 	ldr.w	r2, [r7, #1720]	; 0x6b8
 8007af8:	f7ff fd94 	bl	8007624 <pqcrystals_kyber1024_ref_indcpa_enc>

  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 8007afc:	f107 0114 	add.w	r1, r7, #20
 8007b00:	f107 0308 	add.w	r3, r7, #8
 8007b04:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8007b08:	6818      	ldr	r0, [r3, #0]
 8007b0a:	f001 fa7c 	bl	8009006 <pqcrystals_kyber1024_ref_verify>
 8007b0e:	f8c7 06b4 	str.w	r0, [r7, #1716]	; 0x6b4

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 8007b12:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8007b16:	3320      	adds	r3, #32
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8007b20:	6809      	ldr	r1, [r1, #0]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7ff fa1a 	bl	8006f5c <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Overwrite pre-k with z on re-encryption failure */
  cmov(kr, sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES, fail);
 8007b28:	1d3b      	adds	r3, r7, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f503 6144 	add.w	r1, r3, #3136	; 0xc40
 8007b30:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	f207 6034 	addw	r0, r7, #1588	; 0x634
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f001 fa95 	bl	800906a <pqcrystals_kyber1024_ref_cmov>

  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 8007b40:	f207 6234 	addw	r2, r7, #1588	; 0x634
 8007b44:	f107 000c 	add.w	r0, r7, #12
 8007b48:	2340      	movs	r3, #64	; 0x40
 8007b4a:	2120      	movs	r1, #32
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f7ff f9c7 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	f507 67d8 	add.w	r7, r7, #1728	; 0x6c0
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <kex_uake_initA>:
#include "kex.h"
#include "kem.h"
#include "symmetric.h"

void kex_uake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	607a      	str	r2, [r7, #4]
 8007b6a:	603b      	str	r3, [r7, #0]
  crypto_kem_keypair(send, sk);
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff ff04 	bl	800797c <pqcrystals_kyber1024_ref_keypair>
  crypto_kem_enc(send+CRYPTO_PUBLICKEYBYTES, tk, pkb);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff ff2e 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <kex_uake_sharedB>:

void kex_uake_sharedB(uint8_t *send, uint8_t *k, const uint8_t *recv, const uint8_t *skb)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b094      	sub	sp, #80	; 0x50
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  uint8_t buf[2*CRYPTO_BYTES];
  crypto_kem_enc(send, buf, recv);
 8007b9a:	f107 0310 	add.w	r3, r7, #16
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff ff1c 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
  crypto_kem_dec(buf+CRYPTO_BYTES, recv+CRYPTO_PUBLICKEYBYTES, skb);
 8007ba8:	f107 0310 	add.w	r3, r7, #16
 8007bac:	3320      	adds	r3, #32
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	f502 61c4 	add.w	r1, r2, #1568	; 0x620
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff ff55 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  kdf(k, buf, 2*CRYPTO_BYTES);
 8007bbc:	f107 0210 	add.w	r2, r7, #16
 8007bc0:	2340      	movs	r3, #64	; 0x40
 8007bc2:	2120      	movs	r1, #32
 8007bc4:	68b8      	ldr	r0, [r7, #8]
 8007bc6:	f7ff f98b 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007bca:	bf00      	nop
 8007bcc:	3750      	adds	r7, #80	; 0x50
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <kex_uake_sharedA>:

void kex_uake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b096      	sub	sp, #88	; 0x58
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t buf[2*CRYPTO_BYTES];
  crypto_kem_dec(buf, recv, sk);
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff ff3c 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  for(i=0;i<CRYPTO_BYTES;i++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf2:	e00d      	b.n	8007c10 <kex_uake_sharedA+0x3e>
    buf[i+CRYPTO_BYTES] = tk[i];
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf8:	441a      	add	r2, r3
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfc:	3320      	adds	r3, #32
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007c04:	440b      	add	r3, r1
 8007c06:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(i=0;i<CRYPTO_BYTES;i++)
 8007c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c12:	2b1f      	cmp	r3, #31
 8007c14:	d9ee      	bls.n	8007bf4 <kex_uake_sharedA+0x22>
  kdf(k, buf, 2*CRYPTO_BYTES);
 8007c16:	f107 0214 	add.w	r2, r7, #20
 8007c1a:	2340      	movs	r3, #64	; 0x40
 8007c1c:	2120      	movs	r1, #32
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff f95e 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007c24:	bf00      	nop
 8007c26:	3758      	adds	r7, #88	; 0x58
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <kex_ake_initA>:

void kex_ake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
  crypto_kem_keypair(send, sk);
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fe9d 	bl	800797c <pqcrystals_kyber1024_ref_keypair>
  crypto_kem_enc(send+CRYPTO_PUBLICKEYBYTES, tk, pkb);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fec7 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <kex_ake_sharedB>:

void kex_ake_sharedB(uint8_t *send, uint8_t *k, const uint8_t* recv, const uint8_t *skb, const uint8_t *pka)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b09c      	sub	sp, #112	; 0x70
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	60f8      	str	r0, [r7, #12]
 8007c62:	60b9      	str	r1, [r7, #8]
 8007c64:	607a      	str	r2, [r7, #4]
 8007c66:	603b      	str	r3, [r7, #0]
  uint8_t buf[3*CRYPTO_BYTES];
  crypto_kem_enc(send, buf, recv);
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff feb5 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
  crypto_kem_enc(send+CRYPTO_CIPHERTEXTBYTES, buf+CRYPTO_BYTES, pka);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f503 60c4 	add.w	r0, r3, #1568	; 0x620
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	3320      	adds	r3, #32
 8007c82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7ff feab 	bl	80079e0 <pqcrystals_kyber1024_ref_enc>
  crypto_kem_dec(buf+2*CRYPTO_BYTES, recv+CRYPTO_PUBLICKEYBYTES, skb);
 8007c8a:	f107 0310 	add.w	r3, r7, #16
 8007c8e:	3340      	adds	r3, #64	; 0x40
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	f502 61c4 	add.w	r1, r2, #1568	; 0x620
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff fee4 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  kdf(k, buf, 3*CRYPTO_BYTES);
 8007c9e:	f107 0210 	add.w	r2, r7, #16
 8007ca2:	2360      	movs	r3, #96	; 0x60
 8007ca4:	2120      	movs	r1, #32
 8007ca6:	68b8      	ldr	r0, [r7, #8]
 8007ca8:	f7ff f91a 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007cac:	bf00      	nop
 8007cae:	3770      	adds	r7, #112	; 0x70
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <kex_ake_sharedA>:

void kex_ake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk, const uint8_t *ska)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b09e      	sub	sp, #120	; 0x78
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t buf[3*CRYPTO_BYTES];
  crypto_kem_dec(buf, recv, sk);
 8007cc2:	f107 0314 	add.w	r3, r7, #20
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7ff fecb 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  crypto_kem_dec(buf+CRYPTO_BYTES, recv+CRYPTO_CIPHERTEXTBYTES, ska);
 8007cd0:	f107 0314 	add.w	r3, r7, #20
 8007cd4:	3320      	adds	r3, #32
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	f502 61c4 	add.w	r1, r2, #1568	; 0x620
 8007cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7ff fec0 	bl	8007a66 <pqcrystals_kyber1024_ref_dec>
  for(i=0;i<CRYPTO_BYTES;i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	677b      	str	r3, [r7, #116]	; 0x74
 8007cea:	e00d      	b.n	8007d08 <kex_ake_sharedA+0x54>
    buf[i+2*CRYPTO_BYTES] = tk[i];
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf0:	441a      	add	r2, r3
 8007cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf4:	3340      	adds	r3, #64	; 0x40
 8007cf6:	7812      	ldrb	r2, [r2, #0]
 8007cf8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8007cfc:	440b      	add	r3, r1
 8007cfe:	f803 2c64 	strb.w	r2, [r3, #-100]
  for(i=0;i<CRYPTO_BYTES;i++)
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	3301      	adds	r3, #1
 8007d06:	677b      	str	r3, [r7, #116]	; 0x74
 8007d08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d0a:	2b1f      	cmp	r3, #31
 8007d0c:	d9ee      	bls.n	8007cec <kex_ake_sharedA+0x38>
  kdf(k, buf, 3*CRYPTO_BYTES);
 8007d0e:	f107 0214 	add.w	r2, r7, #20
 8007d12:	2360      	movs	r3, #96	; 0x60
 8007d14:	2120      	movs	r1, #32
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f7ff f8e2 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007d1c:	bf00      	nop
 8007d1e:	3778      	adds	r7, #120	; 0x78
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <fqmul>:
* Arguments:   - int16_t a: first factor
*              - int16_t b: second factor
*
* Returns 16-bit integer congruent to a*b*R^{-1} mod q
**************************************************/
static int16_t fqmul(int16_t a, int16_t b) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80bb      	strh	r3, [r7, #4]
  return montgomery_reduce((int32_t)a*b);
 8007d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007d3c:	fb02 f303 	mul.w	r3, r2, r3
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 ffc5 	bl	8008cd0 <pqcrystals_kyber1024_ref_montgomery_reduce>
 8007d46:	4603      	mov	r3, r0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <pqcrystals_kyber1024_ref_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b088      	sub	sp, #32
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int16_t t, zeta;

  k = 1;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	613b      	str	r3, [r7, #16]
  for(len = 128; len >= 2; len >>= 1) {
 8007d5c:	2380      	movs	r3, #128	; 0x80
 8007d5e:	61fb      	str	r3, [r7, #28]
 8007d60:	e051      	b.n	8007e06 <pqcrystals_kyber1024_ref_ntt+0xb6>
    for(start = 0; start < 256; start = j + len) {
 8007d62:	2300      	movs	r3, #0
 8007d64:	61bb      	str	r3, [r7, #24]
 8007d66:	e048      	b.n	8007dfa <pqcrystals_kyber1024_ref_ntt+0xaa>
      zeta = zetas[k++];
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	613a      	str	r2, [r7, #16]
 8007d6e:	4a2a      	ldr	r2, [pc, #168]	; (8007e18 <pqcrystals_kyber1024_ref_ntt+0xc8>)
 8007d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d74:	81fb      	strh	r3, [r7, #14]
      for(j = start; j < start + len; j++) {
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e034      	b.n	8007de6 <pqcrystals_kyber1024_ref_ntt+0x96>
        t = fqmul(zeta, r[j + len]);
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4413      	add	r3, r2
 8007d88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007d8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff ffc6 	bl	8007d24 <fqmul>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	81bb      	strh	r3, [r7, #12]
        r[j + len] = r[j] - t;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	005b      	lsls	r3, r3, #1
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	89bb      	ldrh	r3, [r7, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	b299      	uxth	r1, r3
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	4413      	add	r3, r2
 8007dbc:	b20a      	sxth	r2, r1
 8007dbe:	801a      	strh	r2, [r3, #0]
        r[j] = r[j] + t;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	89bb      	ldrh	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	b299      	uxth	r1, r3
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	b20a      	sxth	r2, r1
 8007dde:	801a      	strh	r2, [r3, #0]
      for(j = start; j < start + len; j++) {
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3301      	adds	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	4413      	add	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3c4      	bcc.n	8007d7c <pqcrystals_kyber1024_ref_ntt+0x2c>
    for(start = 0; start < 256; start = j + len) {
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2bff      	cmp	r3, #255	; 0xff
 8007dfe:	d9b3      	bls.n	8007d68 <pqcrystals_kyber1024_ref_ntt+0x18>
  for(len = 128; len >= 2; len >>= 1) {
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	085b      	lsrs	r3, r3, #1
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d8aa      	bhi.n	8007d62 <pqcrystals_kyber1024_ref_ntt+0x12>
      }
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	0800aa50 	.word	0x0800aa50

08007e1c <pqcrystals_kyber1024_ref_invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void invntt(int16_t r[256]) {
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b089      	sub	sp, #36	; 0x24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  unsigned int start, len, j, k;
  int16_t t, zeta;
  const int16_t f = 1441; // mont^2/128
 8007e24:	f240 53a1 	movw	r3, #1441	; 0x5a1
 8007e28:	81fb      	strh	r3, [r7, #14]

  k = 127;
 8007e2a:	237f      	movs	r3, #127	; 0x7f
 8007e2c:	613b      	str	r3, [r7, #16]
  for(len = 2; len <= 128; len <<= 1) {
 8007e2e:	2302      	movs	r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	e064      	b.n	8007efe <pqcrystals_kyber1024_ref_invntt+0xe2>
    for(start = 0; start < 256; start = j + len) {
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
 8007e38:	e05b      	b.n	8007ef2 <pqcrystals_kyber1024_ref_invntt+0xd6>
      zeta = zetas[k--];
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	613a      	str	r2, [r7, #16]
 8007e40:	4a40      	ldr	r2, [pc, #256]	; (8007f44 <pqcrystals_kyber1024_ref_invntt+0x128>)
 8007e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e46:	81bb      	strh	r3, [r7, #12]
      for(j = start; j < start + len; j++) {
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	617b      	str	r3, [r7, #20]
 8007e4c:	e047      	b.n	8007ede <pqcrystals_kyber1024_ref_invntt+0xc2>
        t = r[j];
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	4413      	add	r3, r2
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	817b      	strh	r3, [r7, #10]
        r[j] = barrett_reduce(t + r[j + len]);
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	4413      	add	r3, r2
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	4413      	add	r3, r2
 8007e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	897b      	ldrh	r3, [r7, #10]
 8007e6e:	4413      	add	r3, r2
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	b219      	sxth	r1, r3
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	18d4      	adds	r4, r2, r3
 8007e7c:	4608      	mov	r0, r1
 8007e7e:	f000 ff50 	bl	8008d22 <pqcrystals_kyber1024_ref_barrett_reduce>
 8007e82:	4603      	mov	r3, r0
 8007e84:	8023      	strh	r3, [r4, #0]
        r[j + len] = r[j + len] - t;
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	897b      	ldrh	r3, [r7, #10]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	b299      	uxth	r1, r3
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	b20a      	sxth	r2, r1
 8007eac:	801a      	strh	r2, [r3, #0]
        r[j + len] = fqmul(zeta, r[j + len]);
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	18d4      	adds	r4, r2, r3
 8007eca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff ff28 	bl	8007d24 <fqmul>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	8023      	strh	r3, [r4, #0]
      for(j = start; j < start + len; j++) {
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	3301      	adds	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d3b1      	bcc.n	8007e4e <pqcrystals_kyber1024_ref_invntt+0x32>
    for(start = 0; start < 256; start = j + len) {
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	4413      	add	r3, r2
 8007ef0:	61fb      	str	r3, [r7, #28]
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	2bff      	cmp	r3, #255	; 0xff
 8007ef6:	d9a0      	bls.n	8007e3a <pqcrystals_kyber1024_ref_invntt+0x1e>
  for(len = 2; len <= 128; len <<= 1) {
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2b80      	cmp	r3, #128	; 0x80
 8007f02:	d997      	bls.n	8007e34 <pqcrystals_kyber1024_ref_invntt+0x18>
      }
    }
  }

  for(j = 0; j < 256; j++)
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e013      	b.n	8007f32 <pqcrystals_kyber1024_ref_invntt+0x116>
    r[j] = fqmul(r[j], f);
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	4413      	add	r3, r2
 8007f12:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	18d4      	adds	r4, r2, r3
 8007f1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f22:	4619      	mov	r1, r3
 8007f24:	f7ff fefe 	bl	8007d24 <fqmul>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	8023      	strh	r3, [r4, #0]
  for(j = 0; j < 256; j++)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2bff      	cmp	r3, #255	; 0xff
 8007f36:	d9e8      	bls.n	8007f0a <pqcrystals_kyber1024_ref_invntt+0xee>
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	3724      	adds	r7, #36	; 0x24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd90      	pop	{r4, r7, pc}
 8007f42:	bf00      	nop
 8007f44:	0800aa50 	.word	0x0800aa50

08007f48 <pqcrystals_kyber1024_ref_basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	807b      	strh	r3, [r7, #2]
  r[0]  = fqmul(a[1], b[1]);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	3302      	adds	r3, #2
 8007f5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3302      	adds	r3, #2
 8007f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7ff fedb 	bl	8007d24 <fqmul>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	461a      	mov	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	801a      	strh	r2, [r3, #0]
  r[0]  = fqmul(r[0], zeta);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f7c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fece 	bl	8007d24 <fqmul>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	801a      	strh	r2, [r3, #0]
  r[0] += fqmul(a[0], b[0]);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	f7ff fec0 	bl	8007d24 <fqmul>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	b28b      	uxth	r3, r1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	801a      	strh	r2, [r3, #0]
  r[1]  = fqmul(a[0], b[1]);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1c9c      	adds	r4, r3, #2
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7ff fea8 	bl	8007d24 <fqmul>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	8023      	strh	r3, [r4, #0]
  r[1] += fqmul(a[1], b[0]);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3302      	adds	r3, #2
 8007fdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f7ff fe9b 	bl	8007d24 <fqmul>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	b28b      	uxth	r3, r1
 8007ffe:	4413      	add	r3, r2
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3302      	adds	r3, #2
 8008006:	b212      	sxth	r2, r2
 8008008:	801a      	strh	r2, [r3, #0]
}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	bd90      	pop	{r4, r7, pc}
	...

08008014 <pqcrystals_kyber1024_ref_poly_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (of length KYBER_POLYCOMPRESSEDBYTES)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a)
{
 8008014:	b480      	push	{r7}
 8008016:	b089      	sub	sp, #36	; 0x24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
    r[2] = t[4] | (t[5] << 4);
    r[3] = t[6] | (t[7] << 4);
    r += 4;
  }
#elif (KYBER_POLYCOMPRESSEDBYTES == 160)
  for(i=0;i<KYBER_N/8;i++) {
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	e081      	b.n	8008128 <pqcrystals_kyber1024_ref_poly_compress+0x114>
    for(j=0;j<8;j++) {
 8008024:	2300      	movs	r3, #0
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	e02d      	b.n	8008086 <pqcrystals_kyber1024_ref_poly_compress+0x72>
      // map to positive standard representatives
      u  = a->coeffs[8*i+j];
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	00da      	lsls	r2, r3, #3
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	441a      	add	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008038:	82fb      	strh	r3, [r7, #22]
      u += (u >> 15) & KYBER_Q;
 800803a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800803e:	13db      	asrs	r3, r3, #15
 8008040:	b21b      	sxth	r3, r3
 8008042:	b29a      	uxth	r2, r3
 8008044:	f640 5301 	movw	r3, #3329	; 0xd01
 8008048:	4013      	ands	r3, r2
 800804a:	b29a      	uxth	r2, r3
 800804c:	8afb      	ldrh	r3, [r7, #22]
 800804e:	4413      	add	r3, r2
 8008050:	b29b      	uxth	r3, r3
 8008052:	82fb      	strh	r3, [r7, #22]
      t[j] = ((((uint32_t)u << 5) + KYBER_Q/2)/KYBER_Q) & 31;
 8008054:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008058:	015b      	lsls	r3, r3, #5
 800805a:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
 800805e:	4b38      	ldr	r3, [pc, #224]	; (8008140 <pqcrystals_kyber1024_ref_poly_compress+0x12c>)
 8008060:	fba3 1302 	umull	r1, r3, r3, r2
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	0852      	lsrs	r2, r2, #1
 8008068:	4413      	add	r3, r2
 800806a:	0adb      	lsrs	r3, r3, #11
 800806c:	b2db      	uxtb	r3, r3
 800806e:	f003 031f 	and.w	r3, r3, #31
 8008072:	b2d9      	uxtb	r1, r3
 8008074:	f107 020c 	add.w	r2, r7, #12
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	4413      	add	r3, r2
 800807c:	460a      	mov	r2, r1
 800807e:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	3301      	adds	r3, #1
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	2b07      	cmp	r3, #7
 800808a:	d9ce      	bls.n	800802a <pqcrystals_kyber1024_ref_poly_compress+0x16>
    }

    r[0] = (t[0] >> 0) | (t[1] << 5);
 800808c:	7b3b      	ldrb	r3, [r7, #12]
 800808e:	b25a      	sxtb	r2, r3
 8008090:	7b7b      	ldrb	r3, [r7, #13]
 8008092:	015b      	lsls	r3, r3, #5
 8008094:	b25b      	sxtb	r3, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	b25b      	sxtb	r3, r3
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	701a      	strb	r2, [r3, #0]
    r[1] = (t[1] >> 3) | (t[2] << 2) | (t[3] << 7);
 80080a0:	7b7b      	ldrb	r3, [r7, #13]
 80080a2:	08db      	lsrs	r3, r3, #3
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	b25a      	sxtb	r2, r3
 80080a8:	7bbb      	ldrb	r3, [r7, #14]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b25a      	sxtb	r2, r3
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	4313      	orrs	r3, r2
 80080ba:	b25a      	sxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3301      	adds	r3, #1
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
    r[2] = (t[3] >> 1) | (t[4] << 4);
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	085b      	lsrs	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	b25a      	sxtb	r2, r3
 80080cc:	7c3b      	ldrb	r3, [r7, #16]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	4313      	orrs	r3, r2
 80080d4:	b25a      	sxtb	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	3302      	adds	r3, #2
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	701a      	strb	r2, [r3, #0]
    r[3] = (t[4] >> 4) | (t[5] << 1) | (t[6] << 6);
 80080de:	7c3b      	ldrb	r3, [r7, #16]
 80080e0:	091b      	lsrs	r3, r3, #4
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	b25a      	sxtb	r2, r3
 80080e6:	7c7b      	ldrb	r3, [r7, #17]
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	4313      	orrs	r3, r2
 80080ee:	b25a      	sxtb	r2, r3
 80080f0:	7cbb      	ldrb	r3, [r7, #18]
 80080f2:	019b      	lsls	r3, r3, #6
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b25a      	sxtb	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3303      	adds	r3, #3
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
    r[4] = (t[6] >> 2) | (t[7] << 3);
 8008102:	7cbb      	ldrb	r3, [r7, #18]
 8008104:	089b      	lsrs	r3, r3, #2
 8008106:	b2db      	uxtb	r3, r3
 8008108:	b25a      	sxtb	r2, r3
 800810a:	7cfb      	ldrb	r3, [r7, #19]
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	b25b      	sxtb	r3, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	b25a      	sxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3304      	adds	r3, #4
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
    r += 5;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3305      	adds	r3, #5
 8008120:	607b      	str	r3, [r7, #4]
  for(i=0;i<KYBER_N/8;i++) {
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	3301      	adds	r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b1f      	cmp	r3, #31
 800812c:	f67f af7a 	bls.w	8008024 <pqcrystals_kyber1024_ref_poly_compress+0x10>
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	3724      	adds	r7, #36	; 0x24
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	3afb7681 	.word	0x3afb7681

08008144 <pqcrystals_kyber1024_ref_poly_decompress>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
**************************************************/
void poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES])
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
    a += 1;
  }
#elif (KYBER_POLYCOMPRESSEDBYTES == 160)
  unsigned int j;
  uint8_t t[8];
  for(i=0;i<KYBER_N/8;i++) {
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	e073      	b.n	800823c <pqcrystals_kyber1024_ref_poly_decompress+0xf8>
    t[0] = (a[0] >> 0);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	723b      	strb	r3, [r7, #8]
    t[1] = (a[0] >> 5) | (a[1] << 3);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	b2db      	uxtb	r3, r3
 8008162:	b25a      	sxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	b25b      	sxtb	r3, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	b25b      	sxtb	r3, r3
 8008172:	b2db      	uxtb	r3, r3
 8008174:	727b      	strb	r3, [r7, #9]
    t[2] = (a[1] >> 2);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	3301      	adds	r3, #1
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	089b      	lsrs	r3, r3, #2
 800817e:	b2db      	uxtb	r3, r3
 8008180:	72bb      	strb	r3, [r7, #10]
    t[3] = (a[1] >> 7) | (a[2] << 1);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	09db      	lsrs	r3, r3, #7
 800818a:	b2db      	uxtb	r3, r3
 800818c:	b25a      	sxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	3302      	adds	r3, #2
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b25b      	sxtb	r3, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	b25b      	sxtb	r3, r3
 800819c:	b2db      	uxtb	r3, r3
 800819e:	72fb      	strb	r3, [r7, #11]
    t[4] = (a[2] >> 4) | (a[3] << 4);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	3302      	adds	r3, #2
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	b25a      	sxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	3303      	adds	r3, #3
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	4313      	orrs	r3, r2
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	733b      	strb	r3, [r7, #12]
    t[5] = (a[3] >> 1);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	3303      	adds	r3, #3
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	737b      	strb	r3, [r7, #13]
    t[6] = (a[3] >> 6) | (a[4] << 2);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	3303      	adds	r3, #3
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	b25a      	sxtb	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	3304      	adds	r3, #4
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	b25b      	sxtb	r3, r3
 80081e0:	4313      	orrs	r3, r2
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	73bb      	strb	r3, [r7, #14]
    t[7] = (a[4] >> 3);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	3304      	adds	r3, #4
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	08db      	lsrs	r3, r3, #3
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	73fb      	strb	r3, [r7, #15]
    a += 5;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	3305      	adds	r3, #5
 80081f8:	603b      	str	r3, [r7, #0]

    for(j=0;j<8;j++)
 80081fa:	2300      	movs	r3, #0
 80081fc:	613b      	str	r3, [r7, #16]
 80081fe:	e017      	b.n	8008230 <pqcrystals_kyber1024_ref_poly_decompress+0xec>
      r->coeffs[8*i+j] = ((uint32_t)(t[j] & 31)*KYBER_Q + 16) >> 5;
 8008200:	f107 0208 	add.w	r2, r7, #8
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	4413      	add	r3, r2
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	f640 5201 	movw	r2, #3329	; 0xd01
 8008212:	fb02 f303 	mul.w	r3, r2, r3
 8008216:	3310      	adds	r3, #16
 8008218:	0959      	lsrs	r1, r3, #5
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	00da      	lsls	r2, r3, #3
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	441a      	add	r2, r3
 8008222:	b209      	sxth	r1, r1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<8;j++)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3301      	adds	r3, #1
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2b07      	cmp	r3, #7
 8008234:	d9e4      	bls.n	8008200 <pqcrystals_kyber1024_ref_poly_decompress+0xbc>
  for(i=0;i<KYBER_N/8;i++) {
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	3301      	adds	r3, #1
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b1f      	cmp	r3, #31
 8008240:	d988      	bls.n	8008154 <pqcrystals_kyber1024_ref_poly_decompress+0x10>
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8008242:	bf00      	nop
 8008244:	bf00      	nop
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <pqcrystals_kyber1024_ref_poly_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYBYTES bytes)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint16_t t0, t1;

  for(i=0;i<KYBER_N/2;i++) {
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	e04e      	b.n	80082fe <pqcrystals_kyber1024_ref_poly_tobytes+0xae>
    // map to positive standard representatives
    t0  = a->coeffs[2*i];
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	005a      	lsls	r2, r3, #1
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800826a:	817b      	strh	r3, [r7, #10]
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 800826c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008270:	13db      	asrs	r3, r3, #15
 8008272:	b21b      	sxth	r3, r3
 8008274:	b29a      	uxth	r2, r3
 8008276:	f640 5301 	movw	r3, #3329	; 0xd01
 800827a:	4013      	ands	r3, r2
 800827c:	b29a      	uxth	r2, r3
 800827e:	897b      	ldrh	r3, [r7, #10]
 8008280:	4413      	add	r3, r2
 8008282:	817b      	strh	r3, [r7, #10]
    t1 = a->coeffs[2*i+1];
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008290:	813b      	strh	r3, [r7, #8]
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 8008292:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008296:	13db      	asrs	r3, r3, #15
 8008298:	b21b      	sxth	r3, r3
 800829a:	b29a      	uxth	r2, r3
 800829c:	f640 5301 	movw	r3, #3329	; 0xd01
 80082a0:	4013      	ands	r3, r2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	893b      	ldrh	r3, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	813b      	strh	r3, [r7, #8]
    r[3*i+0] = (t0 >> 0);
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4613      	mov	r3, r2
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	4413      	add	r3, r2
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	897a      	ldrh	r2, [r7, #10]
 80082b8:	b2d2      	uxtb	r2, r2
 80082ba:	701a      	strb	r2, [r3, #0]
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 80082bc:	897b      	ldrh	r3, [r7, #10]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	b25a      	sxtb	r2, r3
 80082c4:	893b      	ldrh	r3, [r7, #8]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b259      	sxtb	r1, r3
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4613      	mov	r3, r2
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	4413      	add	r3, r2
 80082d6:	3301      	adds	r3, #1
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	4413      	add	r3, r2
 80082dc:	b2ca      	uxtb	r2, r1
 80082de:	701a      	strb	r2, [r3, #0]
    r[3*i+2] = (t1 >> 4);
 80082e0:	893b      	ldrh	r3, [r7, #8]
 80082e2:	091b      	lsrs	r3, r3, #4
 80082e4:	b299      	uxth	r1, r3
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4613      	mov	r3, r2
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	4413      	add	r3, r2
 80082ee:	3302      	adds	r3, #2
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	b2ca      	uxtb	r2, r1
 80082f6:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_N/2;i++) {
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b7f      	cmp	r3, #127	; 0x7f
 8008302:	d9ad      	bls.n	8008260 <pqcrystals_kyber1024_ref_poly_tobytes+0x10>
  }
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <pqcrystals_kyber1024_ref_poly_frombytes>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e03e      	b.n	80083a0 <pqcrystals_kyber1024_ref_poly_frombytes+0x8e>
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4613      	mov	r3, r2
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	4413      	add	r3, r2
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	4413      	add	r3, r2
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b219      	sxth	r1, r3
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4613      	mov	r3, r2
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	4413      	add	r3, r2
 800833a:	3301      	adds	r3, #1
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	b21b      	sxth	r3, r3
 8008346:	430b      	orrs	r3, r1
 8008348:	b21b      	sxth	r3, r3
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	0052      	lsls	r2, r2, #1
 800834e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008352:	b219      	sxth	r1, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4613      	mov	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4413      	add	r3, r2
 8008362:	3301      	adds	r3, #1
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	4413      	add	r3, r2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	091b      	lsrs	r3, r3, #4
 800836c:	b2db      	uxtb	r3, r3
 800836e:	b219      	sxth	r1, r3
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4613      	mov	r3, r2
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	4413      	add	r3, r2
 8008378:	3302      	adds	r3, #2
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4413      	add	r3, r2
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	011b      	lsls	r3, r3, #4
 8008382:	b21b      	sxth	r3, r3
 8008384:	430b      	orrs	r3, r1
 8008386:	b21b      	sxth	r3, r3
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	0052      	lsls	r2, r2, #1
 800838c:	3201      	adds	r2, #1
 800838e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008392:	b219      	sxth	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N/2;i++) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b7f      	cmp	r3, #127	; 0x7f
 80083a4:	d9bd      	bls.n	8008322 <pqcrystals_kyber1024_ref_poly_frombytes+0x10>
  }
}
 80083a6:	bf00      	nop
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <pqcrystals_kyber1024_ref_poly_frommsg>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *msg: pointer to input message
**************************************************/
void poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES])
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]

#if (KYBER_INDCPA_MSGBYTES != KYBER_N/8)
#error "KYBER_INDCPA_MSGBYTES must be equal to KYBER_N/8 bytes!"
#endif

  for(i=0;i<KYBER_N/8;i++) {
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e027      	b.n	8008414 <pqcrystals_kyber1024_ref_poly_frommsg+0x60>
    for(j=0;j<8;j++) {
 80083c4:	2300      	movs	r3, #0
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e01e      	b.n	8008408 <pqcrystals_kyber1024_ref_poly_frommsg+0x54>
      mask = -(int16_t)((msg[i] >> j)&1);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	fa42 f303 	asr.w	r3, r2, r3
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	425b      	negs	r3, r3
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	81fb      	strh	r3, [r7, #14]
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	00da      	lsls	r2, r3, #3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	441a      	add	r2, r3
 80083f0:	89fb      	ldrh	r3, [r7, #14]
 80083f2:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
 80083f6:	055b      	lsls	r3, r3, #21
 80083f8:	0d5b      	lsrs	r3, r3, #21
 80083fa:	b219      	sxth	r1, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<8;j++) {
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	3301      	adds	r3, #1
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	2b07      	cmp	r3, #7
 800840c:	d9dd      	bls.n	80083ca <pqcrystals_kyber1024_ref_poly_frommsg+0x16>
  for(i=0;i<KYBER_N/8;i++) {
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b1f      	cmp	r3, #31
 8008418:	d9d4      	bls.n	80083c4 <pqcrystals_kyber1024_ref_poly_frommsg+0x10>
    }
  }
}
 800841a:	bf00      	nop
 800841c:	bf00      	nop
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <pqcrystals_kyber1024_ref_poly_tomsg>:
*
* Arguments:   - uint8_t *msg: pointer to output message
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint16_t t;

  for(i=0;i<KYBER_N/8;i++) {
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e044      	b.n	80084c2 <pqcrystals_kyber1024_ref_poly_tomsg+0x9a>
    msg[i] = 0;
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	4413      	add	r3, r2
 800843e:	2200      	movs	r2, #0
 8008440:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	e036      	b.n	80084b6 <pqcrystals_kyber1024_ref_poly_tomsg+0x8e>
      t  = a->coeffs[8*i+j];
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	00da      	lsls	r2, r3, #3
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	441a      	add	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008456:	81fb      	strh	r3, [r7, #14]
      t += ((int16_t)t >> 15) & KYBER_Q;
 8008458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800845c:	13db      	asrs	r3, r3, #15
 800845e:	b21b      	sxth	r3, r3
 8008460:	b29a      	uxth	r2, r3
 8008462:	f640 5301 	movw	r3, #3329	; 0xd01
 8008466:	4013      	ands	r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	89fb      	ldrh	r3, [r7, #14]
 800846c:	4413      	add	r3, r2
 800846e:	81fb      	strh	r3, [r7, #14]
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	005b      	lsls	r3, r3, #1
 8008474:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8008478:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <pqcrystals_kyber1024_ref_poly_tomsg+0xb0>)
 800847a:	fb82 1203 	smull	r1, r2, r2, r3
 800847e:	441a      	add	r2, r3
 8008480:	12d2      	asrs	r2, r2, #11
 8008482:	17db      	asrs	r3, r3, #31
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	b29b      	uxth	r3, r3
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	81fb      	strh	r3, [r7, #14]
      msg[i] |= t << j;
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	4413      	add	r3, r2
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b25a      	sxtb	r2, r3
 8008498:	89f9      	ldrh	r1, [r7, #14]
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	fa01 f303 	lsl.w	r3, r1, r3
 80084a0:	b25b      	sxtb	r3, r3
 80084a2:	4313      	orrs	r3, r2
 80084a4:	b259      	sxtb	r1, r3
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	4413      	add	r3, r2
 80084ac:	b2ca      	uxtb	r2, r1
 80084ae:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3301      	adds	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	d9c5      	bls.n	8008448 <pqcrystals_kyber1024_ref_poly_tomsg+0x20>
  for(i=0;i<KYBER_N/8;i++) {
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3301      	adds	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b1f      	cmp	r3, #31
 80084c6:	d9b7      	bls.n	8008438 <pqcrystals_kyber1024_ref_poly_tomsg+0x10>
    }
  }
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	9d7dbb41 	.word	0x9d7dbb41

080084dc <pqcrystals_kyber1024_ref_poly_getnoise_eta1>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b0a4      	sub	sp, #144	; 0x90
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	4613      	mov	r3, r2
 80084e8:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[KYBER_ETA1*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	f107 0010 	add.w	r0, r7, #16
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	f000 fd6b 	bl	8008fce <pqcrystals_kyber1024_ref_kyber_shake256_prf>
  poly_cbd_eta1(r, buf);
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	4619      	mov	r1, r3
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7fb fabf 	bl	8003a82 <pqcrystals_kyber1024_ref_poly_cbd_eta1>
}
 8008504:	bf00      	nop
 8008506:	3790      	adds	r7, #144	; 0x90
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <pqcrystals_kyber1024_ref_poly_getnoise_eta2>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b0a4      	sub	sp, #144	; 0x90
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[KYBER_ETA2*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	f107 0010 	add.w	r0, r7, #16
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	f000 fd53 	bl	8008fce <pqcrystals_kyber1024_ref_kyber_shake256_prf>
  poly_cbd_eta2(r, buf);
 8008528:	f107 0310 	add.w	r3, r7, #16
 800852c:	4619      	mov	r1, r3
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7fb fab4 	bl	8003a9c <pqcrystals_kyber1024_ref_poly_cbd_eta2>
}
 8008534:	bf00      	nop
 8008536:	3790      	adds	r7, #144	; 0x90
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <pqcrystals_kyber1024_ref_poly_ntt>:
*              inputs assumed to be in normal order, output in bitreversed order
*
* Arguments:   - uint16_t *r: pointer to in/output polynomial
**************************************************/
void poly_ntt(poly *r)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  ntt(r->coeffs);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fc02 	bl	8007d50 <pqcrystals_kyber1024_ref_ntt>
  poly_reduce(r);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f882 	bl	8008656 <pqcrystals_kyber1024_ref_poly_reduce>
}
 8008552:	bf00      	nop
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <pqcrystals_kyber1024_ref_poly_invntt_tomont>:
*              inputs assumed to be in bitreversed order, output in normal order
*
* Arguments:   - uint16_t *a: pointer to in/output polynomial
**************************************************/
void poly_invntt_tomont(poly *r)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  invntt(r->coeffs);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff fc59 	bl	8007e1c <pqcrystals_kyber1024_ref_invntt>
}
 800856a:	bf00      	nop
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <pqcrystals_kyber1024_ref_poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e035      	b.n	80085f2 <pqcrystals_kyber1024_ref_poly_basemul_montgomery+0x7e>
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	18d0      	adds	r0, r2, r3
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	18d1      	adds	r1, r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	441a      	add	r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	3340      	adds	r3, #64	; 0x40
 80085a8:	4c16      	ldr	r4, [pc, #88]	; (8008604 <pqcrystals_kyber1024_ref_poly_basemul_montgomery+0x90>)
 80085aa:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80085ae:	f7ff fccb 	bl	8007f48 <pqcrystals_kyber1024_ref_basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3302      	adds	r3, #2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	18d0      	adds	r0, r2, r3
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	3302      	adds	r3, #2
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	18d1      	adds	r1, r2, r3
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	3302      	adds	r3, #2
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	441a      	add	r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	3340      	adds	r3, #64	; 0x40
 80085da:	4c0a      	ldr	r4, [pc, #40]	; (8008604 <pqcrystals_kyber1024_ref_poly_basemul_montgomery+0x90>)
 80085dc:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	425b      	negs	r3, r3
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	f7ff fcae 	bl	8007f48 <pqcrystals_kyber1024_ref_basemul>
  for(i=0;i<KYBER_N/4;i++) {
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	3301      	adds	r3, #1
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b3f      	cmp	r3, #63	; 0x3f
 80085f6:	d9c6      	bls.n	8008586 <pqcrystals_kyber1024_ref_poly_basemul_montgomery+0x12>
  }
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd90      	pop	{r4, r7, pc}
 8008602:	bf00      	nop
 8008604:	0800aa50 	.word	0x0800aa50

08008608 <pqcrystals_kyber1024_ref_poly_tomont>:
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_tomont(poly *r)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  unsigned int i;
  const int16_t f = (1ULL << 32) % KYBER_Q;
 8008610:	f240 5349 	movw	r3, #1353	; 0x549
 8008614:	817b      	strh	r3, [r7, #10]
  for(i=0;i<KYBER_N;i++)
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
 800861a:	e014      	b.n	8008646 <pqcrystals_kyber1024_ref_poly_tomont+0x3e>
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008624:	461a      	mov	r2, r3
 8008626:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800862a:	fb03 f302 	mul.w	r3, r3, r2
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fb4e 	bl	8008cd0 <pqcrystals_kyber1024_ref_montgomery_reduce>
 8008634:	4603      	mov	r3, r0
 8008636:	4619      	mov	r1, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2bff      	cmp	r3, #255	; 0xff
 800864a:	d9e7      	bls.n	800861c <pqcrystals_kyber1024_ref_poly_tomont+0x14>
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <pqcrystals_kyber1024_ref_poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	e00f      	b.n	8008684 <pqcrystals_kyber1024_ref_poly_reduce+0x2e>
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fb58 	bl	8008d22 <pqcrystals_kyber1024_ref_barrett_reduce>
 8008672:	4603      	mov	r3, r0
 8008674:	4619      	mov	r1, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2bff      	cmp	r3, #255	; 0xff
 8008688:	d9ec      	bls.n	8008664 <pqcrystals_kyber1024_ref_poly_reduce+0xe>
}
 800868a:	bf00      	nop
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <pqcrystals_kyber1024_ref_poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	e013      	b.n	80086ce <pqcrystals_kyber1024_ref_poly_add+0x3a>
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6979      	ldr	r1, [r7, #20]
 80086b4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	b29b      	uxth	r3, r3
 80086be:	b219      	sxth	r1, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	3301      	adds	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2bff      	cmp	r3, #255	; 0xff
 80086d2:	d9e8      	bls.n	80086a6 <pqcrystals_kyber1024_ref_poly_add+0x12>
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <pqcrystals_kyber1024_ref_poly_sub>:
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_sub(poly *r, const poly *a, const poly *b)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e013      	b.n	800871c <pqcrystals_kyber1024_ref_poly_sub+0x3a>
    r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6979      	ldr	r1, [r7, #20]
 8008702:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8008706:	b29b      	uxth	r3, r3
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	b29b      	uxth	r3, r3
 800870c:	b219      	sxth	r1, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	3301      	adds	r3, #1
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2bff      	cmp	r3, #255	; 0xff
 8008720:	d9e8      	bls.n	80086f4 <pqcrystals_kyber1024_ref_poly_sub+0x12>
}
 8008722:	bf00      	nop
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <pqcrystals_kyber1024_ref_polyvec_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a)
{
 8008730:	b480      	push	{r7}
 8008732:	b08b      	sub	sp, #44	; 0x2c
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  unsigned int i,j,k;

#if (KYBER_POLYVECCOMPRESSEDBYTES == (KYBER_K * 352))
  uint16_t t[8];
  for(i=0;i<KYBER_K;i++) {
 800873a:	2300      	movs	r3, #0
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
 800873e:	e0d9      	b.n	80088f4 <pqcrystals_kyber1024_ref_polyvec_compress+0x1c4>
    for(j=0;j<KYBER_N/8;j++) {
 8008740:	2300      	movs	r3, #0
 8008742:	623b      	str	r3, [r7, #32]
 8008744:	e0cf      	b.n	80088e6 <pqcrystals_kyber1024_ref_polyvec_compress+0x1b6>
      for(k=0;k<8;k++) {
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	e04f      	b.n	80087ec <pqcrystals_kyber1024_ref_polyvec_compress+0xbc>
        t[k]  = a->vec[i].coeffs[8*j+k];
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	00da      	lsls	r2, r3, #3
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	441a      	add	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008758:	0209      	lsls	r1, r1, #8
 800875a:	440a      	add	r2, r1
 800875c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008760:	b29a      	uxth	r2, r3
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	005b      	lsls	r3, r3, #1
 8008766:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800876a:	440b      	add	r3, r1
 800876c:	f823 2c1c 	strh.w	r2, [r3, #-28]
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008778:	4413      	add	r3, r2
 800877a:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	005b      	lsls	r3, r3, #1
 8008782:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008786:	440b      	add	r3, r1
 8008788:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800878c:	b21b      	sxth	r3, r3
 800878e:	13db      	asrs	r3, r3, #15
 8008790:	b21b      	sxth	r3, r3
 8008792:	b299      	uxth	r1, r3
 8008794:	f640 5301 	movw	r3, #3329	; 0xd01
 8008798:	400b      	ands	r3, r1
 800879a:	b29b      	uxth	r3, r3
 800879c:	4413      	add	r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80087a8:	440b      	add	r3, r1
 80087aa:	f823 2c1c 	strh.w	r2, [r3, #-28]
        t[k]  = ((((uint32_t)t[k] << 11) + KYBER_Q/2)/KYBER_Q) & 0x7ff;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80087b6:	4413      	add	r3, r2
 80087b8:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80087bc:	02db      	lsls	r3, r3, #11
 80087be:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
 80087c2:	4b52      	ldr	r3, [pc, #328]	; (800890c <pqcrystals_kyber1024_ref_polyvec_compress+0x1dc>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	0852      	lsrs	r2, r2, #1
 80087cc:	4413      	add	r3, r2
 80087ce:	0adb      	lsrs	r3, r3, #11
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	005b      	lsls	r3, r3, #1
 80087dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80087e0:	440b      	add	r3, r1
 80087e2:	f823 2c1c 	strh.w	r2, [r3, #-28]
      for(k=0;k<8;k++) {
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	3301      	adds	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	2b07      	cmp	r3, #7
 80087f0:	d9ac      	bls.n	800874c <pqcrystals_kyber1024_ref_polyvec_compress+0x1c>
      }

      r[ 0] = (t[0] >>  0);
 80087f2:	89bb      	ldrh	r3, [r7, #12]
 80087f4:	b2da      	uxtb	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	701a      	strb	r2, [r3, #0]
      r[ 1] = (t[0] >>  8) | (t[1] << 3);
 80087fa:	89bb      	ldrh	r3, [r7, #12]
 80087fc:	0a1b      	lsrs	r3, r3, #8
 80087fe:	b29b      	uxth	r3, r3
 8008800:	b25a      	sxtb	r2, r3
 8008802:	89fb      	ldrh	r3, [r7, #14]
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	b25b      	sxtb	r3, r3
 8008808:	4313      	orrs	r3, r2
 800880a:	b25a      	sxtb	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3301      	adds	r3, #1
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
      r[ 2] = (t[1] >>  5) | (t[2] << 6);
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	095b      	lsrs	r3, r3, #5
 8008818:	b29b      	uxth	r3, r3
 800881a:	b25a      	sxtb	r2, r3
 800881c:	8a3b      	ldrh	r3, [r7, #16]
 800881e:	019b      	lsls	r3, r3, #6
 8008820:	b25b      	sxtb	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	b25a      	sxtb	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3302      	adds	r3, #2
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]
      r[ 3] = (t[2] >>  2);
 800882e:	8a3b      	ldrh	r3, [r7, #16]
 8008830:	089b      	lsrs	r3, r3, #2
 8008832:	b29a      	uxth	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3303      	adds	r3, #3
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	701a      	strb	r2, [r3, #0]
      r[ 4] = (t[2] >> 10) | (t[3] << 1);
 800883c:	8a3b      	ldrh	r3, [r7, #16]
 800883e:	0a9b      	lsrs	r3, r3, #10
 8008840:	b29b      	uxth	r3, r3
 8008842:	b25a      	sxtb	r2, r3
 8008844:	8a7b      	ldrh	r3, [r7, #18]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	b25b      	sxtb	r3, r3
 800884a:	4313      	orrs	r3, r2
 800884c:	b25a      	sxtb	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
      r[ 5] = (t[3] >>  7) | (t[4] << 4);
 8008856:	8a7b      	ldrh	r3, [r7, #18]
 8008858:	09db      	lsrs	r3, r3, #7
 800885a:	b29b      	uxth	r3, r3
 800885c:	b25a      	sxtb	r2, r3
 800885e:	8abb      	ldrh	r3, [r7, #20]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	b25b      	sxtb	r3, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	b25a      	sxtb	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3305      	adds	r3, #5
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	701a      	strb	r2, [r3, #0]
      r[ 6] = (t[4] >>  4) | (t[5] << 7);
 8008870:	8abb      	ldrh	r3, [r7, #20]
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	b29b      	uxth	r3, r3
 8008876:	b25a      	sxtb	r2, r3
 8008878:	8afb      	ldrh	r3, [r7, #22]
 800887a:	01db      	lsls	r3, r3, #7
 800887c:	b25b      	sxtb	r3, r3
 800887e:	4313      	orrs	r3, r2
 8008880:	b25a      	sxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	3306      	adds	r3, #6
 8008886:	b2d2      	uxtb	r2, r2
 8008888:	701a      	strb	r2, [r3, #0]
      r[ 7] = (t[5] >>  1);
 800888a:	8afb      	ldrh	r3, [r7, #22]
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3307      	adds	r3, #7
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	701a      	strb	r2, [r3, #0]
      r[ 8] = (t[5] >>  9) | (t[6] << 2);
 8008898:	8afb      	ldrh	r3, [r7, #22]
 800889a:	0a5b      	lsrs	r3, r3, #9
 800889c:	b29b      	uxth	r3, r3
 800889e:	b25a      	sxtb	r2, r3
 80088a0:	8b3b      	ldrh	r3, [r7, #24]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	b25a      	sxtb	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	3308      	adds	r3, #8
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]
      r[ 9] = (t[6] >>  6) | (t[7] << 5);
 80088b2:	8b3b      	ldrh	r3, [r7, #24]
 80088b4:	099b      	lsrs	r3, r3, #6
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	b25a      	sxtb	r2, r3
 80088ba:	8b7b      	ldrh	r3, [r7, #26]
 80088bc:	015b      	lsls	r3, r3, #5
 80088be:	b25b      	sxtb	r3, r3
 80088c0:	4313      	orrs	r3, r2
 80088c2:	b25a      	sxtb	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3309      	adds	r3, #9
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]
      r[10] = (t[7] >>  3);
 80088cc:	8b7b      	ldrh	r3, [r7, #26]
 80088ce:	08db      	lsrs	r3, r3, #3
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	330a      	adds	r3, #10
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
      r += 11;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	330b      	adds	r3, #11
 80088de:	607b      	str	r3, [r7, #4]
    for(j=0;j<KYBER_N/8;j++) {
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	3301      	adds	r3, #1
 80088e4:	623b      	str	r3, [r7, #32]
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	2b1f      	cmp	r3, #31
 80088ea:	f67f af2c 	bls.w	8008746 <pqcrystals_kyber1024_ref_polyvec_compress+0x16>
  for(i=0;i<KYBER_K;i++) {
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	3301      	adds	r3, #1
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	f67f af22 	bls.w	8008740 <pqcrystals_kyber1024_ref_polyvec_compress+0x10>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	372c      	adds	r7, #44	; 0x2c
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	3afb7681 	.word	0x3afb7681

08008910 <pqcrystals_kyber1024_ref_polyvec_decompress>:
* Arguments:   - polyvec *r:       pointer to output vector of polynomials
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
**************************************************/
void polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES])
{
 8008910:	b480      	push	{r7}
 8008912:	b08b      	sub	sp, #44	; 0x2c
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  unsigned int i,j,k;

#if (KYBER_POLYVECCOMPRESSEDBYTES == (KYBER_K * 352))
  uint16_t t[8];
  for(i=0;i<KYBER_K;i++) {
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
 800891e:	e0b7      	b.n	8008a90 <pqcrystals_kyber1024_ref_polyvec_decompress+0x180>
    for(j=0;j<KYBER_N/8;j++) {
 8008920:	2300      	movs	r3, #0
 8008922:	623b      	str	r3, [r7, #32]
 8008924:	e0ad      	b.n	8008a82 <pqcrystals_kyber1024_ref_polyvec_decompress+0x172>
      t[0] = (a[0] >> 0) | ((uint16_t)a[ 1] << 8);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b21a      	sxth	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	b21b      	sxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b21b      	sxth	r3, r3
 800893a:	b29b      	uxth	r3, r3
 800893c:	81bb      	strh	r3, [r7, #12]
      t[1] = (a[1] >> 3) | ((uint16_t)a[ 2] << 5);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	3301      	adds	r3, #1
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	b2db      	uxtb	r3, r3
 8008948:	b21a      	sxth	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	3302      	adds	r3, #2
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	015b      	lsls	r3, r3, #5
 8008952:	b21b      	sxth	r3, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	b21b      	sxth	r3, r3
 8008958:	b29b      	uxth	r3, r3
 800895a:	81fb      	strh	r3, [r7, #14]
      t[2] = (a[2] >> 6) | ((uint16_t)a[ 3] << 2) | ((uint16_t)a[4] << 10);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	3302      	adds	r3, #2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	099b      	lsrs	r3, r3, #6
 8008964:	b2db      	uxtb	r3, r3
 8008966:	b21a      	sxth	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	3303      	adds	r3, #3
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	b21b      	sxth	r3, r3
 8008972:	4313      	orrs	r3, r2
 8008974:	b21a      	sxth	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	3304      	adds	r3, #4
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	029b      	lsls	r3, r3, #10
 800897e:	b21b      	sxth	r3, r3
 8008980:	4313      	orrs	r3, r2
 8008982:	b21b      	sxth	r3, r3
 8008984:	b29b      	uxth	r3, r3
 8008986:	823b      	strh	r3, [r7, #16]
      t[3] = (a[4] >> 1) | ((uint16_t)a[ 5] << 7);
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	b2db      	uxtb	r3, r3
 8008992:	b21a      	sxth	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	3305      	adds	r3, #5
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	01db      	lsls	r3, r3, #7
 800899c:	b21b      	sxth	r3, r3
 800899e:	4313      	orrs	r3, r2
 80089a0:	b21b      	sxth	r3, r3
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	827b      	strh	r3, [r7, #18]
      t[4] = (a[5] >> 4) | ((uint16_t)a[ 6] << 4);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	3305      	adds	r3, #5
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	091b      	lsrs	r3, r3, #4
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	b21a      	sxth	r2, r3
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	3306      	adds	r3, #6
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	011b      	lsls	r3, r3, #4
 80089ba:	b21b      	sxth	r3, r3
 80089bc:	4313      	orrs	r3, r2
 80089be:	b21b      	sxth	r3, r3
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	82bb      	strh	r3, [r7, #20]
      t[5] = (a[6] >> 7) | ((uint16_t)a[ 7] << 1) | ((uint16_t)a[8] << 9);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3306      	adds	r3, #6
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	09db      	lsrs	r3, r3, #7
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	b21a      	sxth	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3307      	adds	r3, #7
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	b21b      	sxth	r3, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	b21a      	sxth	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3308      	adds	r3, #8
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	025b      	lsls	r3, r3, #9
 80089e6:	b21b      	sxth	r3, r3
 80089e8:	4313      	orrs	r3, r2
 80089ea:	b21b      	sxth	r3, r3
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	82fb      	strh	r3, [r7, #22]
      t[6] = (a[8] >> 2) | ((uint16_t)a[ 9] << 6);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	b21a      	sxth	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	3309      	adds	r3, #9
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	019b      	lsls	r3, r3, #6
 8008a04:	b21b      	sxth	r3, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	833b      	strh	r3, [r7, #24]
      t[7] = (a[9] >> 5) | ((uint16_t)a[10] << 3);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3309      	adds	r3, #9
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	b21a      	sxth	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	330a      	adds	r3, #10
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	00db      	lsls	r3, r3, #3
 8008a22:	b21b      	sxth	r3, r3
 8008a24:	4313      	orrs	r3, r2
 8008a26:	b21b      	sxth	r3, r3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	837b      	strh	r3, [r7, #26]
      a += 11;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	330b      	adds	r3, #11
 8008a30:	603b      	str	r3, [r7, #0]

      for(k=0;k<8;k++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
 8008a36:	e01e      	b.n	8008a76 <pqcrystals_kyber1024_ref_polyvec_decompress+0x166>
        r->vec[i].coeffs[8*j+k] = ((uint32_t)(t[k] & 0x7FF)*KYBER_Q + 1024) >> 11;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008a40:	4413      	add	r3, r2
 8008a42:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8008a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a4a:	f640 5201 	movw	r2, #3329	; 0xd01
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
 8008a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a56:	0ad9      	lsrs	r1, r3, #11
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	00da      	lsls	r2, r3, #3
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	441a      	add	r2, r3
 8008a60:	b208      	sxth	r0, r1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a66:	0209      	lsls	r1, r1, #8
 8008a68:	440a      	add	r2, r1
 8008a6a:	4601      	mov	r1, r0
 8008a6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(k=0;k<8;k++)
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	3301      	adds	r3, #1
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b07      	cmp	r3, #7
 8008a7a:	d9dd      	bls.n	8008a38 <pqcrystals_kyber1024_ref_polyvec_decompress+0x128>
    for(j=0;j<KYBER_N/8;j++) {
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	2b1f      	cmp	r3, #31
 8008a86:	f67f af4e 	bls.w	8008926 <pqcrystals_kyber1024_ref_polyvec_decompress+0x16>
  for(i=0;i<KYBER_K;i++) {
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	f67f af44 	bls.w	8008920 <pqcrystals_kyber1024_ref_polyvec_decompress+0x10>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	372c      	adds	r7, #44	; 0x2c
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <pqcrystals_kyber1024_ref_polyvec_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	e011      	b.n	8008ada <pqcrystals_kyber1024_ref_polyvec_tobytes+0x34>
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	4413      	add	r3, r2
 8008abe:	01db      	lsls	r3, r3, #7
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	1898      	adds	r0, r3, r2
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	025b      	lsls	r3, r3, #9
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	4413      	add	r3, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f7ff fbbe 	bl	8008250 <pqcrystals_kyber1024_ref_poly_tobytes>
  for(i=0;i<KYBER_K;i++)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b03      	cmp	r3, #3
 8008ade:	d9ea      	bls.n	8008ab6 <pqcrystals_kyber1024_ref_polyvec_tobytes+0x10>
}
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <pqcrystals_kyber1024_ref_polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]
 8008af8:	e011      	b.n	8008b1e <pqcrystals_kyber1024_ref_polyvec_frombytes+0x34>
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	025b      	lsls	r3, r3, #9
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	18d0      	adds	r0, r2, r3
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4613      	mov	r3, r2
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	4413      	add	r3, r2
 8008b0a:	01db      	lsls	r3, r3, #7
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	4413      	add	r3, r2
 8008b12:	4619      	mov	r1, r3
 8008b14:	f7ff fbfd 	bl	8008312 <pqcrystals_kyber1024_ref_poly_frombytes>
  for(i=0;i<KYBER_K;i++)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d9ea      	bls.n	8008afa <pqcrystals_kyber1024_ref_polyvec_frombytes+0x10>
}
 8008b24:	bf00      	nop
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <pqcrystals_kyber1024_ref_polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e009      	b.n	8008b50 <pqcrystals_kyber1024_ref_polyvec_ntt+0x22>
    poly_ntt(&r->vec[i]);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	025b      	lsls	r3, r3, #9
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fcf9 	bl	800853c <pqcrystals_kyber1024_ref_poly_ntt>
  for(i=0;i<KYBER_K;i++)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d9f2      	bls.n	8008b3c <pqcrystals_kyber1024_ref_polyvec_ntt+0xe>
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <pqcrystals_kyber1024_ref_polyvec_invntt_tomont>:
*              and multiply by Montgomery factor 2^16
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_invntt_tomont(polyvec *r)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e009      	b.n	8008b82 <pqcrystals_kyber1024_ref_polyvec_invntt_tomont+0x22>
    poly_invntt_tomont(&r->vec[i]);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	025b      	lsls	r3, r3, #9
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4413      	add	r3, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fcef 	bl	800855a <pqcrystals_kyber1024_ref_poly_invntt_tomont>
  for(i=0;i<KYBER_K;i++)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d9f2      	bls.n	8008b6e <pqcrystals_kyber1024_ref_polyvec_invntt_tomont+0xe>
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	f107 030c 	add.w	r3, r7, #12
 8008b9e:	6018      	str	r0, [r3, #0]
 8008ba0:	f107 0308 	add.w	r3, r7, #8
 8008ba4:	6019      	str	r1, [r3, #0]
 8008ba6:	1d3b      	adds	r3, r7, #4
 8008ba8:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 8008baa:	f107 0308 	add.w	r3, r7, #8
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	6818      	ldr	r0, [r3, #0]
 8008bba:	f7ff fcdb 	bl	8008574 <pqcrystals_kyber1024_ref_poly_basemul_montgomery>
  for(i=1;i<KYBER_K;i++) {
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008bc4:	e020      	b.n	8008c08 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery+0x76>
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8008bc6:	f107 0208 	add.w	r2, r7, #8
 8008bca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008bce:	025b      	lsls	r3, r3, #9
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	18d1      	adds	r1, r2, r3
 8008bd4:	1d3a      	adds	r2, r7, #4
 8008bd6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008bda:	025b      	lsls	r3, r3, #9
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	441a      	add	r2, r3
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff fcc5 	bl	8008574 <pqcrystals_kyber1024_ref_poly_basemul_montgomery>
    poly_add(r, r, &t);
 8008bea:	f107 0214 	add.w	r2, r7, #20
 8008bee:	f107 010c 	add.w	r1, r7, #12
 8008bf2:	f107 030c 	add.w	r3, r7, #12
 8008bf6:	6809      	ldr	r1, [r1, #0]
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	f7ff fd4b 	bl	8008694 <pqcrystals_kyber1024_ref_poly_add>
  for(i=1;i<KYBER_K;i++) {
 8008bfe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c02:	3301      	adds	r3, #1
 8008c04:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008c08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d9da      	bls.n	8008bc6 <pqcrystals_kyber1024_ref_polyvec_basemul_acc_montgomery+0x34>
  }

  poly_reduce(r);
 8008c10:	f107 030c 	add.w	r3, r7, #12
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	f7ff fd1e 	bl	8008656 <pqcrystals_kyber1024_ref_poly_reduce>
}
 8008c1a:	bf00      	nop
 8008c1c:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <pqcrystals_kyber1024_ref_polyvec_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void polyvec_reduce(polyvec *r)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	e009      	b.n	8008c46 <pqcrystals_kyber1024_ref_polyvec_reduce+0x22>
    poly_reduce(&r->vec[i]);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	025b      	lsls	r3, r3, #9
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff fd0b 	bl	8008656 <pqcrystals_kyber1024_ref_poly_reduce>
  for(i=0;i<KYBER_K;i++)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d9f2      	bls.n	8008c32 <pqcrystals_kyber1024_ref_polyvec_reduce+0xe>
}
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <pqcrystals_kyber1024_ref_polyvec_add>:
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b086      	sub	sp, #24
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e011      	b.n	8008c8c <pqcrystals_kyber1024_ref_polyvec_add+0x36>
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	025b      	lsls	r3, r3, #9
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	18d0      	adds	r0, r2, r3
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	025b      	lsls	r3, r3, #9
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	18d1      	adds	r1, r2, r3
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	025b      	lsls	r3, r3, #9
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	4413      	add	r3, r2
 8008c80:	461a      	mov	r2, r3
 8008c82:	f7ff fd07 	bl	8008694 <pqcrystals_kyber1024_ref_poly_add>
  for(i=0;i<KYBER_K;i++)
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d9ea      	bls.n	8008c68 <pqcrystals_kyber1024_ref_polyvec_add+0x12>
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <randombytes>:
    out += ret;
    outlen -= ret;
  }
}
#else
void randombytes(uint8_t *out, size_t outlen) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]

    out += ret;
    outlen -= ret;
  }
  */
  while(outlen > 0) {
 8008ca6:	e00b      	b.n	8008cc0 <randombytes+0x24>
    *out = (uint8_t)rand();
 8008ca8:	f000 fcf2 	bl	8009690 <rand>
 8008cac:	4603      	mov	r3, r0
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	701a      	strb	r2, [r3, #0]
    out++;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	607b      	str	r3, [r7, #4]
    outlen--;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	603b      	str	r3, [r7, #0]
  while(outlen > 0) {
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <randombytes+0xc>
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <pqcrystals_kyber1024_ref_montgomery_reduce>:
*                           has to be in {-q2^15,...,q2^15-1}
*
* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  int16_t t;

  t = (int16_t)a*QINV;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	0052      	lsls	r2, r2, #1
 8008ce0:	441a      	add	r2, r3
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	00c8      	lsls	r0, r1, #3
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4602      	mov	r2, r0
 8008cea:	440a      	add	r2, r1
 8008cec:	4611      	mov	r1, r2
 8008cee:	00c8      	lsls	r0, r1, #3
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	440a      	add	r2, r1
 8008cf6:	0212      	lsls	r2, r2, #8
 8008cf8:	4413      	add	r3, r2
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	81fb      	strh	r3, [r7, #14]
  t = (a - (int32_t)t*KYBER_Q) >> 16;
 8008cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d02:	f46f 6250 	mvn.w	r2, #3328	; 0xd00
 8008d06:	fb02 f203 	mul.w	r2, r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	141b      	asrs	r3, r3, #16
 8008d10:	81fb      	strh	r3, [r7, #14]
  return t;
 8008d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <pqcrystals_kyber1024_ref_barrett_reduce>:
*
* Arguments:   - int16_t a: input integer to be reduced
*
* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
**************************************************/
int16_t barrett_reduce(int16_t a) {
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	4603      	mov	r3, r0
 8008d2a:	80fb      	strh	r3, [r7, #6]
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;
 8008d2c:	f644 63bf 	movw	r3, #20159	; 0x4ebf
 8008d30:	81fb      	strh	r3, [r7, #14]

  t  = ((int32_t)v*a + (1<<25)) >> 26;
 8008d32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8008d42:	169b      	asrs	r3, r3, #26
 8008d44:	81bb      	strh	r3, [r7, #12]
  t *= KYBER_Q;
 8008d46:	89bb      	ldrh	r3, [r7, #12]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	0052      	lsls	r2, r2, #1
 8008d4c:	441a      	add	r2, r3
 8008d4e:	0092      	lsls	r2, r2, #2
 8008d50:	441a      	add	r2, r3
 8008d52:	0212      	lsls	r2, r2, #8
 8008d54:	4413      	add	r3, r2
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	81bb      	strh	r3, [r7, #12]
  return a - t;
 8008d5a:	88fa      	ldrh	r2, [r7, #6]
 8008d5c:	89bb      	ldrh	r3, [r7, #12]
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	b21b      	sxth	r3, r3
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <cmp_uint64>:
#include <stdlib.h>
#include <stdio.h>
#include "cpucycles.h"
#include "speed_print.h"

static int cmp_uint64(const void *a, const void *b) {
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  if(*(uint64_t *)a < *(uint64_t *)b) return -1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	4299      	cmp	r1, r3
 8008d88:	bf08      	it	eq
 8008d8a:	4290      	cmpeq	r0, r2
 8008d8c:	d202      	bcs.n	8008d94 <cmp_uint64+0x24>
 8008d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d92:	e00c      	b.n	8008dae <cmp_uint64+0x3e>
  if(*(uint64_t *)a > *(uint64_t *)b) return 1;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da0:	4299      	cmp	r1, r3
 8008da2:	bf08      	it	eq
 8008da4:	4290      	cmpeq	r0, r2
 8008da6:	d201      	bcs.n	8008dac <cmp_uint64+0x3c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <cmp_uint64+0x3e>
  return 0;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <median>:

static uint64_t median(uint64_t *l, size_t llen) {
 8008dbc:	b5b0      	push	{r4, r5, r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  qsort(l,llen,sizeof(uint64_t),cmp_uint64);
 8008dc6:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <median+0x74>)
 8008dc8:	2208      	movs	r2, #8
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fb0e 	bl	80093ee <qsort>

  if(llen%2) return l[llen/2];
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d007      	beq.n	8008dec <median+0x30>
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	e01b      	b.n	8008e24 <median+0x68>
  else return (l[llen/2-1]+l[llen/2])/2;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008df4:	3b01      	subs	r3, #1
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	085b      	lsrs	r3, r3, #1
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	4413      	add	r3, r2
 8008e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0e:	1884      	adds	r4, r0, r2
 8008e10:	eb41 0503 	adc.w	r5, r1, r3
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	f04f 0300 	mov.w	r3, #0
 8008e1c:	0862      	lsrs	r2, r4, #1
 8008e1e:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8008e22:	086b      	lsrs	r3, r5, #1
}
 8008e24:	4610      	mov	r0, r2
 8008e26:	4619      	mov	r1, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	08008d71 	.word	0x08008d71

08008e34 <average>:

static uint64_t average(uint64_t *t, size_t tlen) {
 8008e34:	b5b0      	push	{r4, r5, r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  size_t i;
  uint64_t acc=0;
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	e9c7 2302 	strd	r2, r3, [r7, #8]

  for(i=0;i<tlen;i++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
 8008e4e:	e00f      	b.n	8008e70 <average+0x3c>
    acc += t[i];
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	4413      	add	r3, r2
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e60:	1884      	adds	r4, r0, r2
 8008e62:	eb41 0503 	adc.w	r5, r1, r3
 8008e66:	e9c7 4502 	strd	r4, r5, [r7, #8]
  for(i=0;i<tlen;i++)
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d3eb      	bcc.n	8008e50 <average+0x1c>

  return acc/tlen;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e84:	f7f7 f9f4 	bl	8000270 <__aeabi_uldivmod>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
}
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008e98 <print_results>:

void print_results(const char *s, uint64_t *t, size_t tlen) {
 8008e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	60f8      	str	r0, [r7, #12]
 8008ea2:	60b9      	str	r1, [r7, #8]
 8008ea4:	607a      	str	r2, [r7, #4]
  size_t i;
  static uint64_t overhead = -1;

  if(tlen < 2) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d808      	bhi.n	8008ebe <print_results+0x26>
    fprintf(stderr, "ERROR: Need a least two cycle counts!\n");
 8008eac:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <print_results+0xdc>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2226      	movs	r2, #38	; 0x26
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	4830      	ldr	r0, [pc, #192]	; (8008f78 <print_results+0xe0>)
 8008eb8:	f000 f970 	bl	800919c <fwrite>
    return;
 8008ebc:	e055      	b.n	8008f6a <print_results+0xd2>
  }

  if(overhead  == (uint64_t)-1)
 8008ebe:	4b2f      	ldr	r3, [pc, #188]	; (8008f7c <print_results+0xe4>)
 8008ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	bf08      	it	eq
 8008eca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8008ece:	d106      	bne.n	8008ede <print_results+0x46>
    overhead = cpucycles_overhead();
 8008ed0:	f7fa fe02 	bl	8003ad8 <cpucycles_overhead>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4928      	ldr	r1, [pc, #160]	; (8008f7c <print_results+0xe4>)
 8008eda:	e9c1 2300 	strd	r2, r3, [r1]

  tlen--;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	607b      	str	r3, [r7, #4]
  for(i=0;i<tlen;++i)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	e01f      	b.n	8008f2a <print_results+0x92>
    t[i] = t[i+1] - t[i] - overhead;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3301      	adds	r3, #1
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	4413      	add	r3, r2
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	1a84      	subs	r4, r0, r2
 8008f06:	eb61 0503 	sbc.w	r5, r1, r3
 8008f0a:	4b1c      	ldr	r3, [pc, #112]	; (8008f7c <print_results+0xe4>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	6979      	ldr	r1, [r7, #20]
 8008f12:	00c9      	lsls	r1, r1, #3
 8008f14:	68b8      	ldr	r0, [r7, #8]
 8008f16:	4401      	add	r1, r0
 8008f18:	ebb4 0802 	subs.w	r8, r4, r2
 8008f1c:	eb65 0903 	sbc.w	r9, r5, r3
 8008f20:	e9c1 8900 	strd	r8, r9, [r1]
  for(i=0;i<tlen;++i)
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3301      	adds	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d3db      	bcc.n	8008eea <print_results+0x52>

  printf("%s\n", s);
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 fa1a 	bl	800936c <puts>
  printf("median: %lu cycles/ticks\n", (unsigned long)median(t, tlen));
 8008f38:	6879      	ldr	r1, [r7, #4]
 8008f3a:	68b8      	ldr	r0, [r7, #8]
 8008f3c:	f7ff ff3e 	bl	8008dbc <median>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4613      	mov	r3, r2
 8008f46:	4619      	mov	r1, r3
 8008f48:	480d      	ldr	r0, [pc, #52]	; (8008f80 <print_results+0xe8>)
 8008f4a:	f000 f973 	bl	8009234 <iprintf>
  printf("average: %lu cycles/ticks\n", (unsigned long)average(t, tlen));
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	68b8      	ldr	r0, [r7, #8]
 8008f52:	f7ff ff6f 	bl	8008e34 <average>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4809      	ldr	r0, [pc, #36]	; (8008f84 <print_results+0xec>)
 8008f60:	f000 f968 	bl	8009234 <iprintf>
  printf("\n");
 8008f64:	200a      	movs	r0, #10
 8008f66:	f000 f97d 	bl	8009264 <putchar>
}
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008f72:	bf00      	nop
 8008f74:	20000018 	.word	0x20000018
 8008f78:	0800a914 	.word	0x0800a914
 8008f7c:	20000010 	.word	0x20000010
 8008f80:	0800a93c 	.word	0x0800a93c
 8008f84:	0800a958 	.word	0x0800a958

08008f88 <pqcrystals_kyber1024_ref_kyber_shake128_absorb>:
**************************************************/
void kyber_shake128_absorb(keccak_state *state,
                           const uint8_t seed[KYBER_SYMBYTES],
                           uint8_t x,
                           uint8_t y)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08e      	sub	sp, #56	; 0x38
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	460b      	mov	r3, r1
 8008f98:	71fb      	strb	r3, [r7, #7]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71bb      	strb	r3, [r7, #6]
  uint8_t extseed[KYBER_SYMBYTES+2];

  memcpy(extseed, seed, KYBER_SYMBYTES);
 8008f9e:	f107 0314 	add.w	r3, r7, #20
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f92d 	bl	8009206 <memcpy>
  extseed[KYBER_SYMBYTES+0] = x;
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  extseed[KYBER_SYMBYTES+1] = y;
 8008fb2:	79bb      	ldrb	r3, [r7, #6]
 8008fb4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  shake128_absorb_once(state, extseed, sizeof(extseed));
 8008fb8:	f107 0314 	add.w	r3, r7, #20
 8008fbc:	2222      	movs	r2, #34	; 0x22
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7fd ff29 	bl	8006e18 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>
}
 8008fc6:	bf00      	nop
 8008fc8:	3738      	adds	r7, #56	; 0x38
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <pqcrystals_kyber1024_ref_kyber_shake256_prf>:
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b08e      	sub	sp, #56	; 0x38
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	60f8      	str	r0, [r7, #12]
 8008fd6:	60b9      	str	r1, [r7, #8]
 8008fd8:	607a      	str	r2, [r7, #4]
 8008fda:	70fb      	strb	r3, [r7, #3]
  uint8_t extkey[KYBER_SYMBYTES+1];

  memcpy(extkey, key, KYBER_SYMBYTES);
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	6879      	ldr	r1, [r7, #4]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f90e 	bl	8009206 <memcpy>
  extkey[KYBER_SYMBYTES] = nonce;
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  shake256(out, outlen, extkey, sizeof(extkey));
 8008ff0:	f107 0214 	add.w	r2, r7, #20
 8008ff4:	2321      	movs	r3, #33	; 0x21
 8008ff6:	68b9      	ldr	r1, [r7, #8]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f7fd ff71 	bl	8006ee0 <pqcrystals_kyber_fips202_ref_shake256>
}
 8008ffe:	bf00      	nop
 8009000:	3738      	adds	r7, #56	; 0x38
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <pqcrystals_kyber1024_ref_verify>:
*              size_t len:       length of the byte arrays
*
* Returns 0 if the byte arrays are equal, 1 otherwise
**************************************************/
int verify(const uint8_t *a, const uint8_t *b, size_t len)
{
 8009006:	b480      	push	{r7}
 8009008:	b087      	sub	sp, #28
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t r = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	74fb      	strb	r3, [r7, #19]

  for(i=0;i<len;i++)
 8009016:	2300      	movs	r3, #0
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e00f      	b.n	800903c <pqcrystals_kyber1024_ref_verify+0x36>
    r |= a[i] ^ b[i];
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	4413      	add	r3, r2
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	68b9      	ldr	r1, [r7, #8]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	440b      	add	r3, r1
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	4053      	eors	r3, r2
 800902e:	b2da      	uxtb	r2, r3
 8009030:	7cfb      	ldrb	r3, [r7, #19]
 8009032:	4313      	orrs	r3, r2
 8009034:	74fb      	strb	r3, [r7, #19]
  for(i=0;i<len;i++)
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	3301      	adds	r3, #1
 800903a:	617b      	str	r3, [r7, #20]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d3eb      	bcc.n	800901c <pqcrystals_kyber1024_ref_verify+0x16>

  return (-(uint64_t)r) >> 63;
 8009044:	7cfa      	ldrb	r2, [r7, #19]
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	4250      	negs	r0, r2
 800904c:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 8009050:	f04f 0200 	mov.w	r2, #0
 8009054:	f04f 0300 	mov.w	r3, #0
 8009058:	0fca      	lsrs	r2, r1, #31
 800905a:	2300      	movs	r3, #0
 800905c:	4613      	mov	r3, r2
}
 800905e:	4618      	mov	r0, r3
 8009060:	371c      	adds	r7, #28
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <pqcrystals_kyber1024_ref_cmov>:
*              const uint8_t *x: pointer to input byte array
*              size_t len:       Amount of bytes to be copied
*              uint8_t b:        Condition bit; has to be in {0,1}
**************************************************/
void cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b)
{
 800906a:	b480      	push	{r7}
 800906c:	b087      	sub	sp, #28
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	60b9      	str	r1, [r7, #8]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	70fb      	strb	r3, [r7, #3]
  size_t i;

  b = -b;
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	425b      	negs	r3, r3
 800907c:	70fb      	strb	r3, [r7, #3]
  for(i=0;i<len;i++)
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e019      	b.n	80090b8 <pqcrystals_kyber1024_ref_cmov+0x4e>
    r[i] ^= b & (r[i] ^ x[i]);
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4413      	add	r3, r2
 800908a:	7819      	ldrb	r1, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	4413      	add	r3, r2
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	68b8      	ldr	r0, [r7, #8]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	4403      	add	r3, r0
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	4053      	eors	r3, r2
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	4013      	ands	r3, r2
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	4403      	add	r3, r0
 80090ac:	404a      	eors	r2, r1
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]
  for(i=0;i<len;i++)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	3301      	adds	r3, #1
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3e1      	bcc.n	8009084 <pqcrystals_kyber1024_ref_cmov+0x1a>
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
	...

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	; (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	20000018 	.word	0x20000018

080090dc <_fwrite_r>:
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	9c08      	ldr	r4, [sp, #32]
 80090e2:	4689      	mov	r9, r1
 80090e4:	4617      	mov	r7, r2
 80090e6:	fb02 f803 	mul.w	r8, r2, r3
 80090ea:	4605      	mov	r5, r0
 80090ec:	b118      	cbz	r0, 80090f6 <_fwrite_r+0x1a>
 80090ee:	6983      	ldr	r3, [r0, #24]
 80090f0:	b90b      	cbnz	r3, 80090f6 <_fwrite_r+0x1a>
 80090f2:	f000 fd05 	bl	8009b00 <__sinit>
 80090f6:	4b26      	ldr	r3, [pc, #152]	; (8009190 <_fwrite_r+0xb4>)
 80090f8:	429c      	cmp	r4, r3
 80090fa:	d123      	bne.n	8009144 <_fwrite_r+0x68>
 80090fc:	686c      	ldr	r4, [r5, #4]
 80090fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009100:	07de      	lsls	r6, r3, #31
 8009102:	d405      	bmi.n	8009110 <_fwrite_r+0x34>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	0598      	lsls	r0, r3, #22
 8009108:	d402      	bmi.n	8009110 <_fwrite_r+0x34>
 800910a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910c:	f000 f879 	bl	8009202 <__retarget_lock_acquire_recursive>
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	0719      	lsls	r1, r3, #28
 8009114:	d520      	bpl.n	8009158 <_fwrite_r+0x7c>
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	b1f3      	cbz	r3, 8009158 <_fwrite_r+0x7c>
 800911a:	2600      	movs	r6, #0
 800911c:	4546      	cmp	r6, r8
 800911e:	d029      	beq.n	8009174 <_fwrite_r+0x98>
 8009120:	68a0      	ldr	r0, [r4, #8]
 8009122:	f819 1006 	ldrb.w	r1, [r9, r6]
 8009126:	3801      	subs	r0, #1
 8009128:	2800      	cmp	r0, #0
 800912a:	60a0      	str	r0, [r4, #8]
 800912c:	da04      	bge.n	8009138 <_fwrite_r+0x5c>
 800912e:	69a3      	ldr	r3, [r4, #24]
 8009130:	4298      	cmp	r0, r3
 8009132:	db19      	blt.n	8009168 <_fwrite_r+0x8c>
 8009134:	290a      	cmp	r1, #10
 8009136:	d017      	beq.n	8009168 <_fwrite_r+0x8c>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	6022      	str	r2, [r4, #0]
 800913e:	7019      	strb	r1, [r3, #0]
 8009140:	3601      	adds	r6, #1
 8009142:	e7eb      	b.n	800911c <_fwrite_r+0x40>
 8009144:	4b13      	ldr	r3, [pc, #76]	; (8009194 <_fwrite_r+0xb8>)
 8009146:	429c      	cmp	r4, r3
 8009148:	d101      	bne.n	800914e <_fwrite_r+0x72>
 800914a:	68ac      	ldr	r4, [r5, #8]
 800914c:	e7d7      	b.n	80090fe <_fwrite_r+0x22>
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <_fwrite_r+0xbc>)
 8009150:	429c      	cmp	r4, r3
 8009152:	bf08      	it	eq
 8009154:	68ec      	ldreq	r4, [r5, #12]
 8009156:	e7d2      	b.n	80090fe <_fwrite_r+0x22>
 8009158:	4621      	mov	r1, r4
 800915a:	4628      	mov	r0, r5
 800915c:	f000 fb2a 	bl	80097b4 <__swsetup_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	d0da      	beq.n	800911a <_fwrite_r+0x3e>
 8009164:	2600      	movs	r6, #0
 8009166:	e005      	b.n	8009174 <_fwrite_r+0x98>
 8009168:	4622      	mov	r2, r4
 800916a:	4628      	mov	r0, r5
 800916c:	f000 fad0 	bl	8009710 <__swbuf_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d1e5      	bne.n	8009140 <_fwrite_r+0x64>
 8009174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009176:	07da      	lsls	r2, r3, #31
 8009178:	d405      	bmi.n	8009186 <_fwrite_r+0xaa>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	059b      	lsls	r3, r3, #22
 800917e:	d402      	bmi.n	8009186 <_fwrite_r+0xaa>
 8009180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009182:	f000 f83f 	bl	8009204 <__retarget_lock_release_recursive>
 8009186:	fbb6 f0f7 	udiv	r0, r6, r7
 800918a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800918e:	bf00      	nop
 8009190:	0800ac28 	.word	0x0800ac28
 8009194:	0800ac48 	.word	0x0800ac48
 8009198:	0800ac08 	.word	0x0800ac08

0800919c <fwrite>:
 800919c:	b507      	push	{r0, r1, r2, lr}
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	4613      	mov	r3, r2
 80091a2:	460a      	mov	r2, r1
 80091a4:	4601      	mov	r1, r0
 80091a6:	4803      	ldr	r0, [pc, #12]	; (80091b4 <fwrite+0x18>)
 80091a8:	6800      	ldr	r0, [r0, #0]
 80091aa:	f7ff ff97 	bl	80090dc <_fwrite_r>
 80091ae:	b003      	add	sp, #12
 80091b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80091b4:	20000018 	.word	0x20000018

080091b8 <__libc_init_array>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	4d0d      	ldr	r5, [pc, #52]	; (80091f0 <__libc_init_array+0x38>)
 80091bc:	4c0d      	ldr	r4, [pc, #52]	; (80091f4 <__libc_init_array+0x3c>)
 80091be:	1b64      	subs	r4, r4, r5
 80091c0:	10a4      	asrs	r4, r4, #2
 80091c2:	2600      	movs	r6, #0
 80091c4:	42a6      	cmp	r6, r4
 80091c6:	d109      	bne.n	80091dc <__libc_init_array+0x24>
 80091c8:	4d0b      	ldr	r5, [pc, #44]	; (80091f8 <__libc_init_array+0x40>)
 80091ca:	4c0c      	ldr	r4, [pc, #48]	; (80091fc <__libc_init_array+0x44>)
 80091cc:	f001 faa8 	bl	800a720 <_init>
 80091d0:	1b64      	subs	r4, r4, r5
 80091d2:	10a4      	asrs	r4, r4, #2
 80091d4:	2600      	movs	r6, #0
 80091d6:	42a6      	cmp	r6, r4
 80091d8:	d105      	bne.n	80091e6 <__libc_init_array+0x2e>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e0:	4798      	blx	r3
 80091e2:	3601      	adds	r6, #1
 80091e4:	e7ee      	b.n	80091c4 <__libc_init_array+0xc>
 80091e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ea:	4798      	blx	r3
 80091ec:	3601      	adds	r6, #1
 80091ee:	e7f2      	b.n	80091d6 <__libc_init_array+0x1e>
 80091f0:	0800aca4 	.word	0x0800aca4
 80091f4:	0800aca4 	.word	0x0800aca4
 80091f8:	0800aca4 	.word	0x0800aca4
 80091fc:	0800aca8 	.word	0x0800aca8

08009200 <__retarget_lock_init_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_acquire_recursive>:
 8009202:	4770      	bx	lr

08009204 <__retarget_lock_release_recursive>:
 8009204:	4770      	bx	lr

08009206 <memcpy>:
 8009206:	440a      	add	r2, r1
 8009208:	4291      	cmp	r1, r2
 800920a:	f100 33ff 	add.w	r3, r0, #4294967295
 800920e:	d100      	bne.n	8009212 <memcpy+0xc>
 8009210:	4770      	bx	lr
 8009212:	b510      	push	{r4, lr}
 8009214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800921c:	4291      	cmp	r1, r2
 800921e:	d1f9      	bne.n	8009214 <memcpy+0xe>
 8009220:	bd10      	pop	{r4, pc}

08009222 <memset>:
 8009222:	4402      	add	r2, r0
 8009224:	4603      	mov	r3, r0
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <memset+0xa>
 800922a:	4770      	bx	lr
 800922c:	f803 1b01 	strb.w	r1, [r3], #1
 8009230:	e7f9      	b.n	8009226 <memset+0x4>
	...

08009234 <iprintf>:
 8009234:	b40f      	push	{r0, r1, r2, r3}
 8009236:	4b0a      	ldr	r3, [pc, #40]	; (8009260 <iprintf+0x2c>)
 8009238:	b513      	push	{r0, r1, r4, lr}
 800923a:	681c      	ldr	r4, [r3, #0]
 800923c:	b124      	cbz	r4, 8009248 <iprintf+0x14>
 800923e:	69a3      	ldr	r3, [r4, #24]
 8009240:	b913      	cbnz	r3, 8009248 <iprintf+0x14>
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fc5c 	bl	8009b00 <__sinit>
 8009248:	ab05      	add	r3, sp, #20
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	68a1      	ldr	r1, [r4, #8]
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fe45 	bl	8009ee0 <_vfiprintf_r>
 8009256:	b002      	add	sp, #8
 8009258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925c:	b004      	add	sp, #16
 800925e:	4770      	bx	lr
 8009260:	20000018 	.word	0x20000018

08009264 <putchar>:
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <putchar+0x28>)
 8009266:	b513      	push	{r0, r1, r4, lr}
 8009268:	681c      	ldr	r4, [r3, #0]
 800926a:	4601      	mov	r1, r0
 800926c:	b134      	cbz	r4, 800927c <putchar+0x18>
 800926e:	69a3      	ldr	r3, [r4, #24]
 8009270:	b923      	cbnz	r3, 800927c <putchar+0x18>
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fc43 	bl	8009b00 <__sinit>
 800927a:	9901      	ldr	r1, [sp, #4]
 800927c:	68a2      	ldr	r2, [r4, #8]
 800927e:	4620      	mov	r0, r4
 8009280:	b002      	add	sp, #8
 8009282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009286:	f001 b8ef 	b.w	800a468 <_putc_r>
 800928a:	bf00      	nop
 800928c:	20000018 	.word	0x20000018

08009290 <_puts_r>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	460e      	mov	r6, r1
 8009294:	4605      	mov	r5, r0
 8009296:	b118      	cbz	r0, 80092a0 <_puts_r+0x10>
 8009298:	6983      	ldr	r3, [r0, #24]
 800929a:	b90b      	cbnz	r3, 80092a0 <_puts_r+0x10>
 800929c:	f000 fc30 	bl	8009b00 <__sinit>
 80092a0:	69ab      	ldr	r3, [r5, #24]
 80092a2:	68ac      	ldr	r4, [r5, #8]
 80092a4:	b913      	cbnz	r3, 80092ac <_puts_r+0x1c>
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 fc2a 	bl	8009b00 <__sinit>
 80092ac:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <_puts_r+0xd0>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	d120      	bne.n	80092f4 <_puts_r+0x64>
 80092b2:	686c      	ldr	r4, [r5, #4]
 80092b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092b6:	07db      	lsls	r3, r3, #31
 80092b8:	d405      	bmi.n	80092c6 <_puts_r+0x36>
 80092ba:	89a3      	ldrh	r3, [r4, #12]
 80092bc:	0598      	lsls	r0, r3, #22
 80092be:	d402      	bmi.n	80092c6 <_puts_r+0x36>
 80092c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c2:	f7ff ff9e 	bl	8009202 <__retarget_lock_acquire_recursive>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	0719      	lsls	r1, r3, #28
 80092ca:	d51d      	bpl.n	8009308 <_puts_r+0x78>
 80092cc:	6923      	ldr	r3, [r4, #16]
 80092ce:	b1db      	cbz	r3, 8009308 <_puts_r+0x78>
 80092d0:	3e01      	subs	r6, #1
 80092d2:	68a3      	ldr	r3, [r4, #8]
 80092d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092d8:	3b01      	subs	r3, #1
 80092da:	60a3      	str	r3, [r4, #8]
 80092dc:	bb39      	cbnz	r1, 800932e <_puts_r+0x9e>
 80092de:	2b00      	cmp	r3, #0
 80092e0:	da38      	bge.n	8009354 <_puts_r+0xc4>
 80092e2:	4622      	mov	r2, r4
 80092e4:	210a      	movs	r1, #10
 80092e6:	4628      	mov	r0, r5
 80092e8:	f000 fa12 	bl	8009710 <__swbuf_r>
 80092ec:	3001      	adds	r0, #1
 80092ee:	d011      	beq.n	8009314 <_puts_r+0x84>
 80092f0:	250a      	movs	r5, #10
 80092f2:	e011      	b.n	8009318 <_puts_r+0x88>
 80092f4:	4b1b      	ldr	r3, [pc, #108]	; (8009364 <_puts_r+0xd4>)
 80092f6:	429c      	cmp	r4, r3
 80092f8:	d101      	bne.n	80092fe <_puts_r+0x6e>
 80092fa:	68ac      	ldr	r4, [r5, #8]
 80092fc:	e7da      	b.n	80092b4 <_puts_r+0x24>
 80092fe:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <_puts_r+0xd8>)
 8009300:	429c      	cmp	r4, r3
 8009302:	bf08      	it	eq
 8009304:	68ec      	ldreq	r4, [r5, #12]
 8009306:	e7d5      	b.n	80092b4 <_puts_r+0x24>
 8009308:	4621      	mov	r1, r4
 800930a:	4628      	mov	r0, r5
 800930c:	f000 fa52 	bl	80097b4 <__swsetup_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	d0dd      	beq.n	80092d0 <_puts_r+0x40>
 8009314:	f04f 35ff 	mov.w	r5, #4294967295
 8009318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800931a:	07da      	lsls	r2, r3, #31
 800931c:	d405      	bmi.n	800932a <_puts_r+0x9a>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	d402      	bmi.n	800932a <_puts_r+0x9a>
 8009324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009326:	f7ff ff6d 	bl	8009204 <__retarget_lock_release_recursive>
 800932a:	4628      	mov	r0, r5
 800932c:	bd70      	pop	{r4, r5, r6, pc}
 800932e:	2b00      	cmp	r3, #0
 8009330:	da04      	bge.n	800933c <_puts_r+0xac>
 8009332:	69a2      	ldr	r2, [r4, #24]
 8009334:	429a      	cmp	r2, r3
 8009336:	dc06      	bgt.n	8009346 <_puts_r+0xb6>
 8009338:	290a      	cmp	r1, #10
 800933a:	d004      	beq.n	8009346 <_puts_r+0xb6>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	6022      	str	r2, [r4, #0]
 8009342:	7019      	strb	r1, [r3, #0]
 8009344:	e7c5      	b.n	80092d2 <_puts_r+0x42>
 8009346:	4622      	mov	r2, r4
 8009348:	4628      	mov	r0, r5
 800934a:	f000 f9e1 	bl	8009710 <__swbuf_r>
 800934e:	3001      	adds	r0, #1
 8009350:	d1bf      	bne.n	80092d2 <_puts_r+0x42>
 8009352:	e7df      	b.n	8009314 <_puts_r+0x84>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	250a      	movs	r5, #10
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	6022      	str	r2, [r4, #0]
 800935c:	701d      	strb	r5, [r3, #0]
 800935e:	e7db      	b.n	8009318 <_puts_r+0x88>
 8009360:	0800ac28 	.word	0x0800ac28
 8009364:	0800ac48 	.word	0x0800ac48
 8009368:	0800ac08 	.word	0x0800ac08

0800936c <puts>:
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <puts+0xc>)
 800936e:	4601      	mov	r1, r0
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f7ff bf8d 	b.w	8009290 <_puts_r>
 8009376:	bf00      	nop
 8009378:	20000018 	.word	0x20000018

0800937c <swapfunc>:
 800937c:	2b02      	cmp	r3, #2
 800937e:	b510      	push	{r4, lr}
 8009380:	d00a      	beq.n	8009398 <swapfunc+0x1c>
 8009382:	0892      	lsrs	r2, r2, #2
 8009384:	3a01      	subs	r2, #1
 8009386:	6803      	ldr	r3, [r0, #0]
 8009388:	680c      	ldr	r4, [r1, #0]
 800938a:	f840 4b04 	str.w	r4, [r0], #4
 800938e:	2a00      	cmp	r2, #0
 8009390:	f841 3b04 	str.w	r3, [r1], #4
 8009394:	dcf6      	bgt.n	8009384 <swapfunc+0x8>
 8009396:	bd10      	pop	{r4, pc}
 8009398:	4402      	add	r2, r0
 800939a:	780c      	ldrb	r4, [r1, #0]
 800939c:	7803      	ldrb	r3, [r0, #0]
 800939e:	f800 4b01 	strb.w	r4, [r0], #1
 80093a2:	f801 3b01 	strb.w	r3, [r1], #1
 80093a6:	1a13      	subs	r3, r2, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	dcf6      	bgt.n	800939a <swapfunc+0x1e>
 80093ac:	e7f3      	b.n	8009396 <swapfunc+0x1a>

080093ae <med3.isra.0>:
 80093ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b0:	460f      	mov	r7, r1
 80093b2:	4614      	mov	r4, r2
 80093b4:	4606      	mov	r6, r0
 80093b6:	461d      	mov	r5, r3
 80093b8:	4798      	blx	r3
 80093ba:	2800      	cmp	r0, #0
 80093bc:	4621      	mov	r1, r4
 80093be:	4638      	mov	r0, r7
 80093c0:	da0c      	bge.n	80093dc <med3.isra.0+0x2e>
 80093c2:	47a8      	blx	r5
 80093c4:	2800      	cmp	r0, #0
 80093c6:	da02      	bge.n	80093ce <med3.isra.0+0x20>
 80093c8:	463c      	mov	r4, r7
 80093ca:	4620      	mov	r0, r4
 80093cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ce:	4621      	mov	r1, r4
 80093d0:	4630      	mov	r0, r6
 80093d2:	47a8      	blx	r5
 80093d4:	2800      	cmp	r0, #0
 80093d6:	dbf8      	blt.n	80093ca <med3.isra.0+0x1c>
 80093d8:	4634      	mov	r4, r6
 80093da:	e7f6      	b.n	80093ca <med3.isra.0+0x1c>
 80093dc:	47a8      	blx	r5
 80093de:	2800      	cmp	r0, #0
 80093e0:	dcf2      	bgt.n	80093c8 <med3.isra.0+0x1a>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4630      	mov	r0, r6
 80093e6:	47a8      	blx	r5
 80093e8:	2800      	cmp	r0, #0
 80093ea:	daee      	bge.n	80093ca <med3.isra.0+0x1c>
 80093ec:	e7f4      	b.n	80093d8 <med3.isra.0+0x2a>

080093ee <qsort>:
 80093ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f2:	469a      	mov	sl, r3
 80093f4:	ea40 0302 	orr.w	r3, r0, r2
 80093f8:	079b      	lsls	r3, r3, #30
 80093fa:	b097      	sub	sp, #92	; 0x5c
 80093fc:	4606      	mov	r6, r0
 80093fe:	4614      	mov	r4, r2
 8009400:	d11a      	bne.n	8009438 <qsort+0x4a>
 8009402:	f1b2 0804 	subs.w	r8, r2, #4
 8009406:	bf18      	it	ne
 8009408:	f04f 0801 	movne.w	r8, #1
 800940c:	2300      	movs	r3, #0
 800940e:	9302      	str	r3, [sp, #8]
 8009410:	1933      	adds	r3, r6, r4
 8009412:	fb04 f701 	mul.w	r7, r4, r1
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	2906      	cmp	r1, #6
 800941a:	eb06 0307 	add.w	r3, r6, r7
 800941e:	9303      	str	r3, [sp, #12]
 8009420:	d82a      	bhi.n	8009478 <qsort+0x8a>
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	9a03      	ldr	r2, [sp, #12]
 8009426:	4293      	cmp	r3, r2
 8009428:	d310      	bcc.n	800944c <qsort+0x5e>
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 811f 	bne.w	8009670 <qsort+0x282>
 8009432:	b017      	add	sp, #92	; 0x5c
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	f04f 0802 	mov.w	r8, #2
 800943c:	e7e6      	b.n	800940c <qsort+0x1e>
 800943e:	4643      	mov	r3, r8
 8009440:	4622      	mov	r2, r4
 8009442:	4639      	mov	r1, r7
 8009444:	4628      	mov	r0, r5
 8009446:	f7ff ff99 	bl	800937c <swapfunc>
 800944a:	e00e      	b.n	800946a <qsort+0x7c>
 800944c:	9d01      	ldr	r5, [sp, #4]
 800944e:	e00d      	b.n	800946c <qsort+0x7e>
 8009450:	1b2f      	subs	r7, r5, r4
 8009452:	4629      	mov	r1, r5
 8009454:	4638      	mov	r0, r7
 8009456:	47d0      	blx	sl
 8009458:	2800      	cmp	r0, #0
 800945a:	dd09      	ble.n	8009470 <qsort+0x82>
 800945c:	f1b8 0f00 	cmp.w	r8, #0
 8009460:	d1ed      	bne.n	800943e <qsort+0x50>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	602a      	str	r2, [r5, #0]
 8009468:	603b      	str	r3, [r7, #0]
 800946a:	463d      	mov	r5, r7
 800946c:	42ae      	cmp	r6, r5
 800946e:	d3ef      	bcc.n	8009450 <qsort+0x62>
 8009470:	9b01      	ldr	r3, [sp, #4]
 8009472:	4423      	add	r3, r4
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	e7d4      	b.n	8009422 <qsort+0x34>
 8009478:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800947c:	1b3f      	subs	r7, r7, r4
 800947e:	2907      	cmp	r1, #7
 8009480:	fb04 6909 	mla	r9, r4, r9, r6
 8009484:	4437      	add	r7, r6
 8009486:	d022      	beq.n	80094ce <qsort+0xe0>
 8009488:	2928      	cmp	r1, #40	; 0x28
 800948a:	d945      	bls.n	8009518 <qsort+0x12a>
 800948c:	08c9      	lsrs	r1, r1, #3
 800948e:	fb04 f501 	mul.w	r5, r4, r1
 8009492:	4653      	mov	r3, sl
 8009494:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009498:	1971      	adds	r1, r6, r5
 800949a:	4630      	mov	r0, r6
 800949c:	f7ff ff87 	bl	80093ae <med3.isra.0>
 80094a0:	4649      	mov	r1, r9
 80094a2:	eb09 0205 	add.w	r2, r9, r5
 80094a6:	4653      	mov	r3, sl
 80094a8:	4683      	mov	fp, r0
 80094aa:	1b48      	subs	r0, r1, r5
 80094ac:	f7ff ff7f 	bl	80093ae <med3.isra.0>
 80094b0:	463a      	mov	r2, r7
 80094b2:	4681      	mov	r9, r0
 80094b4:	4653      	mov	r3, sl
 80094b6:	1b79      	subs	r1, r7, r5
 80094b8:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 80094bc:	f7ff ff77 	bl	80093ae <med3.isra.0>
 80094c0:	4602      	mov	r2, r0
 80094c2:	4649      	mov	r1, r9
 80094c4:	4653      	mov	r3, sl
 80094c6:	4658      	mov	r0, fp
 80094c8:	f7ff ff71 	bl	80093ae <med3.isra.0>
 80094cc:	4681      	mov	r9, r0
 80094ce:	f1b8 0f00 	cmp.w	r8, #0
 80094d2:	d124      	bne.n	800951e <qsort+0x130>
 80094d4:	6833      	ldr	r3, [r6, #0]
 80094d6:	f8d9 2000 	ldr.w	r2, [r9]
 80094da:	6032      	str	r2, [r6, #0]
 80094dc:	f8c9 3000 	str.w	r3, [r9]
 80094e0:	eb06 0b04 	add.w	fp, r6, r4
 80094e4:	46b9      	mov	r9, r7
 80094e6:	465d      	mov	r5, fp
 80094e8:	2300      	movs	r3, #0
 80094ea:	45bb      	cmp	fp, r7
 80094ec:	d835      	bhi.n	800955a <qsort+0x16c>
 80094ee:	4631      	mov	r1, r6
 80094f0:	4658      	mov	r0, fp
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	47d0      	blx	sl
 80094f6:	2800      	cmp	r0, #0
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	dc3e      	bgt.n	800957a <qsort+0x18c>
 80094fc:	d10a      	bne.n	8009514 <qsort+0x126>
 80094fe:	f1b8 0f00 	cmp.w	r8, #0
 8009502:	d113      	bne.n	800952c <qsort+0x13e>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	f8db 2000 	ldr.w	r2, [fp]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	f8cb 3000 	str.w	r3, [fp]
 8009510:	4425      	add	r5, r4
 8009512:	2301      	movs	r3, #1
 8009514:	44a3      	add	fp, r4
 8009516:	e7e8      	b.n	80094ea <qsort+0xfc>
 8009518:	463a      	mov	r2, r7
 800951a:	46b3      	mov	fp, r6
 800951c:	e7d1      	b.n	80094c2 <qsort+0xd4>
 800951e:	4643      	mov	r3, r8
 8009520:	4622      	mov	r2, r4
 8009522:	4649      	mov	r1, r9
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff ff29 	bl	800937c <swapfunc>
 800952a:	e7d9      	b.n	80094e0 <qsort+0xf2>
 800952c:	4643      	mov	r3, r8
 800952e:	4622      	mov	r2, r4
 8009530:	4659      	mov	r1, fp
 8009532:	4628      	mov	r0, r5
 8009534:	f7ff ff22 	bl	800937c <swapfunc>
 8009538:	e7ea      	b.n	8009510 <qsort+0x122>
 800953a:	d10b      	bne.n	8009554 <qsort+0x166>
 800953c:	f1b8 0f00 	cmp.w	r8, #0
 8009540:	d114      	bne.n	800956c <qsort+0x17e>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f8d9 2000 	ldr.w	r2, [r9]
 8009548:	603a      	str	r2, [r7, #0]
 800954a:	f8c9 3000 	str.w	r3, [r9]
 800954e:	eba9 0904 	sub.w	r9, r9, r4
 8009552:	2301      	movs	r3, #1
 8009554:	9f04      	ldr	r7, [sp, #16]
 8009556:	45bb      	cmp	fp, r7
 8009558:	d90f      	bls.n	800957a <qsort+0x18c>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d143      	bne.n	80095e6 <qsort+0x1f8>
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	9a03      	ldr	r2, [sp, #12]
 8009562:	4293      	cmp	r3, r2
 8009564:	f4bf af61 	bcs.w	800942a <qsort+0x3c>
 8009568:	9d01      	ldr	r5, [sp, #4]
 800956a:	e036      	b.n	80095da <qsort+0x1ec>
 800956c:	4643      	mov	r3, r8
 800956e:	4622      	mov	r2, r4
 8009570:	4649      	mov	r1, r9
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff ff02 	bl	800937c <swapfunc>
 8009578:	e7e9      	b.n	800954e <qsort+0x160>
 800957a:	4631      	mov	r1, r6
 800957c:	4638      	mov	r0, r7
 800957e:	9305      	str	r3, [sp, #20]
 8009580:	47d0      	blx	sl
 8009582:	1b3b      	subs	r3, r7, r4
 8009584:	2800      	cmp	r0, #0
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	dad6      	bge.n	800953a <qsort+0x14c>
 800958c:	f1b8 0f00 	cmp.w	r8, #0
 8009590:	d006      	beq.n	80095a0 <qsort+0x1b2>
 8009592:	4643      	mov	r3, r8
 8009594:	4622      	mov	r2, r4
 8009596:	4639      	mov	r1, r7
 8009598:	4658      	mov	r0, fp
 800959a:	f7ff feef 	bl	800937c <swapfunc>
 800959e:	e005      	b.n	80095ac <qsort+0x1be>
 80095a0:	f8db 3000 	ldr.w	r3, [fp]
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	f8cb 2000 	str.w	r2, [fp]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	9f04      	ldr	r7, [sp, #16]
 80095ae:	e7b0      	b.n	8009512 <qsort+0x124>
 80095b0:	4643      	mov	r3, r8
 80095b2:	4622      	mov	r2, r4
 80095b4:	4639      	mov	r1, r7
 80095b6:	4628      	mov	r0, r5
 80095b8:	f7ff fee0 	bl	800937c <swapfunc>
 80095bc:	e00c      	b.n	80095d8 <qsort+0x1ea>
 80095be:	1b2f      	subs	r7, r5, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	4638      	mov	r0, r7
 80095c4:	47d0      	blx	sl
 80095c6:	2800      	cmp	r0, #0
 80095c8:	dd09      	ble.n	80095de <qsort+0x1f0>
 80095ca:	f1b8 0f00 	cmp.w	r8, #0
 80095ce:	d1ef      	bne.n	80095b0 <qsort+0x1c2>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	602a      	str	r2, [r5, #0]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	463d      	mov	r5, r7
 80095da:	42ae      	cmp	r6, r5
 80095dc:	d3ef      	bcc.n	80095be <qsort+0x1d0>
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	4423      	add	r3, r4
 80095e2:	9301      	str	r3, [sp, #4]
 80095e4:	e7bb      	b.n	800955e <qsort+0x170>
 80095e6:	ebab 0305 	sub.w	r3, fp, r5
 80095ea:	1baa      	subs	r2, r5, r6
 80095ec:	429a      	cmp	r2, r3
 80095ee:	bfa8      	it	ge
 80095f0:	461a      	movge	r2, r3
 80095f2:	9301      	str	r3, [sp, #4]
 80095f4:	b12a      	cbz	r2, 8009602 <qsort+0x214>
 80095f6:	4643      	mov	r3, r8
 80095f8:	ebab 0102 	sub.w	r1, fp, r2
 80095fc:	4630      	mov	r0, r6
 80095fe:	f7ff febd 	bl	800937c <swapfunc>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	eba3 0209 	sub.w	r2, r3, r9
 8009608:	eba9 0707 	sub.w	r7, r9, r7
 800960c:	1b12      	subs	r2, r2, r4
 800960e:	42ba      	cmp	r2, r7
 8009610:	bf28      	it	cs
 8009612:	463a      	movcs	r2, r7
 8009614:	b12a      	cbz	r2, 8009622 <qsort+0x234>
 8009616:	9903      	ldr	r1, [sp, #12]
 8009618:	4643      	mov	r3, r8
 800961a:	1a89      	subs	r1, r1, r2
 800961c:	4658      	mov	r0, fp
 800961e:	f7ff fead 	bl	800937c <swapfunc>
 8009622:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	454f      	cmp	r7, r9
 800962a:	eba3 0007 	sub.w	r0, r3, r7
 800962e:	d904      	bls.n	800963a <qsort+0x24c>
 8009630:	4633      	mov	r3, r6
 8009632:	46b9      	mov	r9, r7
 8009634:	9f01      	ldr	r7, [sp, #4]
 8009636:	4606      	mov	r6, r0
 8009638:	4618      	mov	r0, r3
 800963a:	42a7      	cmp	r7, r4
 800963c:	d921      	bls.n	8009682 <qsort+0x294>
 800963e:	fbb7 f1f4 	udiv	r1, r7, r4
 8009642:	9b02      	ldr	r3, [sp, #8]
 8009644:	2b07      	cmp	r3, #7
 8009646:	d80d      	bhi.n	8009664 <qsort+0x276>
 8009648:	fbb9 f7f4 	udiv	r7, r9, r4
 800964c:	aa16      	add	r2, sp, #88	; 0x58
 800964e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009652:	f843 6c40 	str.w	r6, [r3, #-64]
 8009656:	f843 7c3c 	str.w	r7, [r3, #-60]
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	3301      	adds	r3, #1
 800965e:	9302      	str	r3, [sp, #8]
 8009660:	4606      	mov	r6, r0
 8009662:	e6d5      	b.n	8009410 <qsort+0x22>
 8009664:	4653      	mov	r3, sl
 8009666:	4622      	mov	r2, r4
 8009668:	f7ff fec1 	bl	80093ee <qsort>
 800966c:	45a1      	cmp	r9, r4
 800966e:	d80b      	bhi.n	8009688 <qsort+0x29a>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	aa16      	add	r2, sp, #88	; 0x58
 8009674:	3b01      	subs	r3, #1
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800967c:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8009680:	e7ee      	b.n	8009660 <qsort+0x272>
 8009682:	45a1      	cmp	r9, r4
 8009684:	f67f aed1 	bls.w	800942a <qsort+0x3c>
 8009688:	fbb9 f1f4 	udiv	r1, r9, r4
 800968c:	4630      	mov	r0, r6
 800968e:	e7e7      	b.n	8009660 <qsort+0x272>

08009690 <rand>:
 8009690:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <rand+0x60>)
 8009692:	b510      	push	{r4, lr}
 8009694:	681c      	ldr	r4, [r3, #0]
 8009696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009698:	b9b3      	cbnz	r3, 80096c8 <rand+0x38>
 800969a:	2018      	movs	r0, #24
 800969c:	f000 fb44 	bl	8009d28 <malloc>
 80096a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80096a2:	b928      	cbnz	r0, 80096b0 <rand+0x20>
 80096a4:	4602      	mov	r2, r0
 80096a6:	4b13      	ldr	r3, [pc, #76]	; (80096f4 <rand+0x64>)
 80096a8:	4813      	ldr	r0, [pc, #76]	; (80096f8 <rand+0x68>)
 80096aa:	214e      	movs	r1, #78	; 0x4e
 80096ac:	f000 f8f0 	bl	8009890 <__assert_func>
 80096b0:	4a12      	ldr	r2, [pc, #72]	; (80096fc <rand+0x6c>)
 80096b2:	4b13      	ldr	r3, [pc, #76]	; (8009700 <rand+0x70>)
 80096b4:	e9c0 2300 	strd	r2, r3, [r0]
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <rand+0x74>)
 80096ba:	6083      	str	r3, [r0, #8]
 80096bc:	230b      	movs	r3, #11
 80096be:	8183      	strh	r3, [r0, #12]
 80096c0:	2201      	movs	r2, #1
 80096c2:	2300      	movs	r3, #0
 80096c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80096c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096ca:	480f      	ldr	r0, [pc, #60]	; (8009708 <rand+0x78>)
 80096cc:	690a      	ldr	r2, [r1, #16]
 80096ce:	694b      	ldr	r3, [r1, #20]
 80096d0:	4c0e      	ldr	r4, [pc, #56]	; (800970c <rand+0x7c>)
 80096d2:	4350      	muls	r0, r2
 80096d4:	fb04 0003 	mla	r0, r4, r3, r0
 80096d8:	fba2 3404 	umull	r3, r4, r2, r4
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	4404      	add	r4, r0
 80096e0:	f144 0000 	adc.w	r0, r4, #0
 80096e4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80096e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	20000018 	.word	0x20000018
 80096f4:	0800ab54 	.word	0x0800ab54
 80096f8:	0800ab6b 	.word	0x0800ab6b
 80096fc:	abcd330e 	.word	0xabcd330e
 8009700:	e66d1234 	.word	0xe66d1234
 8009704:	0005deec 	.word	0x0005deec
 8009708:	5851f42d 	.word	0x5851f42d
 800970c:	4c957f2d 	.word	0x4c957f2d

08009710 <__swbuf_r>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	460e      	mov	r6, r1
 8009714:	4614      	mov	r4, r2
 8009716:	4605      	mov	r5, r0
 8009718:	b118      	cbz	r0, 8009722 <__swbuf_r+0x12>
 800971a:	6983      	ldr	r3, [r0, #24]
 800971c:	b90b      	cbnz	r3, 8009722 <__swbuf_r+0x12>
 800971e:	f000 f9ef 	bl	8009b00 <__sinit>
 8009722:	4b21      	ldr	r3, [pc, #132]	; (80097a8 <__swbuf_r+0x98>)
 8009724:	429c      	cmp	r4, r3
 8009726:	d12b      	bne.n	8009780 <__swbuf_r+0x70>
 8009728:	686c      	ldr	r4, [r5, #4]
 800972a:	69a3      	ldr	r3, [r4, #24]
 800972c:	60a3      	str	r3, [r4, #8]
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	071a      	lsls	r2, r3, #28
 8009732:	d52f      	bpl.n	8009794 <__swbuf_r+0x84>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	b36b      	cbz	r3, 8009794 <__swbuf_r+0x84>
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	6820      	ldr	r0, [r4, #0]
 800973c:	1ac0      	subs	r0, r0, r3
 800973e:	6963      	ldr	r3, [r4, #20]
 8009740:	b2f6      	uxtb	r6, r6
 8009742:	4283      	cmp	r3, r0
 8009744:	4637      	mov	r7, r6
 8009746:	dc04      	bgt.n	8009752 <__swbuf_r+0x42>
 8009748:	4621      	mov	r1, r4
 800974a:	4628      	mov	r0, r5
 800974c:	f000 f944 	bl	80099d8 <_fflush_r>
 8009750:	bb30      	cbnz	r0, 80097a0 <__swbuf_r+0x90>
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	3b01      	subs	r3, #1
 8009756:	60a3      	str	r3, [r4, #8]
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	6022      	str	r2, [r4, #0]
 800975e:	701e      	strb	r6, [r3, #0]
 8009760:	6963      	ldr	r3, [r4, #20]
 8009762:	3001      	adds	r0, #1
 8009764:	4283      	cmp	r3, r0
 8009766:	d004      	beq.n	8009772 <__swbuf_r+0x62>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	07db      	lsls	r3, r3, #31
 800976c:	d506      	bpl.n	800977c <__swbuf_r+0x6c>
 800976e:	2e0a      	cmp	r6, #10
 8009770:	d104      	bne.n	800977c <__swbuf_r+0x6c>
 8009772:	4621      	mov	r1, r4
 8009774:	4628      	mov	r0, r5
 8009776:	f000 f92f 	bl	80099d8 <_fflush_r>
 800977a:	b988      	cbnz	r0, 80097a0 <__swbuf_r+0x90>
 800977c:	4638      	mov	r0, r7
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009780:	4b0a      	ldr	r3, [pc, #40]	; (80097ac <__swbuf_r+0x9c>)
 8009782:	429c      	cmp	r4, r3
 8009784:	d101      	bne.n	800978a <__swbuf_r+0x7a>
 8009786:	68ac      	ldr	r4, [r5, #8]
 8009788:	e7cf      	b.n	800972a <__swbuf_r+0x1a>
 800978a:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <__swbuf_r+0xa0>)
 800978c:	429c      	cmp	r4, r3
 800978e:	bf08      	it	eq
 8009790:	68ec      	ldreq	r4, [r5, #12]
 8009792:	e7ca      	b.n	800972a <__swbuf_r+0x1a>
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f000 f80c 	bl	80097b4 <__swsetup_r>
 800979c:	2800      	cmp	r0, #0
 800979e:	d0cb      	beq.n	8009738 <__swbuf_r+0x28>
 80097a0:	f04f 37ff 	mov.w	r7, #4294967295
 80097a4:	e7ea      	b.n	800977c <__swbuf_r+0x6c>
 80097a6:	bf00      	nop
 80097a8:	0800ac28 	.word	0x0800ac28
 80097ac:	0800ac48 	.word	0x0800ac48
 80097b0:	0800ac08 	.word	0x0800ac08

080097b4 <__swsetup_r>:
 80097b4:	4b32      	ldr	r3, [pc, #200]	; (8009880 <__swsetup_r+0xcc>)
 80097b6:	b570      	push	{r4, r5, r6, lr}
 80097b8:	681d      	ldr	r5, [r3, #0]
 80097ba:	4606      	mov	r6, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	b125      	cbz	r5, 80097ca <__swsetup_r+0x16>
 80097c0:	69ab      	ldr	r3, [r5, #24]
 80097c2:	b913      	cbnz	r3, 80097ca <__swsetup_r+0x16>
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 f99b 	bl	8009b00 <__sinit>
 80097ca:	4b2e      	ldr	r3, [pc, #184]	; (8009884 <__swsetup_r+0xd0>)
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d10f      	bne.n	80097f0 <__swsetup_r+0x3c>
 80097d0:	686c      	ldr	r4, [r5, #4]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097d8:	0719      	lsls	r1, r3, #28
 80097da:	d42c      	bmi.n	8009836 <__swsetup_r+0x82>
 80097dc:	06dd      	lsls	r5, r3, #27
 80097de:	d411      	bmi.n	8009804 <__swsetup_r+0x50>
 80097e0:	2309      	movs	r3, #9
 80097e2:	6033      	str	r3, [r6, #0]
 80097e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	f04f 30ff 	mov.w	r0, #4294967295
 80097ee:	e03e      	b.n	800986e <__swsetup_r+0xba>
 80097f0:	4b25      	ldr	r3, [pc, #148]	; (8009888 <__swsetup_r+0xd4>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <__swsetup_r+0x46>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7eb      	b.n	80097d2 <__swsetup_r+0x1e>
 80097fa:	4b24      	ldr	r3, [pc, #144]	; (800988c <__swsetup_r+0xd8>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	bf08      	it	eq
 8009800:	68ec      	ldreq	r4, [r5, #12]
 8009802:	e7e6      	b.n	80097d2 <__swsetup_r+0x1e>
 8009804:	0758      	lsls	r0, r3, #29
 8009806:	d512      	bpl.n	800982e <__swsetup_r+0x7a>
 8009808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980a:	b141      	cbz	r1, 800981e <__swsetup_r+0x6a>
 800980c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009810:	4299      	cmp	r1, r3
 8009812:	d002      	beq.n	800981a <__swsetup_r+0x66>
 8009814:	4630      	mov	r0, r6
 8009816:	f000 fa8f 	bl	8009d38 <_free_r>
 800981a:	2300      	movs	r3, #0
 800981c:	6363      	str	r3, [r4, #52]	; 0x34
 800981e:	89a3      	ldrh	r3, [r4, #12]
 8009820:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	2300      	movs	r3, #0
 8009828:	6063      	str	r3, [r4, #4]
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	f043 0308 	orr.w	r3, r3, #8
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	b94b      	cbnz	r3, 800984e <__swsetup_r+0x9a>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009844:	d003      	beq.n	800984e <__swsetup_r+0x9a>
 8009846:	4621      	mov	r1, r4
 8009848:	4630      	mov	r0, r6
 800984a:	f000 fa2d 	bl	8009ca8 <__smakebuf_r>
 800984e:	89a0      	ldrh	r0, [r4, #12]
 8009850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009854:	f010 0301 	ands.w	r3, r0, #1
 8009858:	d00a      	beq.n	8009870 <__swsetup_r+0xbc>
 800985a:	2300      	movs	r3, #0
 800985c:	60a3      	str	r3, [r4, #8]
 800985e:	6963      	ldr	r3, [r4, #20]
 8009860:	425b      	negs	r3, r3
 8009862:	61a3      	str	r3, [r4, #24]
 8009864:	6923      	ldr	r3, [r4, #16]
 8009866:	b943      	cbnz	r3, 800987a <__swsetup_r+0xc6>
 8009868:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800986c:	d1ba      	bne.n	80097e4 <__swsetup_r+0x30>
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	0781      	lsls	r1, r0, #30
 8009872:	bf58      	it	pl
 8009874:	6963      	ldrpl	r3, [r4, #20]
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	e7f4      	b.n	8009864 <__swsetup_r+0xb0>
 800987a:	2000      	movs	r0, #0
 800987c:	e7f7      	b.n	800986e <__swsetup_r+0xba>
 800987e:	bf00      	nop
 8009880:	20000018 	.word	0x20000018
 8009884:	0800ac28 	.word	0x0800ac28
 8009888:	0800ac48 	.word	0x0800ac48
 800988c:	0800ac08 	.word	0x0800ac08

08009890 <__assert_func>:
 8009890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009892:	4614      	mov	r4, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4b09      	ldr	r3, [pc, #36]	; (80098bc <__assert_func+0x2c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4605      	mov	r5, r0
 800989c:	68d8      	ldr	r0, [r3, #12]
 800989e:	b14c      	cbz	r4, 80098b4 <__assert_func+0x24>
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <__assert_func+0x30>)
 80098a2:	9100      	str	r1, [sp, #0]
 80098a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098a8:	4906      	ldr	r1, [pc, #24]	; (80098c4 <__assert_func+0x34>)
 80098aa:	462b      	mov	r3, r5
 80098ac:	f000 f9a6 	bl	8009bfc <fiprintf>
 80098b0:	f000 fe88 	bl	800a5c4 <abort>
 80098b4:	4b04      	ldr	r3, [pc, #16]	; (80098c8 <__assert_func+0x38>)
 80098b6:	461c      	mov	r4, r3
 80098b8:	e7f3      	b.n	80098a2 <__assert_func+0x12>
 80098ba:	bf00      	nop
 80098bc:	20000018 	.word	0x20000018
 80098c0:	0800abca 	.word	0x0800abca
 80098c4:	0800abd7 	.word	0x0800abd7
 80098c8:	0800ac05 	.word	0x0800ac05

080098cc <__sflush_r>:
 80098cc:	898a      	ldrh	r2, [r1, #12]
 80098ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	4605      	mov	r5, r0
 80098d4:	0710      	lsls	r0, r2, #28
 80098d6:	460c      	mov	r4, r1
 80098d8:	d458      	bmi.n	800998c <__sflush_r+0xc0>
 80098da:	684b      	ldr	r3, [r1, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dc05      	bgt.n	80098ec <__sflush_r+0x20>
 80098e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dc02      	bgt.n	80098ec <__sflush_r+0x20>
 80098e6:	2000      	movs	r0, #0
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	d0f9      	beq.n	80098e6 <__sflush_r+0x1a>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098f8:	682f      	ldr	r7, [r5, #0]
 80098fa:	602b      	str	r3, [r5, #0]
 80098fc:	d032      	beq.n	8009964 <__sflush_r+0x98>
 80098fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	075a      	lsls	r2, r3, #29
 8009904:	d505      	bpl.n	8009912 <__sflush_r+0x46>
 8009906:	6863      	ldr	r3, [r4, #4]
 8009908:	1ac0      	subs	r0, r0, r3
 800990a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800990c:	b10b      	cbz	r3, 8009912 <__sflush_r+0x46>
 800990e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009910:	1ac0      	subs	r0, r0, r3
 8009912:	2300      	movs	r3, #0
 8009914:	4602      	mov	r2, r0
 8009916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009918:	6a21      	ldr	r1, [r4, #32]
 800991a:	4628      	mov	r0, r5
 800991c:	47b0      	blx	r6
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	d106      	bne.n	8009932 <__sflush_r+0x66>
 8009924:	6829      	ldr	r1, [r5, #0]
 8009926:	291d      	cmp	r1, #29
 8009928:	d82c      	bhi.n	8009984 <__sflush_r+0xb8>
 800992a:	4a2a      	ldr	r2, [pc, #168]	; (80099d4 <__sflush_r+0x108>)
 800992c:	40ca      	lsrs	r2, r1
 800992e:	07d6      	lsls	r6, r2, #31
 8009930:	d528      	bpl.n	8009984 <__sflush_r+0xb8>
 8009932:	2200      	movs	r2, #0
 8009934:	6062      	str	r2, [r4, #4]
 8009936:	04d9      	lsls	r1, r3, #19
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	d504      	bpl.n	8009948 <__sflush_r+0x7c>
 800993e:	1c42      	adds	r2, r0, #1
 8009940:	d101      	bne.n	8009946 <__sflush_r+0x7a>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b903      	cbnz	r3, 8009948 <__sflush_r+0x7c>
 8009946:	6560      	str	r0, [r4, #84]	; 0x54
 8009948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800994a:	602f      	str	r7, [r5, #0]
 800994c:	2900      	cmp	r1, #0
 800994e:	d0ca      	beq.n	80098e6 <__sflush_r+0x1a>
 8009950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009954:	4299      	cmp	r1, r3
 8009956:	d002      	beq.n	800995e <__sflush_r+0x92>
 8009958:	4628      	mov	r0, r5
 800995a:	f000 f9ed 	bl	8009d38 <_free_r>
 800995e:	2000      	movs	r0, #0
 8009960:	6360      	str	r0, [r4, #52]	; 0x34
 8009962:	e7c1      	b.n	80098e8 <__sflush_r+0x1c>
 8009964:	6a21      	ldr	r1, [r4, #32]
 8009966:	2301      	movs	r3, #1
 8009968:	4628      	mov	r0, r5
 800996a:	47b0      	blx	r6
 800996c:	1c41      	adds	r1, r0, #1
 800996e:	d1c7      	bne.n	8009900 <__sflush_r+0x34>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0c4      	beq.n	8009900 <__sflush_r+0x34>
 8009976:	2b1d      	cmp	r3, #29
 8009978:	d001      	beq.n	800997e <__sflush_r+0xb2>
 800997a:	2b16      	cmp	r3, #22
 800997c:	d101      	bne.n	8009982 <__sflush_r+0xb6>
 800997e:	602f      	str	r7, [r5, #0]
 8009980:	e7b1      	b.n	80098e6 <__sflush_r+0x1a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009988:	81a3      	strh	r3, [r4, #12]
 800998a:	e7ad      	b.n	80098e8 <__sflush_r+0x1c>
 800998c:	690f      	ldr	r7, [r1, #16]
 800998e:	2f00      	cmp	r7, #0
 8009990:	d0a9      	beq.n	80098e6 <__sflush_r+0x1a>
 8009992:	0793      	lsls	r3, r2, #30
 8009994:	680e      	ldr	r6, [r1, #0]
 8009996:	bf08      	it	eq
 8009998:	694b      	ldreq	r3, [r1, #20]
 800999a:	600f      	str	r7, [r1, #0]
 800999c:	bf18      	it	ne
 800999e:	2300      	movne	r3, #0
 80099a0:	eba6 0807 	sub.w	r8, r6, r7
 80099a4:	608b      	str	r3, [r1, #8]
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	dd9c      	ble.n	80098e6 <__sflush_r+0x1a>
 80099ac:	6a21      	ldr	r1, [r4, #32]
 80099ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099b0:	4643      	mov	r3, r8
 80099b2:	463a      	mov	r2, r7
 80099b4:	4628      	mov	r0, r5
 80099b6:	47b0      	blx	r6
 80099b8:	2800      	cmp	r0, #0
 80099ba:	dc06      	bgt.n	80099ca <__sflush_r+0xfe>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e78e      	b.n	80098e8 <__sflush_r+0x1c>
 80099ca:	4407      	add	r7, r0
 80099cc:	eba8 0800 	sub.w	r8, r8, r0
 80099d0:	e7e9      	b.n	80099a6 <__sflush_r+0xda>
 80099d2:	bf00      	nop
 80099d4:	20400001 	.word	0x20400001

080099d8 <_fflush_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	690b      	ldr	r3, [r1, #16]
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b913      	cbnz	r3, 80099e8 <_fflush_r+0x10>
 80099e2:	2500      	movs	r5, #0
 80099e4:	4628      	mov	r0, r5
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	b118      	cbz	r0, 80099f2 <_fflush_r+0x1a>
 80099ea:	6983      	ldr	r3, [r0, #24]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_fflush_r+0x1a>
 80099ee:	f000 f887 	bl	8009b00 <__sinit>
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <_fflush_r+0x6c>)
 80099f4:	429c      	cmp	r4, r3
 80099f6:	d11b      	bne.n	8009a30 <_fflush_r+0x58>
 80099f8:	686c      	ldr	r4, [r5, #4]
 80099fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0ef      	beq.n	80099e2 <_fflush_r+0xa>
 8009a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a04:	07d0      	lsls	r0, r2, #31
 8009a06:	d404      	bmi.n	8009a12 <_fflush_r+0x3a>
 8009a08:	0599      	lsls	r1, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_fflush_r+0x3a>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f7ff fbf8 	bl	8009202 <__retarget_lock_acquire_recursive>
 8009a12:	4628      	mov	r0, r5
 8009a14:	4621      	mov	r1, r4
 8009a16:	f7ff ff59 	bl	80098cc <__sflush_r>
 8009a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a1c:	07da      	lsls	r2, r3, #31
 8009a1e:	4605      	mov	r5, r0
 8009a20:	d4e0      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	059b      	lsls	r3, r3, #22
 8009a26:	d4dd      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a2a:	f7ff fbeb 	bl	8009204 <__retarget_lock_release_recursive>
 8009a2e:	e7d9      	b.n	80099e4 <_fflush_r+0xc>
 8009a30:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <_fflush_r+0x70>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d101      	bne.n	8009a3a <_fflush_r+0x62>
 8009a36:	68ac      	ldr	r4, [r5, #8]
 8009a38:	e7df      	b.n	80099fa <_fflush_r+0x22>
 8009a3a:	4b04      	ldr	r3, [pc, #16]	; (8009a4c <_fflush_r+0x74>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	bf08      	it	eq
 8009a40:	68ec      	ldreq	r4, [r5, #12]
 8009a42:	e7da      	b.n	80099fa <_fflush_r+0x22>
 8009a44:	0800ac28 	.word	0x0800ac28
 8009a48:	0800ac48 	.word	0x0800ac48
 8009a4c:	0800ac08 	.word	0x0800ac08

08009a50 <std>:
 8009a50:	2300      	movs	r3, #0
 8009a52:	b510      	push	{r4, lr}
 8009a54:	4604      	mov	r4, r0
 8009a56:	e9c0 3300 	strd	r3, r3, [r0]
 8009a5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a5e:	6083      	str	r3, [r0, #8]
 8009a60:	8181      	strh	r1, [r0, #12]
 8009a62:	6643      	str	r3, [r0, #100]	; 0x64
 8009a64:	81c2      	strh	r2, [r0, #14]
 8009a66:	6183      	str	r3, [r0, #24]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	2208      	movs	r2, #8
 8009a6c:	305c      	adds	r0, #92	; 0x5c
 8009a6e:	f7ff fbd8 	bl	8009222 <memset>
 8009a72:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <std+0x38>)
 8009a74:	6263      	str	r3, [r4, #36]	; 0x24
 8009a76:	4b05      	ldr	r3, [pc, #20]	; (8009a8c <std+0x3c>)
 8009a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <std+0x40>)
 8009a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a7e:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <std+0x44>)
 8009a80:	6224      	str	r4, [r4, #32]
 8009a82:	6323      	str	r3, [r4, #48]	; 0x30
 8009a84:	bd10      	pop	{r4, pc}
 8009a86:	bf00      	nop
 8009a88:	0800a519 	.word	0x0800a519
 8009a8c:	0800a53b 	.word	0x0800a53b
 8009a90:	0800a573 	.word	0x0800a573
 8009a94:	0800a597 	.word	0x0800a597

08009a98 <_cleanup_r>:
 8009a98:	4901      	ldr	r1, [pc, #4]	; (8009aa0 <_cleanup_r+0x8>)
 8009a9a:	f000 b8c1 	b.w	8009c20 <_fwalk_reent>
 8009a9e:	bf00      	nop
 8009aa0:	080099d9 	.word	0x080099d9

08009aa4 <__sfmoreglue>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	1e4a      	subs	r2, r1, #1
 8009aa8:	2568      	movs	r5, #104	; 0x68
 8009aaa:	4355      	muls	r5, r2
 8009aac:	460e      	mov	r6, r1
 8009aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ab2:	f000 f991 	bl	8009dd8 <_malloc_r>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b140      	cbz	r0, 8009acc <__sfmoreglue+0x28>
 8009aba:	2100      	movs	r1, #0
 8009abc:	e9c0 1600 	strd	r1, r6, [r0]
 8009ac0:	300c      	adds	r0, #12
 8009ac2:	60a0      	str	r0, [r4, #8]
 8009ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ac8:	f7ff fbab 	bl	8009222 <memset>
 8009acc:	4620      	mov	r0, r4
 8009ace:	bd70      	pop	{r4, r5, r6, pc}

08009ad0 <__sfp_lock_acquire>:
 8009ad0:	4801      	ldr	r0, [pc, #4]	; (8009ad8 <__sfp_lock_acquire+0x8>)
 8009ad2:	f7ff bb96 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009ad6:	bf00      	nop
 8009ad8:	200020bc 	.word	0x200020bc

08009adc <__sfp_lock_release>:
 8009adc:	4801      	ldr	r0, [pc, #4]	; (8009ae4 <__sfp_lock_release+0x8>)
 8009ade:	f7ff bb91 	b.w	8009204 <__retarget_lock_release_recursive>
 8009ae2:	bf00      	nop
 8009ae4:	200020bc 	.word	0x200020bc

08009ae8 <__sinit_lock_acquire>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	; (8009af0 <__sinit_lock_acquire+0x8>)
 8009aea:	f7ff bb8a 	b.w	8009202 <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	200020b7 	.word	0x200020b7

08009af4 <__sinit_lock_release>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__sinit_lock_release+0x8>)
 8009af6:	f7ff bb85 	b.w	8009204 <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	200020b7 	.word	0x200020b7

08009b00 <__sinit>:
 8009b00:	b510      	push	{r4, lr}
 8009b02:	4604      	mov	r4, r0
 8009b04:	f7ff fff0 	bl	8009ae8 <__sinit_lock_acquire>
 8009b08:	69a3      	ldr	r3, [r4, #24]
 8009b0a:	b11b      	cbz	r3, 8009b14 <__sinit+0x14>
 8009b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b10:	f7ff bff0 	b.w	8009af4 <__sinit_lock_release>
 8009b14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b18:	6523      	str	r3, [r4, #80]	; 0x50
 8009b1a:	4b13      	ldr	r3, [pc, #76]	; (8009b68 <__sinit+0x68>)
 8009b1c:	4a13      	ldr	r2, [pc, #76]	; (8009b6c <__sinit+0x6c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	bf04      	itt	eq
 8009b26:	2301      	moveq	r3, #1
 8009b28:	61a3      	streq	r3, [r4, #24]
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 f820 	bl	8009b70 <__sfp>
 8009b30:	6060      	str	r0, [r4, #4]
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f81c 	bl	8009b70 <__sfp>
 8009b38:	60a0      	str	r0, [r4, #8]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 f818 	bl	8009b70 <__sfp>
 8009b40:	2200      	movs	r2, #0
 8009b42:	60e0      	str	r0, [r4, #12]
 8009b44:	2104      	movs	r1, #4
 8009b46:	6860      	ldr	r0, [r4, #4]
 8009b48:	f7ff ff82 	bl	8009a50 <std>
 8009b4c:	68a0      	ldr	r0, [r4, #8]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	2109      	movs	r1, #9
 8009b52:	f7ff ff7d 	bl	8009a50 <std>
 8009b56:	68e0      	ldr	r0, [r4, #12]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	2112      	movs	r1, #18
 8009b5c:	f7ff ff78 	bl	8009a50 <std>
 8009b60:	2301      	movs	r3, #1
 8009b62:	61a3      	str	r3, [r4, #24]
 8009b64:	e7d2      	b.n	8009b0c <__sinit+0xc>
 8009b66:	bf00      	nop
 8009b68:	0800ab50 	.word	0x0800ab50
 8009b6c:	08009a99 	.word	0x08009a99

08009b70 <__sfp>:
 8009b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b72:	4607      	mov	r7, r0
 8009b74:	f7ff ffac 	bl	8009ad0 <__sfp_lock_acquire>
 8009b78:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <__sfp+0x84>)
 8009b7a:	681e      	ldr	r6, [r3, #0]
 8009b7c:	69b3      	ldr	r3, [r6, #24]
 8009b7e:	b913      	cbnz	r3, 8009b86 <__sfp+0x16>
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7ff ffbd 	bl	8009b00 <__sinit>
 8009b86:	3648      	adds	r6, #72	; 0x48
 8009b88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	d503      	bpl.n	8009b98 <__sfp+0x28>
 8009b90:	6833      	ldr	r3, [r6, #0]
 8009b92:	b30b      	cbz	r3, 8009bd8 <__sfp+0x68>
 8009b94:	6836      	ldr	r6, [r6, #0]
 8009b96:	e7f7      	b.n	8009b88 <__sfp+0x18>
 8009b98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b9c:	b9d5      	cbnz	r5, 8009bd4 <__sfp+0x64>
 8009b9e:	4b16      	ldr	r3, [pc, #88]	; (8009bf8 <__sfp+0x88>)
 8009ba0:	60e3      	str	r3, [r4, #12]
 8009ba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ba6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ba8:	f7ff fb2a 	bl	8009200 <__retarget_lock_init_recursive>
 8009bac:	f7ff ff96 	bl	8009adc <__sfp_lock_release>
 8009bb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bb8:	6025      	str	r5, [r4, #0]
 8009bba:	61a5      	str	r5, [r4, #24]
 8009bbc:	2208      	movs	r2, #8
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009bc4:	f7ff fb2d 	bl	8009222 <memset>
 8009bc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	3468      	adds	r4, #104	; 0x68
 8009bd6:	e7d9      	b.n	8009b8c <__sfp+0x1c>
 8009bd8:	2104      	movs	r1, #4
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f7ff ff62 	bl	8009aa4 <__sfmoreglue>
 8009be0:	4604      	mov	r4, r0
 8009be2:	6030      	str	r0, [r6, #0]
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d1d5      	bne.n	8009b94 <__sfp+0x24>
 8009be8:	f7ff ff78 	bl	8009adc <__sfp_lock_release>
 8009bec:	230c      	movs	r3, #12
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	e7ee      	b.n	8009bd0 <__sfp+0x60>
 8009bf2:	bf00      	nop
 8009bf4:	0800ab50 	.word	0x0800ab50
 8009bf8:	ffff0001 	.word	0xffff0001

08009bfc <fiprintf>:
 8009bfc:	b40e      	push	{r1, r2, r3}
 8009bfe:	b503      	push	{r0, r1, lr}
 8009c00:	4601      	mov	r1, r0
 8009c02:	ab03      	add	r3, sp, #12
 8009c04:	4805      	ldr	r0, [pc, #20]	; (8009c1c <fiprintf+0x20>)
 8009c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	f000 f967 	bl	8009ee0 <_vfiprintf_r>
 8009c12:	b002      	add	sp, #8
 8009c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c18:	b003      	add	sp, #12
 8009c1a:	4770      	bx	lr
 8009c1c:	20000018 	.word	0x20000018

08009c20 <_fwalk_reent>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	4606      	mov	r6, r0
 8009c26:	4688      	mov	r8, r1
 8009c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c32:	f1b9 0901 	subs.w	r9, r9, #1
 8009c36:	d505      	bpl.n	8009c44 <_fwalk_reent+0x24>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	2c00      	cmp	r4, #0
 8009c3c:	d1f7      	bne.n	8009c2e <_fwalk_reent+0xe>
 8009c3e:	4638      	mov	r0, r7
 8009c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d907      	bls.n	8009c5a <_fwalk_reent+0x3a>
 8009c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	d003      	beq.n	8009c5a <_fwalk_reent+0x3a>
 8009c52:	4629      	mov	r1, r5
 8009c54:	4630      	mov	r0, r6
 8009c56:	47c0      	blx	r8
 8009c58:	4307      	orrs	r7, r0
 8009c5a:	3568      	adds	r5, #104	; 0x68
 8009c5c:	e7e9      	b.n	8009c32 <_fwalk_reent+0x12>

08009c5e <__swhatbuf_r>:
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	460e      	mov	r6, r1
 8009c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c66:	2900      	cmp	r1, #0
 8009c68:	b096      	sub	sp, #88	; 0x58
 8009c6a:	4614      	mov	r4, r2
 8009c6c:	461d      	mov	r5, r3
 8009c6e:	da07      	bge.n	8009c80 <__swhatbuf_r+0x22>
 8009c70:	2300      	movs	r3, #0
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	89b3      	ldrh	r3, [r6, #12]
 8009c76:	061a      	lsls	r2, r3, #24
 8009c78:	d410      	bmi.n	8009c9c <__swhatbuf_r+0x3e>
 8009c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7e:	e00e      	b.n	8009c9e <__swhatbuf_r+0x40>
 8009c80:	466a      	mov	r2, sp
 8009c82:	f000 fcb7 	bl	800a5f4 <_fstat_r>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	dbf2      	blt.n	8009c70 <__swhatbuf_r+0x12>
 8009c8a:	9a01      	ldr	r2, [sp, #4]
 8009c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c94:	425a      	negs	r2, r3
 8009c96:	415a      	adcs	r2, r3
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	e7ee      	b.n	8009c7a <__swhatbuf_r+0x1c>
 8009c9c:	2340      	movs	r3, #64	; 0x40
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	b016      	add	sp, #88	; 0x58
 8009ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ca8 <__smakebuf_r>:
 8009ca8:	898b      	ldrh	r3, [r1, #12]
 8009caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cac:	079d      	lsls	r5, r3, #30
 8009cae:	4606      	mov	r6, r0
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	d507      	bpl.n	8009cc4 <__smakebuf_r+0x1c>
 8009cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	6123      	str	r3, [r4, #16]
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	6163      	str	r3, [r4, #20]
 8009cc0:	b002      	add	sp, #8
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	ab01      	add	r3, sp, #4
 8009cc6:	466a      	mov	r2, sp
 8009cc8:	f7ff ffc9 	bl	8009c5e <__swhatbuf_r>
 8009ccc:	9900      	ldr	r1, [sp, #0]
 8009cce:	4605      	mov	r5, r0
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 f881 	bl	8009dd8 <_malloc_r>
 8009cd6:	b948      	cbnz	r0, 8009cec <__smakebuf_r+0x44>
 8009cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cdc:	059a      	lsls	r2, r3, #22
 8009cde:	d4ef      	bmi.n	8009cc0 <__smakebuf_r+0x18>
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	f043 0302 	orr.w	r3, r3, #2
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	e7e3      	b.n	8009cb4 <__smakebuf_r+0xc>
 8009cec:	4b0d      	ldr	r3, [pc, #52]	; (8009d24 <__smakebuf_r+0x7c>)
 8009cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	6020      	str	r0, [r4, #0]
 8009cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	9b00      	ldr	r3, [sp, #0]
 8009cfc:	6163      	str	r3, [r4, #20]
 8009cfe:	9b01      	ldr	r3, [sp, #4]
 8009d00:	6120      	str	r0, [r4, #16]
 8009d02:	b15b      	cbz	r3, 8009d1c <__smakebuf_r+0x74>
 8009d04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 fc85 	bl	800a618 <_isatty_r>
 8009d0e:	b128      	cbz	r0, 8009d1c <__smakebuf_r+0x74>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	f043 0301 	orr.w	r3, r3, #1
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	89a0      	ldrh	r0, [r4, #12]
 8009d1e:	4305      	orrs	r5, r0
 8009d20:	81a5      	strh	r5, [r4, #12]
 8009d22:	e7cd      	b.n	8009cc0 <__smakebuf_r+0x18>
 8009d24:	08009a99 	.word	0x08009a99

08009d28 <malloc>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <malloc+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f000 b853 	b.w	8009dd8 <_malloc_r>
 8009d32:	bf00      	nop
 8009d34:	20000018 	.word	0x20000018

08009d38 <_free_r>:
 8009d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d3a:	2900      	cmp	r1, #0
 8009d3c:	d048      	beq.n	8009dd0 <_free_r+0x98>
 8009d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d42:	9001      	str	r0, [sp, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f1a1 0404 	sub.w	r4, r1, #4
 8009d4a:	bfb8      	it	lt
 8009d4c:	18e4      	addlt	r4, r4, r3
 8009d4e:	f000 fc85 	bl	800a65c <__malloc_lock>
 8009d52:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <_free_r+0x9c>)
 8009d54:	9801      	ldr	r0, [sp, #4]
 8009d56:	6813      	ldr	r3, [r2, #0]
 8009d58:	4615      	mov	r5, r2
 8009d5a:	b933      	cbnz	r3, 8009d6a <_free_r+0x32>
 8009d5c:	6063      	str	r3, [r4, #4]
 8009d5e:	6014      	str	r4, [r2, #0]
 8009d60:	b003      	add	sp, #12
 8009d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d66:	f000 bc7f 	b.w	800a668 <__malloc_unlock>
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	d90b      	bls.n	8009d86 <_free_r+0x4e>
 8009d6e:	6821      	ldr	r1, [r4, #0]
 8009d70:	1862      	adds	r2, r4, r1
 8009d72:	4293      	cmp	r3, r2
 8009d74:	bf04      	itt	eq
 8009d76:	681a      	ldreq	r2, [r3, #0]
 8009d78:	685b      	ldreq	r3, [r3, #4]
 8009d7a:	6063      	str	r3, [r4, #4]
 8009d7c:	bf04      	itt	eq
 8009d7e:	1852      	addeq	r2, r2, r1
 8009d80:	6022      	streq	r2, [r4, #0]
 8009d82:	602c      	str	r4, [r5, #0]
 8009d84:	e7ec      	b.n	8009d60 <_free_r+0x28>
 8009d86:	461a      	mov	r2, r3
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	b10b      	cbz	r3, 8009d90 <_free_r+0x58>
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	d9fa      	bls.n	8009d86 <_free_r+0x4e>
 8009d90:	6811      	ldr	r1, [r2, #0]
 8009d92:	1855      	adds	r5, r2, r1
 8009d94:	42a5      	cmp	r5, r4
 8009d96:	d10b      	bne.n	8009db0 <_free_r+0x78>
 8009d98:	6824      	ldr	r4, [r4, #0]
 8009d9a:	4421      	add	r1, r4
 8009d9c:	1854      	adds	r4, r2, r1
 8009d9e:	42a3      	cmp	r3, r4
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	d1dd      	bne.n	8009d60 <_free_r+0x28>
 8009da4:	681c      	ldr	r4, [r3, #0]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	6053      	str	r3, [r2, #4]
 8009daa:	4421      	add	r1, r4
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	e7d7      	b.n	8009d60 <_free_r+0x28>
 8009db0:	d902      	bls.n	8009db8 <_free_r+0x80>
 8009db2:	230c      	movs	r3, #12
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	e7d3      	b.n	8009d60 <_free_r+0x28>
 8009db8:	6825      	ldr	r5, [r4, #0]
 8009dba:	1961      	adds	r1, r4, r5
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	bf04      	itt	eq
 8009dc0:	6819      	ldreq	r1, [r3, #0]
 8009dc2:	685b      	ldreq	r3, [r3, #4]
 8009dc4:	6063      	str	r3, [r4, #4]
 8009dc6:	bf04      	itt	eq
 8009dc8:	1949      	addeq	r1, r1, r5
 8009dca:	6021      	streq	r1, [r4, #0]
 8009dcc:	6054      	str	r4, [r2, #4]
 8009dce:	e7c7      	b.n	8009d60 <_free_r+0x28>
 8009dd0:	b003      	add	sp, #12
 8009dd2:	bd30      	pop	{r4, r5, pc}
 8009dd4:	200000c0 	.word	0x200000c0

08009dd8 <_malloc_r>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	1ccd      	adds	r5, r1, #3
 8009ddc:	f025 0503 	bic.w	r5, r5, #3
 8009de0:	3508      	adds	r5, #8
 8009de2:	2d0c      	cmp	r5, #12
 8009de4:	bf38      	it	cc
 8009de6:	250c      	movcc	r5, #12
 8009de8:	2d00      	cmp	r5, #0
 8009dea:	4606      	mov	r6, r0
 8009dec:	db01      	blt.n	8009df2 <_malloc_r+0x1a>
 8009dee:	42a9      	cmp	r1, r5
 8009df0:	d903      	bls.n	8009dfa <_malloc_r+0x22>
 8009df2:	230c      	movs	r3, #12
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	2000      	movs	r0, #0
 8009df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dfa:	f000 fc2f 	bl	800a65c <__malloc_lock>
 8009dfe:	4921      	ldr	r1, [pc, #132]	; (8009e84 <_malloc_r+0xac>)
 8009e00:	680a      	ldr	r2, [r1, #0]
 8009e02:	4614      	mov	r4, r2
 8009e04:	b99c      	cbnz	r4, 8009e2e <_malloc_r+0x56>
 8009e06:	4f20      	ldr	r7, [pc, #128]	; (8009e88 <_malloc_r+0xb0>)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	b923      	cbnz	r3, 8009e16 <_malloc_r+0x3e>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f000 fb72 	bl	800a4f8 <_sbrk_r>
 8009e14:	6038      	str	r0, [r7, #0]
 8009e16:	4629      	mov	r1, r5
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f000 fb6d 	bl	800a4f8 <_sbrk_r>
 8009e1e:	1c43      	adds	r3, r0, #1
 8009e20:	d123      	bne.n	8009e6a <_malloc_r+0x92>
 8009e22:	230c      	movs	r3, #12
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	4630      	mov	r0, r6
 8009e28:	f000 fc1e 	bl	800a668 <__malloc_unlock>
 8009e2c:	e7e3      	b.n	8009df6 <_malloc_r+0x1e>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	1b5b      	subs	r3, r3, r5
 8009e32:	d417      	bmi.n	8009e64 <_malloc_r+0x8c>
 8009e34:	2b0b      	cmp	r3, #11
 8009e36:	d903      	bls.n	8009e40 <_malloc_r+0x68>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	441c      	add	r4, r3
 8009e3c:	6025      	str	r5, [r4, #0]
 8009e3e:	e004      	b.n	8009e4a <_malloc_r+0x72>
 8009e40:	6863      	ldr	r3, [r4, #4]
 8009e42:	42a2      	cmp	r2, r4
 8009e44:	bf0c      	ite	eq
 8009e46:	600b      	streq	r3, [r1, #0]
 8009e48:	6053      	strne	r3, [r2, #4]
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	f000 fc0c 	bl	800a668 <__malloc_unlock>
 8009e50:	f104 000b 	add.w	r0, r4, #11
 8009e54:	1d23      	adds	r3, r4, #4
 8009e56:	f020 0007 	bic.w	r0, r0, #7
 8009e5a:	1ac2      	subs	r2, r0, r3
 8009e5c:	d0cc      	beq.n	8009df8 <_malloc_r+0x20>
 8009e5e:	1a1b      	subs	r3, r3, r0
 8009e60:	50a3      	str	r3, [r4, r2]
 8009e62:	e7c9      	b.n	8009df8 <_malloc_r+0x20>
 8009e64:	4622      	mov	r2, r4
 8009e66:	6864      	ldr	r4, [r4, #4]
 8009e68:	e7cc      	b.n	8009e04 <_malloc_r+0x2c>
 8009e6a:	1cc4      	adds	r4, r0, #3
 8009e6c:	f024 0403 	bic.w	r4, r4, #3
 8009e70:	42a0      	cmp	r0, r4
 8009e72:	d0e3      	beq.n	8009e3c <_malloc_r+0x64>
 8009e74:	1a21      	subs	r1, r4, r0
 8009e76:	4630      	mov	r0, r6
 8009e78:	f000 fb3e 	bl	800a4f8 <_sbrk_r>
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d1dd      	bne.n	8009e3c <_malloc_r+0x64>
 8009e80:	e7cf      	b.n	8009e22 <_malloc_r+0x4a>
 8009e82:	bf00      	nop
 8009e84:	200000c0 	.word	0x200000c0
 8009e88:	200000c4 	.word	0x200000c4

08009e8c <__sfputc_r>:
 8009e8c:	6893      	ldr	r3, [r2, #8]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	b410      	push	{r4}
 8009e94:	6093      	str	r3, [r2, #8]
 8009e96:	da08      	bge.n	8009eaa <__sfputc_r+0x1e>
 8009e98:	6994      	ldr	r4, [r2, #24]
 8009e9a:	42a3      	cmp	r3, r4
 8009e9c:	db01      	blt.n	8009ea2 <__sfputc_r+0x16>
 8009e9e:	290a      	cmp	r1, #10
 8009ea0:	d103      	bne.n	8009eaa <__sfputc_r+0x1e>
 8009ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ea6:	f7ff bc33 	b.w	8009710 <__swbuf_r>
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	1c58      	adds	r0, r3, #1
 8009eae:	6010      	str	r0, [r2, #0]
 8009eb0:	7019      	strb	r1, [r3, #0]
 8009eb2:	4608      	mov	r0, r1
 8009eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <__sfputs_r>:
 8009eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	18d5      	adds	r5, r2, r3
 8009ec4:	42ac      	cmp	r4, r5
 8009ec6:	d101      	bne.n	8009ecc <__sfputs_r+0x12>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	e007      	b.n	8009edc <__sfputs_r+0x22>
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	463a      	mov	r2, r7
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f7ff ffda 	bl	8009e8c <__sfputc_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d1f3      	bne.n	8009ec4 <__sfputs_r+0xa>
 8009edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee0 <_vfiprintf_r>:
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	b09d      	sub	sp, #116	; 0x74
 8009ee8:	4614      	mov	r4, r2
 8009eea:	4698      	mov	r8, r3
 8009eec:	4606      	mov	r6, r0
 8009eee:	b118      	cbz	r0, 8009ef8 <_vfiprintf_r+0x18>
 8009ef0:	6983      	ldr	r3, [r0, #24]
 8009ef2:	b90b      	cbnz	r3, 8009ef8 <_vfiprintf_r+0x18>
 8009ef4:	f7ff fe04 	bl	8009b00 <__sinit>
 8009ef8:	4b89      	ldr	r3, [pc, #548]	; (800a120 <_vfiprintf_r+0x240>)
 8009efa:	429d      	cmp	r5, r3
 8009efc:	d11b      	bne.n	8009f36 <_vfiprintf_r+0x56>
 8009efe:	6875      	ldr	r5, [r6, #4]
 8009f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f02:	07d9      	lsls	r1, r3, #31
 8009f04:	d405      	bmi.n	8009f12 <_vfiprintf_r+0x32>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	059a      	lsls	r2, r3, #22
 8009f0a:	d402      	bmi.n	8009f12 <_vfiprintf_r+0x32>
 8009f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0e:	f7ff f978 	bl	8009202 <__retarget_lock_acquire_recursive>
 8009f12:	89ab      	ldrh	r3, [r5, #12]
 8009f14:	071b      	lsls	r3, r3, #28
 8009f16:	d501      	bpl.n	8009f1c <_vfiprintf_r+0x3c>
 8009f18:	692b      	ldr	r3, [r5, #16]
 8009f1a:	b9eb      	cbnz	r3, 8009f58 <_vfiprintf_r+0x78>
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f7ff fc48 	bl	80097b4 <__swsetup_r>
 8009f24:	b1c0      	cbz	r0, 8009f58 <_vfiprintf_r+0x78>
 8009f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f28:	07dc      	lsls	r4, r3, #31
 8009f2a:	d50e      	bpl.n	8009f4a <_vfiprintf_r+0x6a>
 8009f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f30:	b01d      	add	sp, #116	; 0x74
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	4b7b      	ldr	r3, [pc, #492]	; (800a124 <_vfiprintf_r+0x244>)
 8009f38:	429d      	cmp	r5, r3
 8009f3a:	d101      	bne.n	8009f40 <_vfiprintf_r+0x60>
 8009f3c:	68b5      	ldr	r5, [r6, #8]
 8009f3e:	e7df      	b.n	8009f00 <_vfiprintf_r+0x20>
 8009f40:	4b79      	ldr	r3, [pc, #484]	; (800a128 <_vfiprintf_r+0x248>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	bf08      	it	eq
 8009f46:	68f5      	ldreq	r5, [r6, #12]
 8009f48:	e7da      	b.n	8009f00 <_vfiprintf_r+0x20>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	0598      	lsls	r0, r3, #22
 8009f4e:	d4ed      	bmi.n	8009f2c <_vfiprintf_r+0x4c>
 8009f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f52:	f7ff f957 	bl	8009204 <__retarget_lock_release_recursive>
 8009f56:	e7e9      	b.n	8009f2c <_vfiprintf_r+0x4c>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	2320      	movs	r3, #32
 8009f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f66:	2330      	movs	r3, #48	; 0x30
 8009f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a12c <_vfiprintf_r+0x24c>
 8009f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f70:	f04f 0901 	mov.w	r9, #1
 8009f74:	4623      	mov	r3, r4
 8009f76:	469a      	mov	sl, r3
 8009f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f7c:	b10a      	cbz	r2, 8009f82 <_vfiprintf_r+0xa2>
 8009f7e:	2a25      	cmp	r2, #37	; 0x25
 8009f80:	d1f9      	bne.n	8009f76 <_vfiprintf_r+0x96>
 8009f82:	ebba 0b04 	subs.w	fp, sl, r4
 8009f86:	d00b      	beq.n	8009fa0 <_vfiprintf_r+0xc0>
 8009f88:	465b      	mov	r3, fp
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f7ff ff93 	bl	8009eba <__sfputs_r>
 8009f94:	3001      	adds	r0, #1
 8009f96:	f000 80aa 	beq.w	800a0ee <_vfiprintf_r+0x20e>
 8009f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f9c:	445a      	add	r2, fp
 8009f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80a2 	beq.w	800a0ee <_vfiprintf_r+0x20e>
 8009faa:	2300      	movs	r3, #0
 8009fac:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb4:	f10a 0a01 	add.w	sl, sl, #1
 8009fb8:	9304      	str	r3, [sp, #16]
 8009fba:	9307      	str	r3, [sp, #28]
 8009fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8009fc2:	4654      	mov	r4, sl
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	4858      	ldr	r0, [pc, #352]	; (800a12c <_vfiprintf_r+0x24c>)
 8009fcc:	f7f6 f900 	bl	80001d0 <memchr>
 8009fd0:	9a04      	ldr	r2, [sp, #16]
 8009fd2:	b9d8      	cbnz	r0, 800a00c <_vfiprintf_r+0x12c>
 8009fd4:	06d1      	lsls	r1, r2, #27
 8009fd6:	bf44      	itt	mi
 8009fd8:	2320      	movmi	r3, #32
 8009fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fde:	0713      	lsls	r3, r2, #28
 8009fe0:	bf44      	itt	mi
 8009fe2:	232b      	movmi	r3, #43	; 0x2b
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8009fec:	2b2a      	cmp	r3, #42	; 0x2a
 8009fee:	d015      	beq.n	800a01c <_vfiprintf_r+0x13c>
 8009ff0:	9a07      	ldr	r2, [sp, #28]
 8009ff2:	4654      	mov	r4, sl
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	f04f 0c0a 	mov.w	ip, #10
 8009ffa:	4621      	mov	r1, r4
 8009ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a000:	3b30      	subs	r3, #48	; 0x30
 800a002:	2b09      	cmp	r3, #9
 800a004:	d94e      	bls.n	800a0a4 <_vfiprintf_r+0x1c4>
 800a006:	b1b0      	cbz	r0, 800a036 <_vfiprintf_r+0x156>
 800a008:	9207      	str	r2, [sp, #28]
 800a00a:	e014      	b.n	800a036 <_vfiprintf_r+0x156>
 800a00c:	eba0 0308 	sub.w	r3, r0, r8
 800a010:	fa09 f303 	lsl.w	r3, r9, r3
 800a014:	4313      	orrs	r3, r2
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	46a2      	mov	sl, r4
 800a01a:	e7d2      	b.n	8009fc2 <_vfiprintf_r+0xe2>
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	1d19      	adds	r1, r3, #4
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	9103      	str	r1, [sp, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	bfbb      	ittet	lt
 800a028:	425b      	neglt	r3, r3
 800a02a:	f042 0202 	orrlt.w	r2, r2, #2
 800a02e:	9307      	strge	r3, [sp, #28]
 800a030:	9307      	strlt	r3, [sp, #28]
 800a032:	bfb8      	it	lt
 800a034:	9204      	strlt	r2, [sp, #16]
 800a036:	7823      	ldrb	r3, [r4, #0]
 800a038:	2b2e      	cmp	r3, #46	; 0x2e
 800a03a:	d10c      	bne.n	800a056 <_vfiprintf_r+0x176>
 800a03c:	7863      	ldrb	r3, [r4, #1]
 800a03e:	2b2a      	cmp	r3, #42	; 0x2a
 800a040:	d135      	bne.n	800a0ae <_vfiprintf_r+0x1ce>
 800a042:	9b03      	ldr	r3, [sp, #12]
 800a044:	1d1a      	adds	r2, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	9203      	str	r2, [sp, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bfb8      	it	lt
 800a04e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a052:	3402      	adds	r4, #2
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a13c <_vfiprintf_r+0x25c>
 800a05a:	7821      	ldrb	r1, [r4, #0]
 800a05c:	2203      	movs	r2, #3
 800a05e:	4650      	mov	r0, sl
 800a060:	f7f6 f8b6 	bl	80001d0 <memchr>
 800a064:	b140      	cbz	r0, 800a078 <_vfiprintf_r+0x198>
 800a066:	2340      	movs	r3, #64	; 0x40
 800a068:	eba0 000a 	sub.w	r0, r0, sl
 800a06c:	fa03 f000 	lsl.w	r0, r3, r0
 800a070:	9b04      	ldr	r3, [sp, #16]
 800a072:	4303      	orrs	r3, r0
 800a074:	3401      	adds	r4, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07c:	482c      	ldr	r0, [pc, #176]	; (800a130 <_vfiprintf_r+0x250>)
 800a07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a082:	2206      	movs	r2, #6
 800a084:	f7f6 f8a4 	bl	80001d0 <memchr>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d03f      	beq.n	800a10c <_vfiprintf_r+0x22c>
 800a08c:	4b29      	ldr	r3, [pc, #164]	; (800a134 <_vfiprintf_r+0x254>)
 800a08e:	bb1b      	cbnz	r3, 800a0d8 <_vfiprintf_r+0x1f8>
 800a090:	9b03      	ldr	r3, [sp, #12]
 800a092:	3307      	adds	r3, #7
 800a094:	f023 0307 	bic.w	r3, r3, #7
 800a098:	3308      	adds	r3, #8
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09e:	443b      	add	r3, r7
 800a0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a2:	e767      	b.n	8009f74 <_vfiprintf_r+0x94>
 800a0a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	e7a5      	b.n	8009ffa <_vfiprintf_r+0x11a>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	9305      	str	r3, [sp, #20]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c0:	3a30      	subs	r2, #48	; 0x30
 800a0c2:	2a09      	cmp	r2, #9
 800a0c4:	d903      	bls.n	800a0ce <_vfiprintf_r+0x1ee>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0c5      	beq.n	800a056 <_vfiprintf_r+0x176>
 800a0ca:	9105      	str	r1, [sp, #20]
 800a0cc:	e7c3      	b.n	800a056 <_vfiprintf_r+0x176>
 800a0ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e7f0      	b.n	800a0ba <_vfiprintf_r+0x1da>
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	462a      	mov	r2, r5
 800a0de:	4b16      	ldr	r3, [pc, #88]	; (800a138 <_vfiprintf_r+0x258>)
 800a0e0:	a904      	add	r1, sp, #16
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	1c78      	adds	r0, r7, #1
 800a0ec:	d1d6      	bne.n	800a09c <_vfiprintf_r+0x1bc>
 800a0ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f0:	07d9      	lsls	r1, r3, #31
 800a0f2:	d405      	bmi.n	800a100 <_vfiprintf_r+0x220>
 800a0f4:	89ab      	ldrh	r3, [r5, #12]
 800a0f6:	059a      	lsls	r2, r3, #22
 800a0f8:	d402      	bmi.n	800a100 <_vfiprintf_r+0x220>
 800a0fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0fc:	f7ff f882 	bl	8009204 <__retarget_lock_release_recursive>
 800a100:	89ab      	ldrh	r3, [r5, #12]
 800a102:	065b      	lsls	r3, r3, #25
 800a104:	f53f af12 	bmi.w	8009f2c <_vfiprintf_r+0x4c>
 800a108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10a:	e711      	b.n	8009f30 <_vfiprintf_r+0x50>
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	462a      	mov	r2, r5
 800a112:	4b09      	ldr	r3, [pc, #36]	; (800a138 <_vfiprintf_r+0x258>)
 800a114:	a904      	add	r1, sp, #16
 800a116:	4630      	mov	r0, r6
 800a118:	f000 f880 	bl	800a21c <_printf_i>
 800a11c:	e7e4      	b.n	800a0e8 <_vfiprintf_r+0x208>
 800a11e:	bf00      	nop
 800a120:	0800ac28 	.word	0x0800ac28
 800a124:	0800ac48 	.word	0x0800ac48
 800a128:	0800ac08 	.word	0x0800ac08
 800a12c:	0800ac68 	.word	0x0800ac68
 800a130:	0800ac72 	.word	0x0800ac72
 800a134:	00000000 	.word	0x00000000
 800a138:	08009ebb 	.word	0x08009ebb
 800a13c:	0800ac6e 	.word	0x0800ac6e

0800a140 <_printf_common>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	4616      	mov	r6, r2
 800a146:	4699      	mov	r9, r3
 800a148:	688a      	ldr	r2, [r1, #8]
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a150:	4293      	cmp	r3, r2
 800a152:	bfb8      	it	lt
 800a154:	4613      	movlt	r3, r2
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a15c:	4607      	mov	r7, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b10a      	cbz	r2, 800a166 <_printf_common+0x26>
 800a162:	3301      	adds	r3, #1
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	0699      	lsls	r1, r3, #26
 800a16a:	bf42      	ittt	mi
 800a16c:	6833      	ldrmi	r3, [r6, #0]
 800a16e:	3302      	addmi	r3, #2
 800a170:	6033      	strmi	r3, [r6, #0]
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	f015 0506 	ands.w	r5, r5, #6
 800a178:	d106      	bne.n	800a188 <_printf_common+0x48>
 800a17a:	f104 0a19 	add.w	sl, r4, #25
 800a17e:	68e3      	ldr	r3, [r4, #12]
 800a180:	6832      	ldr	r2, [r6, #0]
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc26      	bgt.n	800a1d6 <_printf_common+0x96>
 800a188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a18c:	1e13      	subs	r3, r2, #0
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	bf18      	it	ne
 800a192:	2301      	movne	r3, #1
 800a194:	0692      	lsls	r2, r2, #26
 800a196:	d42b      	bmi.n	800a1f0 <_printf_common+0xb0>
 800a198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a19c:	4649      	mov	r1, r9
 800a19e:	4638      	mov	r0, r7
 800a1a0:	47c0      	blx	r8
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d01e      	beq.n	800a1e4 <_printf_common+0xa4>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	68e5      	ldr	r5, [r4, #12]
 800a1aa:	6832      	ldr	r2, [r6, #0]
 800a1ac:	f003 0306 	and.w	r3, r3, #6
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	bf08      	it	eq
 800a1b4:	1aad      	subeq	r5, r5, r2
 800a1b6:	68a3      	ldr	r3, [r4, #8]
 800a1b8:	6922      	ldr	r2, [r4, #16]
 800a1ba:	bf0c      	ite	eq
 800a1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c0:	2500      	movne	r5, #0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	bfc4      	itt	gt
 800a1c6:	1a9b      	subgt	r3, r3, r2
 800a1c8:	18ed      	addgt	r5, r5, r3
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	341a      	adds	r4, #26
 800a1ce:	42b5      	cmp	r5, r6
 800a1d0:	d11a      	bne.n	800a208 <_printf_common+0xc8>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e008      	b.n	800a1e8 <_printf_common+0xa8>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4652      	mov	r2, sl
 800a1da:	4649      	mov	r1, r9
 800a1dc:	4638      	mov	r0, r7
 800a1de:	47c0      	blx	r8
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d103      	bne.n	800a1ec <_printf_common+0xac>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	e7c6      	b.n	800a17e <_printf_common+0x3e>
 800a1f0:	18e1      	adds	r1, r4, r3
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	2030      	movs	r0, #48	; 0x30
 800a1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1fa:	4422      	add	r2, r4
 800a1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a204:	3302      	adds	r3, #2
 800a206:	e7c7      	b.n	800a198 <_printf_common+0x58>
 800a208:	2301      	movs	r3, #1
 800a20a:	4622      	mov	r2, r4
 800a20c:	4649      	mov	r1, r9
 800a20e:	4638      	mov	r0, r7
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d0e6      	beq.n	800a1e4 <_printf_common+0xa4>
 800a216:	3601      	adds	r6, #1
 800a218:	e7d9      	b.n	800a1ce <_printf_common+0x8e>
	...

0800a21c <_printf_i>:
 800a21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	460c      	mov	r4, r1
 800a222:	4691      	mov	r9, r2
 800a224:	7e27      	ldrb	r7, [r4, #24]
 800a226:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a228:	2f78      	cmp	r7, #120	; 0x78
 800a22a:	4680      	mov	r8, r0
 800a22c:	469a      	mov	sl, r3
 800a22e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a232:	d807      	bhi.n	800a244 <_printf_i+0x28>
 800a234:	2f62      	cmp	r7, #98	; 0x62
 800a236:	d80a      	bhi.n	800a24e <_printf_i+0x32>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f000 80d8 	beq.w	800a3ee <_printf_i+0x1d2>
 800a23e:	2f58      	cmp	r7, #88	; 0x58
 800a240:	f000 80a3 	beq.w	800a38a <_printf_i+0x16e>
 800a244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a24c:	e03a      	b.n	800a2c4 <_printf_i+0xa8>
 800a24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a252:	2b15      	cmp	r3, #21
 800a254:	d8f6      	bhi.n	800a244 <_printf_i+0x28>
 800a256:	a001      	add	r0, pc, #4	; (adr r0, 800a25c <_printf_i+0x40>)
 800a258:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a245 	.word	0x0800a245
 800a268:	0800a245 	.word	0x0800a245
 800a26c:	0800a245 	.word	0x0800a245
 800a270:	0800a245 	.word	0x0800a245
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a245 	.word	0x0800a245
 800a27c:	0800a245 	.word	0x0800a245
 800a280:	0800a245 	.word	0x0800a245
 800a284:	0800a245 	.word	0x0800a245
 800a288:	0800a3d5 	.word	0x0800a3d5
 800a28c:	0800a2f9 	.word	0x0800a2f9
 800a290:	0800a3b7 	.word	0x0800a3b7
 800a294:	0800a245 	.word	0x0800a245
 800a298:	0800a245 	.word	0x0800a245
 800a29c:	0800a3f7 	.word	0x0800a3f7
 800a2a0:	0800a245 	.word	0x0800a245
 800a2a4:	0800a2f9 	.word	0x0800a2f9
 800a2a8:	0800a245 	.word	0x0800a245
 800a2ac:	0800a245 	.word	0x0800a245
 800a2b0:	0800a3bf 	.word	0x0800a3bf
 800a2b4:	680b      	ldr	r3, [r1, #0]
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	600a      	str	r2, [r1, #0]
 800a2bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e0a3      	b.n	800a410 <_printf_i+0x1f4>
 800a2c8:	6825      	ldr	r5, [r4, #0]
 800a2ca:	6808      	ldr	r0, [r1, #0]
 800a2cc:	062e      	lsls	r6, r5, #24
 800a2ce:	f100 0304 	add.w	r3, r0, #4
 800a2d2:	d50a      	bpl.n	800a2ea <_printf_i+0xce>
 800a2d4:	6805      	ldr	r5, [r0, #0]
 800a2d6:	600b      	str	r3, [r1, #0]
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	da03      	bge.n	800a2e4 <_printf_i+0xc8>
 800a2dc:	232d      	movs	r3, #45	; 0x2d
 800a2de:	426d      	negs	r5, r5
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	485e      	ldr	r0, [pc, #376]	; (800a460 <_printf_i+0x244>)
 800a2e6:	230a      	movs	r3, #10
 800a2e8:	e019      	b.n	800a31e <_printf_i+0x102>
 800a2ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a2ee:	6805      	ldr	r5, [r0, #0]
 800a2f0:	600b      	str	r3, [r1, #0]
 800a2f2:	bf18      	it	ne
 800a2f4:	b22d      	sxthne	r5, r5
 800a2f6:	e7ef      	b.n	800a2d8 <_printf_i+0xbc>
 800a2f8:	680b      	ldr	r3, [r1, #0]
 800a2fa:	6825      	ldr	r5, [r4, #0]
 800a2fc:	1d18      	adds	r0, r3, #4
 800a2fe:	6008      	str	r0, [r1, #0]
 800a300:	0628      	lsls	r0, r5, #24
 800a302:	d501      	bpl.n	800a308 <_printf_i+0xec>
 800a304:	681d      	ldr	r5, [r3, #0]
 800a306:	e002      	b.n	800a30e <_printf_i+0xf2>
 800a308:	0669      	lsls	r1, r5, #25
 800a30a:	d5fb      	bpl.n	800a304 <_printf_i+0xe8>
 800a30c:	881d      	ldrh	r5, [r3, #0]
 800a30e:	4854      	ldr	r0, [pc, #336]	; (800a460 <_printf_i+0x244>)
 800a310:	2f6f      	cmp	r7, #111	; 0x6f
 800a312:	bf0c      	ite	eq
 800a314:	2308      	moveq	r3, #8
 800a316:	230a      	movne	r3, #10
 800a318:	2100      	movs	r1, #0
 800a31a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a31e:	6866      	ldr	r6, [r4, #4]
 800a320:	60a6      	str	r6, [r4, #8]
 800a322:	2e00      	cmp	r6, #0
 800a324:	bfa2      	ittt	ge
 800a326:	6821      	ldrge	r1, [r4, #0]
 800a328:	f021 0104 	bicge.w	r1, r1, #4
 800a32c:	6021      	strge	r1, [r4, #0]
 800a32e:	b90d      	cbnz	r5, 800a334 <_printf_i+0x118>
 800a330:	2e00      	cmp	r6, #0
 800a332:	d04d      	beq.n	800a3d0 <_printf_i+0x1b4>
 800a334:	4616      	mov	r6, r2
 800a336:	fbb5 f1f3 	udiv	r1, r5, r3
 800a33a:	fb03 5711 	mls	r7, r3, r1, r5
 800a33e:	5dc7      	ldrb	r7, [r0, r7]
 800a340:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a344:	462f      	mov	r7, r5
 800a346:	42bb      	cmp	r3, r7
 800a348:	460d      	mov	r5, r1
 800a34a:	d9f4      	bls.n	800a336 <_printf_i+0x11a>
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d10b      	bne.n	800a368 <_printf_i+0x14c>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07df      	lsls	r7, r3, #31
 800a354:	d508      	bpl.n	800a368 <_printf_i+0x14c>
 800a356:	6923      	ldr	r3, [r4, #16]
 800a358:	6861      	ldr	r1, [r4, #4]
 800a35a:	4299      	cmp	r1, r3
 800a35c:	bfde      	ittt	le
 800a35e:	2330      	movle	r3, #48	; 0x30
 800a360:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a364:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a368:	1b92      	subs	r2, r2, r6
 800a36a:	6122      	str	r2, [r4, #16]
 800a36c:	f8cd a000 	str.w	sl, [sp]
 800a370:	464b      	mov	r3, r9
 800a372:	aa03      	add	r2, sp, #12
 800a374:	4621      	mov	r1, r4
 800a376:	4640      	mov	r0, r8
 800a378:	f7ff fee2 	bl	800a140 <_printf_common>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d14c      	bne.n	800a41a <_printf_i+0x1fe>
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	b004      	add	sp, #16
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	4835      	ldr	r0, [pc, #212]	; (800a460 <_printf_i+0x244>)
 800a38c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	680e      	ldr	r6, [r1, #0]
 800a394:	061f      	lsls	r7, r3, #24
 800a396:	f856 5b04 	ldr.w	r5, [r6], #4
 800a39a:	600e      	str	r6, [r1, #0]
 800a39c:	d514      	bpl.n	800a3c8 <_printf_i+0x1ac>
 800a39e:	07d9      	lsls	r1, r3, #31
 800a3a0:	bf44      	itt	mi
 800a3a2:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a6:	6023      	strmi	r3, [r4, #0]
 800a3a8:	b91d      	cbnz	r5, 800a3b2 <_printf_i+0x196>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	f023 0320 	bic.w	r3, r3, #32
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	e7b0      	b.n	800a318 <_printf_i+0xfc>
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f043 0320 	orr.w	r3, r3, #32
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	2378      	movs	r3, #120	; 0x78
 800a3c0:	4828      	ldr	r0, [pc, #160]	; (800a464 <_printf_i+0x248>)
 800a3c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3c6:	e7e3      	b.n	800a390 <_printf_i+0x174>
 800a3c8:	065e      	lsls	r6, r3, #25
 800a3ca:	bf48      	it	mi
 800a3cc:	b2ad      	uxthmi	r5, r5
 800a3ce:	e7e6      	b.n	800a39e <_printf_i+0x182>
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	e7bb      	b.n	800a34c <_printf_i+0x130>
 800a3d4:	680b      	ldr	r3, [r1, #0]
 800a3d6:	6826      	ldr	r6, [r4, #0]
 800a3d8:	6960      	ldr	r0, [r4, #20]
 800a3da:	1d1d      	adds	r5, r3, #4
 800a3dc:	600d      	str	r5, [r1, #0]
 800a3de:	0635      	lsls	r5, r6, #24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	d501      	bpl.n	800a3e8 <_printf_i+0x1cc>
 800a3e4:	6018      	str	r0, [r3, #0]
 800a3e6:	e002      	b.n	800a3ee <_printf_i+0x1d2>
 800a3e8:	0671      	lsls	r1, r6, #25
 800a3ea:	d5fb      	bpl.n	800a3e4 <_printf_i+0x1c8>
 800a3ec:	8018      	strh	r0, [r3, #0]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	4616      	mov	r6, r2
 800a3f4:	e7ba      	b.n	800a36c <_printf_i+0x150>
 800a3f6:	680b      	ldr	r3, [r1, #0]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	600a      	str	r2, [r1, #0]
 800a3fc:	681e      	ldr	r6, [r3, #0]
 800a3fe:	6862      	ldr	r2, [r4, #4]
 800a400:	2100      	movs	r1, #0
 800a402:	4630      	mov	r0, r6
 800a404:	f7f5 fee4 	bl	80001d0 <memchr>
 800a408:	b108      	cbz	r0, 800a40e <_printf_i+0x1f2>
 800a40a:	1b80      	subs	r0, r0, r6
 800a40c:	6060      	str	r0, [r4, #4]
 800a40e:	6863      	ldr	r3, [r4, #4]
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	2300      	movs	r3, #0
 800a414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a418:	e7a8      	b.n	800a36c <_printf_i+0x150>
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	4632      	mov	r2, r6
 800a41e:	4649      	mov	r1, r9
 800a420:	4640      	mov	r0, r8
 800a422:	47d0      	blx	sl
 800a424:	3001      	adds	r0, #1
 800a426:	d0ab      	beq.n	800a380 <_printf_i+0x164>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	079b      	lsls	r3, r3, #30
 800a42c:	d413      	bmi.n	800a456 <_printf_i+0x23a>
 800a42e:	68e0      	ldr	r0, [r4, #12]
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	4298      	cmp	r0, r3
 800a434:	bfb8      	it	lt
 800a436:	4618      	movlt	r0, r3
 800a438:	e7a4      	b.n	800a384 <_printf_i+0x168>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4632      	mov	r2, r6
 800a43e:	4649      	mov	r1, r9
 800a440:	4640      	mov	r0, r8
 800a442:	47d0      	blx	sl
 800a444:	3001      	adds	r0, #1
 800a446:	d09b      	beq.n	800a380 <_printf_i+0x164>
 800a448:	3501      	adds	r5, #1
 800a44a:	68e3      	ldr	r3, [r4, #12]
 800a44c:	9903      	ldr	r1, [sp, #12]
 800a44e:	1a5b      	subs	r3, r3, r1
 800a450:	42ab      	cmp	r3, r5
 800a452:	dcf2      	bgt.n	800a43a <_printf_i+0x21e>
 800a454:	e7eb      	b.n	800a42e <_printf_i+0x212>
 800a456:	2500      	movs	r5, #0
 800a458:	f104 0619 	add.w	r6, r4, #25
 800a45c:	e7f5      	b.n	800a44a <_printf_i+0x22e>
 800a45e:	bf00      	nop
 800a460:	0800ac79 	.word	0x0800ac79
 800a464:	0800ac8a 	.word	0x0800ac8a

0800a468 <_putc_r>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	460d      	mov	r5, r1
 800a46c:	4614      	mov	r4, r2
 800a46e:	4606      	mov	r6, r0
 800a470:	b118      	cbz	r0, 800a47a <_putc_r+0x12>
 800a472:	6983      	ldr	r3, [r0, #24]
 800a474:	b90b      	cbnz	r3, 800a47a <_putc_r+0x12>
 800a476:	f7ff fb43 	bl	8009b00 <__sinit>
 800a47a:	4b1c      	ldr	r3, [pc, #112]	; (800a4ec <_putc_r+0x84>)
 800a47c:	429c      	cmp	r4, r3
 800a47e:	d124      	bne.n	800a4ca <_putc_r+0x62>
 800a480:	6874      	ldr	r4, [r6, #4]
 800a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a484:	07d8      	lsls	r0, r3, #31
 800a486:	d405      	bmi.n	800a494 <_putc_r+0x2c>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	0599      	lsls	r1, r3, #22
 800a48c:	d402      	bmi.n	800a494 <_putc_r+0x2c>
 800a48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a490:	f7fe feb7 	bl	8009202 <__retarget_lock_acquire_recursive>
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	3b01      	subs	r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	60a3      	str	r3, [r4, #8]
 800a49c:	da05      	bge.n	800a4aa <_putc_r+0x42>
 800a49e:	69a2      	ldr	r2, [r4, #24]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	db1c      	blt.n	800a4de <_putc_r+0x76>
 800a4a4:	b2eb      	uxtb	r3, r5
 800a4a6:	2b0a      	cmp	r3, #10
 800a4a8:	d019      	beq.n	800a4de <_putc_r+0x76>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	701d      	strb	r5, [r3, #0]
 800a4b2:	b2ed      	uxtb	r5, r5
 800a4b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4b6:	07da      	lsls	r2, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_putc_r+0x5e>
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	059b      	lsls	r3, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_putc_r+0x5e>
 800a4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4c2:	f7fe fe9f 	bl	8009204 <__retarget_lock_release_recursive>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	4b09      	ldr	r3, [pc, #36]	; (800a4f0 <_putc_r+0x88>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d101      	bne.n	800a4d4 <_putc_r+0x6c>
 800a4d0:	68b4      	ldr	r4, [r6, #8]
 800a4d2:	e7d6      	b.n	800a482 <_putc_r+0x1a>
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <_putc_r+0x8c>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	bf08      	it	eq
 800a4da:	68f4      	ldreq	r4, [r6, #12]
 800a4dc:	e7d1      	b.n	800a482 <_putc_r+0x1a>
 800a4de:	4629      	mov	r1, r5
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff f914 	bl	8009710 <__swbuf_r>
 800a4e8:	4605      	mov	r5, r0
 800a4ea:	e7e3      	b.n	800a4b4 <_putc_r+0x4c>
 800a4ec:	0800ac28 	.word	0x0800ac28
 800a4f0:	0800ac48 	.word	0x0800ac48
 800a4f4:	0800ac08 	.word	0x0800ac08

0800a4f8 <_sbrk_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d06      	ldr	r5, [pc, #24]	; (800a514 <_sbrk_r+0x1c>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f6 fcb6 	bl	8000e74 <_sbrk>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_sbrk_r+0x1a>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_sbrk_r+0x1a>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	200020c0 	.word	0x200020c0

0800a518 <__sread>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	460c      	mov	r4, r1
 800a51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a520:	f000 f8a8 	bl	800a674 <_read_r>
 800a524:	2800      	cmp	r0, #0
 800a526:	bfab      	itete	ge
 800a528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a52a:	89a3      	ldrhlt	r3, [r4, #12]
 800a52c:	181b      	addge	r3, r3, r0
 800a52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a532:	bfac      	ite	ge
 800a534:	6563      	strge	r3, [r4, #84]	; 0x54
 800a536:	81a3      	strhlt	r3, [r4, #12]
 800a538:	bd10      	pop	{r4, pc}

0800a53a <__swrite>:
 800a53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53e:	461f      	mov	r7, r3
 800a540:	898b      	ldrh	r3, [r1, #12]
 800a542:	05db      	lsls	r3, r3, #23
 800a544:	4605      	mov	r5, r0
 800a546:	460c      	mov	r4, r1
 800a548:	4616      	mov	r6, r2
 800a54a:	d505      	bpl.n	800a558 <__swrite+0x1e>
 800a54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a550:	2302      	movs	r3, #2
 800a552:	2200      	movs	r2, #0
 800a554:	f000 f870 	bl	800a638 <_lseek_r>
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a562:	81a3      	strh	r3, [r4, #12]
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	4628      	mov	r0, r5
 800a56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a56e:	f000 b817 	b.w	800a5a0 <_write_r>

0800a572 <__sseek>:
 800a572:	b510      	push	{r4, lr}
 800a574:	460c      	mov	r4, r1
 800a576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57a:	f000 f85d 	bl	800a638 <_lseek_r>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	89a3      	ldrh	r3, [r4, #12]
 800a582:	bf15      	itete	ne
 800a584:	6560      	strne	r0, [r4, #84]	; 0x54
 800a586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a58a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a58e:	81a3      	strheq	r3, [r4, #12]
 800a590:	bf18      	it	ne
 800a592:	81a3      	strhne	r3, [r4, #12]
 800a594:	bd10      	pop	{r4, pc}

0800a596 <__sclose>:
 800a596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59a:	f000 b81b 	b.w	800a5d4 <_close_r>
	...

0800a5a0 <_write_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4d07      	ldr	r5, [pc, #28]	; (800a5c0 <_write_r+0x20>)
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	602a      	str	r2, [r5, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f7f6 fc0f 	bl	8000dd2 <_write>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_write_r+0x1e>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_write_r+0x1e>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	200020c0 	.word	0x200020c0

0800a5c4 <abort>:
 800a5c4:	b508      	push	{r3, lr}
 800a5c6:	2006      	movs	r0, #6
 800a5c8:	f000 f88e 	bl	800a6e8 <raise>
 800a5cc:	2001      	movs	r0, #1
 800a5ce:	f7f6 fbd9 	bl	8000d84 <_exit>
	...

0800a5d4 <_close_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_close_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f6 fc13 	bl	8000e0a <_close>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_close_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_close_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	200020c0 	.word	0x200020c0

0800a5f4 <_fstat_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	; (800a614 <_fstat_r+0x20>)
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	4608      	mov	r0, r1
 800a5fe:	4611      	mov	r1, r2
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f7f6 fc0e 	bl	8000e22 <_fstat>
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d102      	bne.n	800a610 <_fstat_r+0x1c>
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	b103      	cbz	r3, 800a610 <_fstat_r+0x1c>
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	bd38      	pop	{r3, r4, r5, pc}
 800a612:	bf00      	nop
 800a614:	200020c0 	.word	0x200020c0

0800a618 <_isatty_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	; (800a634 <_isatty_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f6 fc0d 	bl	8000e42 <_isatty>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_isatty_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_isatty_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200020c0 	.word	0x200020c0

0800a638 <_lseek_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_lseek_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f6 fc06 	bl	8000e58 <_lseek>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_lseek_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_lseek_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	200020c0 	.word	0x200020c0

0800a65c <__malloc_lock>:
 800a65c:	4801      	ldr	r0, [pc, #4]	; (800a664 <__malloc_lock+0x8>)
 800a65e:	f7fe bdd0 	b.w	8009202 <__retarget_lock_acquire_recursive>
 800a662:	bf00      	nop
 800a664:	200020b8 	.word	0x200020b8

0800a668 <__malloc_unlock>:
 800a668:	4801      	ldr	r0, [pc, #4]	; (800a670 <__malloc_unlock+0x8>)
 800a66a:	f7fe bdcb 	b.w	8009204 <__retarget_lock_release_recursive>
 800a66e:	bf00      	nop
 800a670:	200020b8 	.word	0x200020b8

0800a674 <_read_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_read_r+0x20>)
 800a678:	4604      	mov	r4, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7f6 fb88 	bl	8000d98 <_read>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_read_r+0x1e>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_read_r+0x1e>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	200020c0 	.word	0x200020c0

0800a698 <_raise_r>:
 800a698:	291f      	cmp	r1, #31
 800a69a:	b538      	push	{r3, r4, r5, lr}
 800a69c:	4604      	mov	r4, r0
 800a69e:	460d      	mov	r5, r1
 800a6a0:	d904      	bls.n	800a6ac <_raise_r+0x14>
 800a6a2:	2316      	movs	r3, #22
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	bd38      	pop	{r3, r4, r5, pc}
 800a6ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6ae:	b112      	cbz	r2, 800a6b6 <_raise_r+0x1e>
 800a6b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6b4:	b94b      	cbnz	r3, 800a6ca <_raise_r+0x32>
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 f830 	bl	800a71c <_getpid_r>
 800a6bc:	462a      	mov	r2, r5
 800a6be:	4601      	mov	r1, r0
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c6:	f000 b817 	b.w	800a6f8 <_kill_r>
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d00a      	beq.n	800a6e4 <_raise_r+0x4c>
 800a6ce:	1c59      	adds	r1, r3, #1
 800a6d0:	d103      	bne.n	800a6da <_raise_r+0x42>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	2001      	movs	r0, #1
 800a6d8:	e7e7      	b.n	800a6aa <_raise_r+0x12>
 800a6da:	2400      	movs	r4, #0
 800a6dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	4798      	blx	r3
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	e7e0      	b.n	800a6aa <_raise_r+0x12>

0800a6e8 <raise>:
 800a6e8:	4b02      	ldr	r3, [pc, #8]	; (800a6f4 <raise+0xc>)
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	6818      	ldr	r0, [r3, #0]
 800a6ee:	f7ff bfd3 	b.w	800a698 <_raise_r>
 800a6f2:	bf00      	nop
 800a6f4:	20000018 	.word	0x20000018

0800a6f8 <_kill_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d07      	ldr	r5, [pc, #28]	; (800a718 <_kill_r+0x20>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	4611      	mov	r1, r2
 800a704:	602b      	str	r3, [r5, #0]
 800a706:	f7f6 fb2d 	bl	8000d64 <_kill>
 800a70a:	1c43      	adds	r3, r0, #1
 800a70c:	d102      	bne.n	800a714 <_kill_r+0x1c>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	b103      	cbz	r3, 800a714 <_kill_r+0x1c>
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	200020c0 	.word	0x200020c0

0800a71c <_getpid_r>:
 800a71c:	f7f6 bb1a 	b.w	8000d54 <_getpid>

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
