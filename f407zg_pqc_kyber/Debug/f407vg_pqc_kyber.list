
f407vg_pqc_kyber.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b0f8  0800b0f8  0001b0f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b65c  0800b65c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b664  0800b664  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b664  0800b664  0001b664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b668  0800b668  0001b668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b66c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00002054  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200020d4  200020d4  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eee  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7a  00000000  00000000  00038f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  0003cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f0  00000000  00000000  0003def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c85  00000000  00000000  0003efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6e9  00000000  00000000  00063c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c22  00000000  00000000  0007e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014ff70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005730  00000000  00000000  0014ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0dc 	.word	0x0800b0dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b0dc 	.word	0x0800b0dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f001 f925 	bl	80017bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f83f 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f933 	bl	80007e0 <MX_GPIO_Init>
  MX_RNG_Init();
 800057a:	f000 f8a5 	bl	80006c8 <MX_RNG_Init>
  MX_TIM2_Init();
 800057e:	f000 f8b7 	bl	80006f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f903 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000586:	4817      	ldr	r0, [pc, #92]	; (80005e4 <main+0x7c>)
 8000588:	f002 f9ce 	bl	8002928 <HAL_TIM_Base_Start>
  uint32_t time = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  unsigned int cycles = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	603b      	str	r3, [r7, #0]
  printf("Kyber\n");
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x80>)
 8000596:	f009 fbc7 	bl	8009d28 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("running tests...\n");
 800059a:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0x84>)
 800059c:	f009 fbc4 	bl	8009d28 <puts>
	  time = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
	  cycles = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
	  perf_counter_reset();
 80005a8:	f000 fa8a 	bl	8000ac0 <perf_counter_reset>

	  TIM2->CNT = 0;
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
	  perf_counter_start();
 80005b4:	f000 fab0 	bl	8000b18 <perf_counter_start>

	  // test_keys();
	  test_xtea_speed();
 80005b8:	f001 f82c 	bl	8001614 <test_xtea_speed>
	  test_kyber_speed();
 80005bc:	f000 fcb4 	bl	8000f28 <test_kyber_speed>

	  perf_counter_stop();
 80005c0:	f000 fabc 	bl	8000b3c <perf_counter_stop>
	  time = TIM2->CNT; // time in micro seconds
 80005c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ca:	607b      	str	r3, [r7, #4]
	  cycles = perf_counter_value(); // CPU Cycles
 80005cc:	f000 fac6 	bl	8000b5c <perf_counter_value>
 80005d0:	6038      	str	r0, [r7, #0]
	  printf("Done!\n");
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <main+0x88>)
 80005d4:	f009 fba8 	bl	8009d28 <puts>

	  HAL_Delay(3000);
 80005d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005dc:	f001 f960 	bl	80018a0 <HAL_Delay>
  {
 80005e0:	e7db      	b.n	800059a <main+0x32>
 80005e2:	bf00      	nop
 80005e4:	200000f0 	.word	0x200000f0
 80005e8:	0800b0f8 	.word	0x0800b0f8
 80005ec:	0800b100 	.word	0x0800b100
 80005f0:	0800b114 	.word	0x0800b114

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 faeb 	bl	8009bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000668:	23a8      	movs	r3, #168	; 0xa8
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fbfd 	bl	8001e78 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 fa76 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fe5e 	bl	8002368 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 fa5f 	bl	8000b74 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_RNG_Init+0x20>)
 80006ce:	4a07      	ldr	r2, [pc, #28]	; (80006ec <MX_RNG_Init+0x24>)
 80006d0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_RNG_Init+0x20>)
 80006d4:	f002 f844 	bl	8002760 <HAL_RNG_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80006de:	f000 fa49 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000e0 	.word	0x200000e0
 80006ec:	50060800 	.word	0x50060800

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_TIM2_Init+0x94>)
 800070e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000712:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_TIM2_Init+0x94>)
 8000716:	22a8      	movs	r2, #168	; 0xa8
 8000718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_TIM2_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_TIM2_Init+0x94>)
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_TIM2_Init+0x98>)
 8000724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_TIM2_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_TIM2_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000732:	4814      	ldr	r0, [pc, #80]	; (8000784 <MX_TIM2_Init+0x94>)
 8000734:	f002 f8a9 	bl	800288a <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 fa19 	bl	8000b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_TIM2_Init+0x94>)
 8000750:	f002 f952 	bl	80029f8 <HAL_TIM_ConfigClockSource>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800075a:	f000 fa0b 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_TIM2_Init+0x94>)
 800076c:	f002 fb46 	bl	8002dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000776:	f000 f9fd 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000f0 	.word	0x200000f0
 8000788:	000f4240 	.word	0x000f4240

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_USART2_UART_Init+0x50>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f002 fb96 	bl	8002ef4 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ce:	f000 f9d1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000138 	.word	0x20000138
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
 80007fa:	4ba2      	ldr	r3, [pc, #648]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4aa1      	ldr	r2, [pc, #644]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b9f      	ldr	r3, [pc, #636]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0310 	and.w	r3, r3, #16
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	4b9b      	ldr	r3, [pc, #620]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a9a      	ldr	r2, [pc, #616]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b98      	ldr	r3, [pc, #608]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b94      	ldr	r3, [pc, #592]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a93      	ldr	r2, [pc, #588]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b91      	ldr	r3, [pc, #580]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b8d      	ldr	r3, [pc, #564]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a8c      	ldr	r2, [pc, #560]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b8a      	ldr	r3, [pc, #552]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b86      	ldr	r3, [pc, #536]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a85      	ldr	r2, [pc, #532]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b83      	ldr	r3, [pc, #524]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b7f      	ldr	r3, [pc, #508]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a7e      	ldr	r2, [pc, #504]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b7c      	ldr	r3, [pc, #496]	; (8000a84 <MX_GPIO_Init+0x2a4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4879      	ldr	r0, [pc, #484]	; (8000a88 <MX_GPIO_Init+0x2a8>)
 80008a4:	f001 face 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4877      	ldr	r0, [pc, #476]	; (8000a8c <MX_GPIO_Init+0x2ac>)
 80008ae:	f001 fac9 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	2200      	movs	r2, #0
 80008b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b8:	4875      	ldr	r0, [pc, #468]	; (8000a90 <MX_GPIO_Init+0x2b0>)
 80008ba:	f001 fac3 	bl	8001e44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	486c      	ldr	r0, [pc, #432]	; (8000a88 <MX_GPIO_Init+0x2a8>)
 80008d6:	f001 f919 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008da:	2301      	movs	r3, #1
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4866      	ldr	r0, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x2ac>)
 80008f2:	f001 f90b 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f6:	2308      	movs	r3, #8
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	485e      	ldr	r0, [pc, #376]	; (8000a8c <MX_GPIO_Init+0x2ac>)
 8000912:	f001 f8fb 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	485a      	ldr	r0, [pc, #360]	; (8000a94 <MX_GPIO_Init+0x2b4>)
 800092c:	f001 f8ee 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000930:	2310      	movs	r3, #16
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000940:	2306      	movs	r3, #6
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4852      	ldr	r0, [pc, #328]	; (8000a94 <MX_GPIO_Init+0x2b4>)
 800094c:	f001 f8de 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000950:	23e0      	movs	r3, #224	; 0xe0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000960:	2305      	movs	r3, #5
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	484a      	ldr	r0, [pc, #296]	; (8000a94 <MX_GPIO_Init+0x2b4>)
 800096c:	f001 f8ce 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000970:	2304      	movs	r3, #4
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4845      	ldr	r0, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x2b8>)
 8000984:	f001 f8c2 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099a:	2305      	movs	r3, #5
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	483c      	ldr	r0, [pc, #240]	; (8000a98 <MX_GPIO_Init+0x2b8>)
 80009a6:	f001 f8b1 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009aa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4833      	ldr	r0, [pc, #204]	; (8000a90 <MX_GPIO_Init+0x2b0>)
 80009c4:	f001 f8a2 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009da:	2306      	movs	r3, #6
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4829      	ldr	r0, [pc, #164]	; (8000a8c <MX_GPIO_Init+0x2ac>)
 80009e6:	f001 f891 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <MX_GPIO_Init+0x2b4>)
 8000a00:	f001 f884 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a16:	230a      	movs	r3, #10
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481c      	ldr	r0, [pc, #112]	; (8000a94 <MX_GPIO_Init+0x2b4>)
 8000a22:	f001 f873 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a26:	2320      	movs	r3, #32
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_GPIO_Init+0x2b0>)
 8000a3a:	f001 f867 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <MX_GPIO_Init+0x2b8>)
 8000a5c:	f001 f856 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_GPIO_Init+0x2a8>)
 8000a76:	f001 f849 	bl	8001b0c <HAL_GPIO_Init>

}
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	; 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020c00 	.word	0x40020c00
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400

08000a9c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8000aa4:	1d39      	adds	r1, r7, #4
 8000aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <__io_putchar+0x20>)
 8000aae:	f002 fa6e 	bl	8002f8e <HAL_UART_Transmit>

    return ch;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000138 	.word	0x20000138

08000ac0 <perf_counter_reset>:
void perf_counter_reset(){
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
    DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <perf_counter_reset+0x40>)
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <perf_counter_reset+0x44>)
 8000ac8:	601a      	str	r2, [r3, #0]
    DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <perf_counter_reset+0x48>)
 8000acc:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <perf_counter_reset+0x4c>)
 8000ace:	601a      	str	r2, [r3, #0]
    SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <perf_counter_reset+0x50>)
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <perf_counter_reset+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
    *SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <perf_counter_reset+0x50>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <perf_counter_reset+0x50>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ae4:	601a      	str	r2, [r3, #0]
    *DWT_CYCCNT  = 0; // reset the counter
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <perf_counter_reset+0x40>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
    *DWT_CONTROL = 0;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <perf_counter_reset+0x48>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	2000017c 	.word	0x2000017c
 8000b04:	e0001004 	.word	0xe0001004
 8000b08:	200000dc 	.word	0x200000dc
 8000b0c:	e0001000 	.word	0xe0001000
 8000b10:	200000d8 	.word	0x200000d8
 8000b14:	e000edfc 	.word	0xe000edfc

08000b18 <perf_counter_start>:

void perf_counter_start(){
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
    *DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <perf_counter_start+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <perf_counter_start+0x20>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000dc 	.word	0x200000dc

08000b3c <perf_counter_stop>:

void perf_counter_stop(){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
    *DWT_CONTROL = *DWT_CONTROL | 0 ; // disable the counter
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <perf_counter_stop+0x1c>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <perf_counter_stop+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000dc 	.word	0x200000dc

08000b5c <perf_counter_value>:

unsigned int perf_counter_value(){
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
    return *DWT_CYCCNT;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <perf_counter_value+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	2000017c 	.word	0x2000017c

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	; 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bbe:	2007      	movs	r0, #7
 8000bc0:	f000 ff62 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_RNG_MspInit+0x48>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d115      	bne.n	8000c0e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_RNG_MspInit+0x4c>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_RNG_MspInit+0x4c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_RNG_MspInit+0x4c>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2050      	movs	r0, #80	; 0x50
 8000c04:	f000 ff4b 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000c08:	2050      	movs	r0, #80	; 0x50
 8000c0a:	f000 ff64 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	50060800 	.word	0x50060800
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c30:	d10d      	bne.n	8000c4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_TIM_Base_MspInit+0x3c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x8c>)
 8000cd6:	f000 ff19 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 fd90 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <HASH_RNG_IRQHandler+0x10>)
 8000d4a:	f001 fd33 	bl	80027b4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000e0 	.word	0x200000e0

08000d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_kill>:

int _kill(int pid, int sig)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d72:	f008 fe8b 	bl	8009a8c <__errno>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2216      	movs	r2, #22
 8000d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_exit>:

void _exit (int status)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ffe7 	bl	8000d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d9a:	e7fe      	b.n	8000d9a <_exit+0x12>

08000d9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e00a      	b.n	8000dc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dae:	f3af 8000 	nop.w
 8000db2:	4601      	mov	r1, r0
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	60ba      	str	r2, [r7, #8]
 8000dba:	b2ca      	uxtb	r2, r1
 8000dbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf0      	blt.n	8000dae <_read+0x12>
	}

return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e009      	b.n	8000dfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe53 	bl	8000a9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf1      	blt.n	8000de8 <_write+0x12>
	}
	return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_close>:

int _close(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	return -1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e36:	605a      	str	r2, [r3, #4]
	return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <_isatty>:

int _isatty(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
	return 0;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f008 fdf0 	bl	8009a8c <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	200020d8 	.word	0x200020d8

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <cpucycles>:
  return result;
}

#else

static inline uint64_t cpucycles(void) {
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  __asm__ volatile ("rdtsc; shlq $32,%%rdx; orq %%rdx,%%rax"
    : "=a" (result) : : "%rdx");

  return result;
  */
  return (uint64_t) *DWT_CYCCNT;
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <cpucycles+0x1c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f04f 0300 	mov.w	r3, #0
}
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000017c 	.word	0x2000017c

08000f28 <test_kyber_speed>:

uint64_t t[NTESTS];
uint8_t seed[KYBER_SYMBYTES] = {0};

int test_kyber_speed()
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	f5ad 5d0b 	sub.w	sp, sp, #8896	; 0x22c0
 8000f2e:	b08d      	sub	sp, #52	; 0x34
 8000f30:	af02      	add	r7, sp, #8
  uint8_t kexsendb[KEX_AKE_SENDBBYTES];
  uint8_t kexkey[KEX_SSBYTES];
  polyvec matrix[KYBER_K];
  poly ap;

  printf("CRYPTO_SECRETKEYBYTES:  %d\n", CRYPTO_SECRETKEYBYTES);
 8000f32:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8000f36:	48ce      	ldr	r0, [pc, #824]	; (8001270 <test_kyber_speed+0x348>)
 8000f38:	f008 fe5a 	bl	8009bf0 <iprintf>
  printf("CRYPTO_PUBLICKEYBYTES:  %d\n", CRYPTO_PUBLICKEYBYTES);
 8000f3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000f40:	48cc      	ldr	r0, [pc, #816]	; (8001274 <test_kyber_speed+0x34c>)
 8000f42:	f008 fe55 	bl	8009bf0 <iprintf>
  printf("CRYPTO_CIPHERTEXTBYTES: %d\n", CRYPTO_CIPHERTEXTBYTES);
 8000f46:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f4a:	48cb      	ldr	r0, [pc, #812]	; (8001278 <test_kyber_speed+0x350>)
 8000f4c:	f008 fe50 	bl	8009bf0 <iprintf>
  printf("CRYPTO_BYTES: %d (uint8_t)\n", CRYPTO_BYTES);
 8000f50:	2120      	movs	r1, #32
 8000f52:	48ca      	ldr	r0, [pc, #808]	; (800127c <test_kyber_speed+0x354>)
 8000f54:	f008 fe4c 	bl	8009bf0 <iprintf>
    polyvec_decompress(&matrix[0],ct);
  }
  print_results("polyvec_decompress: ", t, NTESTS);
*/

  perf_counter_reset();
 8000f58:	f7ff fdb2 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 8000f5c:	f7ff fddc 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8000f66:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e024      	b.n	8000fb8 <test_kyber_speed+0x90>
    t[i] = cpucycles();
 8000f6e:	f7ff ffcb 	bl	8000f08 <cpucycles>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	48c2      	ldr	r0, [pc, #776]	; (8001280 <test_kyber_speed+0x358>)
 8000f78:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 8000f7c:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8000f80:	6809      	ldr	r1, [r1, #0]
 8000f82:	00c9      	lsls	r1, r1, #3
 8000f84:	4401      	add	r1, r0
 8000f86:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_keypair(pk, sk);
 8000f8a:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 8000f8e:	f102 0204 	add.w	r2, r2, #4
 8000f92:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8000f96:	f103 0304 	add.w	r3, r3, #4
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f006 f845 	bl	800702c <pqcrystals_kyber512_ref_indcpa_keypair>
  for(i=0;i<NTESTS;i++) {
 8000fa2:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8000fa6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8000fb2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8000fbc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fc6:	d3d2      	bcc.n	8000f6e <test_kyber_speed+0x46>
  }
  print_results("indcpa_keypair: ", t, NTESTS);
 8000fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fcc:	49ac      	ldr	r1, [pc, #688]	; (8001280 <test_kyber_speed+0x358>)
 8000fce:	48ad      	ldr	r0, [pc, #692]	; (8001284 <test_kyber_speed+0x35c>)
 8000fd0:	f007 fcec 	bl	80089ac <print_results>

  perf_counter_reset();
 8000fd4:	f7ff fd74 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 8000fd8:	f7ff fd9e 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8000fe2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	e027      	b.n	800103a <test_kyber_speed+0x112>
    t[i] = cpucycles();
 8000fea:	f7ff ff8d 	bl	8000f08 <cpucycles>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	48a3      	ldr	r0, [pc, #652]	; (8001280 <test_kyber_speed+0x358>)
 8000ff4:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 8000ff8:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8000ffc:	6809      	ldr	r1, [r1, #0]
 8000ffe:	00c9      	lsls	r1, r1, #3
 8001000:	4401      	add	r1, r0
 8001002:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_enc(ct, key, pk, seed);
 8001006:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 800100a:	f102 0204 	add.w	r2, r2, #4
 800100e:	f507 51b2 	add.w	r1, r7, #5696	; 0x1640
 8001012:	f101 0104 	add.w	r1, r1, #4
 8001016:	f507 50b3 	add.w	r0, r7, #5728	; 0x1660
 800101a:	f100 0004 	add.w	r0, r0, #4
 800101e:	4b9a      	ldr	r3, [pc, #616]	; (8001288 <test_kyber_speed+0x360>)
 8001020:	f006 f92d 	bl	800727e <pqcrystals_kyber512_ref_indcpa_enc>
  for(i=0;i<NTESTS;i++) {
 8001024:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001028:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001034:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800103e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001048:	d3cf      	bcc.n	8000fea <test_kyber_speed+0xc2>
  }
  print_results("indcpa_enc: ", t, NTESTS);
 800104a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104e:	498c      	ldr	r1, [pc, #560]	; (8001280 <test_kyber_speed+0x358>)
 8001050:	488e      	ldr	r0, [pc, #568]	; (800128c <test_kyber_speed+0x364>)
 8001052:	f007 fcab 	bl	80089ac <print_results>

  perf_counter_reset();
 8001056:	f7ff fd33 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 800105a:	f7ff fd5d 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800105e:	2300      	movs	r3, #0
 8001060:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001064:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e027      	b.n	80010bc <test_kyber_speed+0x194>
    t[i] = cpucycles();
 800106c:	f7ff ff4c 	bl	8000f08 <cpucycles>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4882      	ldr	r0, [pc, #520]	; (8001280 <test_kyber_speed+0x358>)
 8001076:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 800107a:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800107e:	6809      	ldr	r1, [r1, #0]
 8001080:	00c9      	lsls	r1, r1, #3
 8001082:	4401      	add	r1, r0
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
    indcpa_dec(key, ct, sk);
 8001088:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 800108c:	f102 0204 	add.w	r2, r2, #4
 8001090:	f507 51b3 	add.w	r1, r7, #5728	; 0x1660
 8001094:	f101 0104 	add.w	r1, r1, #4
 8001098:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800109c:	f103 0304 	add.w	r3, r3, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 fa40 	bl	8007526 <pqcrystals_kyber512_ref_indcpa_dec>
  for(i=0;i<NTESTS;i++) {
 80010a6:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80010aa:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80010b6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80010c0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ca:	d3cf      	bcc.n	800106c <test_kyber_speed+0x144>
  }
  print_results("indcpa_dec: ", t, NTESTS);
 80010cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d0:	496b      	ldr	r1, [pc, #428]	; (8001280 <test_kyber_speed+0x358>)
 80010d2:	486f      	ldr	r0, [pc, #444]	; (8001290 <test_kyber_speed+0x368>)
 80010d4:	f007 fc6a 	bl	80089ac <print_results>

  perf_counter_reset();
 80010d8:	f7ff fcf2 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 80010dc:	f7ff fd1c 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80010e6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e024      	b.n	8001138 <test_kyber_speed+0x210>
    t[i] = cpucycles();
 80010ee:	f7ff ff0b 	bl	8000f08 <cpucycles>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4862      	ldr	r0, [pc, #392]	; (8001280 <test_kyber_speed+0x358>)
 80010f8:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 80010fc:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8001100:	6809      	ldr	r1, [r1, #0]
 8001102:	00c9      	lsls	r1, r1, #3
 8001104:	4401      	add	r1, r0
 8001106:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_keypair(pk, sk);
 800110a:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 800110e:	f102 0204 	add.w	r2, r2, #4
 8001112:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8001116:	f103 0304 	add.w	r3, r3, #4
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f006 fa4c 	bl	80075ba <pqcrystals_kyber512_ref_keypair>
  for(i=0;i<NTESTS;i++) {
 8001122:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001126:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001132:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800113c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001146:	d3d2      	bcc.n	80010ee <test_kyber_speed+0x1c6>
  }
  print_results("kyber_keypair: ", t, NTESTS);
 8001148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800114c:	494c      	ldr	r1, [pc, #304]	; (8001280 <test_kyber_speed+0x358>)
 800114e:	4851      	ldr	r0, [pc, #324]	; (8001294 <test_kyber_speed+0x36c>)
 8001150:	f007 fc2c 	bl	80089ac <print_results>

  perf_counter_reset();
 8001154:	f7ff fcb4 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 8001158:	f7ff fcde 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001162:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	e027      	b.n	80011ba <test_kyber_speed+0x292>
    t[i] = cpucycles();
 800116a:	f7ff fecd 	bl	8000f08 <cpucycles>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4843      	ldr	r0, [pc, #268]	; (8001280 <test_kyber_speed+0x358>)
 8001174:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 8001178:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	00c9      	lsls	r1, r1, #3
 8001180:	4401      	add	r1, r0
 8001182:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_enc(ct, key, pk);
 8001186:	f507 52fe 	add.w	r2, r7, #8128	; 0x1fc0
 800118a:	f102 0204 	add.w	r2, r2, #4
 800118e:	f507 51b2 	add.w	r1, r7, #5696	; 0x1640
 8001192:	f101 0104 	add.w	r1, r1, #4
 8001196:	f507 53b3 	add.w	r3, r7, #5728	; 0x1660
 800119a:	f103 0304 	add.w	r3, r3, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f006 fa3d 	bl	800761e <pqcrystals_kyber512_ref_enc>
  for(i=0;i<NTESTS;i++) {
 80011a4:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80011a8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80011b4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80011be:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011c8:	d3cf      	bcc.n	800116a <test_kyber_speed+0x242>
  }
  print_results("kyber_encaps: ", t, NTESTS);
 80011ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ce:	492c      	ldr	r1, [pc, #176]	; (8001280 <test_kyber_speed+0x358>)
 80011d0:	4831      	ldr	r0, [pc, #196]	; (8001298 <test_kyber_speed+0x370>)
 80011d2:	f007 fbeb 	bl	80089ac <print_results>

  perf_counter_reset();
 80011d6:	f7ff fc73 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 80011da:	f7ff fc9d 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80011e4:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e027      	b.n	800123c <test_kyber_speed+0x314>
    t[i] = cpucycles();
 80011ec:	f7ff fe8c 	bl	8000f08 <cpucycles>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4822      	ldr	r0, [pc, #136]	; (8001280 <test_kyber_speed+0x358>)
 80011f6:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 80011fa:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80011fe:	6809      	ldr	r1, [r1, #0]
 8001200:	00c9      	lsls	r1, r1, #3
 8001202:	4401      	add	r1, r0
 8001204:	e9c1 2300 	strd	r2, r3, [r1]
    crypto_kem_dec(key, ct, sk);
 8001208:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 800120c:	f102 0204 	add.w	r2, r2, #4
 8001210:	f507 51b3 	add.w	r1, r7, #5728	; 0x1660
 8001214:	f101 0104 	add.w	r1, r1, #4
 8001218:	f507 53b2 	add.w	r3, r7, #5696	; 0x1640
 800121c:	f103 0304 	add.w	r3, r3, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f006 fa3f 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  for(i=0;i<NTESTS;i++) {
 8001226:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800122a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001236:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001240:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800124a:	d3cf      	bcc.n	80011ec <test_kyber_speed+0x2c4>
  }
  print_results("kyber_decaps: ", t, NTESTS);
 800124c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001250:	490b      	ldr	r1, [pc, #44]	; (8001280 <test_kyber_speed+0x358>)
 8001252:	4812      	ldr	r0, [pc, #72]	; (800129c <test_kyber_speed+0x374>)
 8001254:	f007 fbaa 	bl	80089ac <print_results>

  perf_counter_reset();
 8001258:	f7ff fc32 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 800125c:	f7ff fc5c 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001260:	2300      	movs	r3, #0
 8001262:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001266:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e044      	b.n	80012f8 <test_kyber_speed+0x3d0>
 800126e:	bf00      	nop
 8001270:	0800b11c 	.word	0x0800b11c
 8001274:	0800b138 	.word	0x0800b138
 8001278:	0800b154 	.word	0x0800b154
 800127c:	0800b170 	.word	0x0800b170
 8001280:	20000180 	.word	0x20000180
 8001284:	0800b18c 	.word	0x0800b18c
 8001288:	200000a0 	.word	0x200000a0
 800128c:	0800b1a0 	.word	0x0800b1a0
 8001290:	0800b1b0 	.word	0x0800b1b0
 8001294:	0800b1c0 	.word	0x0800b1c0
 8001298:	0800b1d0 	.word	0x0800b1d0
 800129c:	0800b1e0 	.word	0x0800b1e0
    t[i] = cpucycles();
 80012a0:	f7ff fe32 	bl	8000f08 <cpucycles>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	48cb      	ldr	r0, [pc, #812]	; (80015d8 <test_kyber_speed+0x6b0>)
 80012aa:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 80012ae:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	00c9      	lsls	r1, r1, #3
 80012b6:	4401      	add	r1, r0
 80012b8:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_initA(kexsenda, key, sk, pk);
 80012bc:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80012c0:	f103 0304 	add.w	r3, r3, #4
 80012c4:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 80012c8:	f102 0204 	add.w	r2, r2, #4
 80012cc:	f507 51b2 	add.w	r1, r7, #5696	; 0x1640
 80012d0:	f101 0104 	add.w	r1, r1, #4
 80012d4:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 80012d8:	f100 0008 	add.w	r0, r0, #8
 80012dc:	3804      	subs	r0, #4
 80012de:	f006 fa5d 	bl	800779c <kex_uake_initA>
  for(i=0;i<NTESTS;i++) {
 80012e2:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80012e6:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80012f2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80012fc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	d3cb      	bcc.n	80012a0 <test_kyber_speed+0x378>
  }
  print_results("kex_uake_initA: ", t, NTESTS);
 8001308:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130c:	49b2      	ldr	r1, [pc, #712]	; (80015d8 <test_kyber_speed+0x6b0>)
 800130e:	48b3      	ldr	r0, [pc, #716]	; (80015dc <test_kyber_speed+0x6b4>)
 8001310:	f007 fb4c 	bl	80089ac <print_results>

  perf_counter_reset();
 8001314:	f7ff fbd4 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 8001318:	f7ff fbfe 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001322:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	e029      	b.n	800137e <test_kyber_speed+0x456>
    t[i] = cpucycles();
 800132a:	f7ff fded 	bl	8000f08 <cpucycles>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	48a9      	ldr	r0, [pc, #676]	; (80015d8 <test_kyber_speed+0x6b0>)
 8001334:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 8001338:	f101 0124 	add.w	r1, r1, #36	; 0x24
 800133c:	6809      	ldr	r1, [r1, #0]
 800133e:	00c9      	lsls	r1, r1, #3
 8001340:	4401      	add	r1, r0
 8001342:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_sharedB(kexsendb, kexkey, kexsenda, sk);
 8001346:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800134a:	f103 0304 	add.w	r3, r3, #4
 800134e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001352:	f102 0208 	add.w	r2, r2, #8
 8001356:	3a04      	subs	r2, #4
 8001358:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800135c:	3904      	subs	r1, #4
 800135e:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8001362:	3804      	subs	r0, #4
 8001364:	f006 fa31 	bl	80077ca <kex_uake_sharedB>
  for(i=0;i<NTESTS;i++) {
 8001368:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800136c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001378:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001382:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138c:	d3cd      	bcc.n	800132a <test_kyber_speed+0x402>
  }
  print_results("kex_uake_sharedB: ", t, NTESTS);
 800138e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001392:	4991      	ldr	r1, [pc, #580]	; (80015d8 <test_kyber_speed+0x6b0>)
 8001394:	4892      	ldr	r0, [pc, #584]	; (80015e0 <test_kyber_speed+0x6b8>)
 8001396:	f007 fb09 	bl	80089ac <print_results>

  perf_counter_reset();
 800139a:	f7ff fb91 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 800139e:	f7ff fbbb 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80013a8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e028      	b.n	8001402 <test_kyber_speed+0x4da>
    t[i] = cpucycles();
 80013b0:	f7ff fdaa 	bl	8000f08 <cpucycles>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4887      	ldr	r0, [pc, #540]	; (80015d8 <test_kyber_speed+0x6b0>)
 80013ba:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 80013be:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80013c2:	6809      	ldr	r1, [r1, #0]
 80013c4:	00c9      	lsls	r1, r1, #3
 80013c6:	4401      	add	r1, r0
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
    kex_uake_sharedA(kexkey, kexsendb, key, sk);
 80013cc:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 80013d0:	f103 0304 	add.w	r3, r3, #4
 80013d4:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 80013d8:	f102 0204 	add.w	r2, r2, #4
 80013dc:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 80013e0:	3904      	subs	r1, #4
 80013e2:	f607 2008 	addw	r0, r7, #2568	; 0xa08
 80013e6:	3804      	subs	r0, #4
 80013e8:	f006 fa12 	bl	8007810 <kex_uake_sharedA>
  for(i=0;i<NTESTS;i++) {
 80013ec:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80013f0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80013fc:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001406:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001410:	d3ce      	bcc.n	80013b0 <test_kyber_speed+0x488>
  }
  print_results("kex_uake_sharedA: ", t, NTESTS);
 8001412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001416:	4970      	ldr	r1, [pc, #448]	; (80015d8 <test_kyber_speed+0x6b0>)
 8001418:	4872      	ldr	r0, [pc, #456]	; (80015e4 <test_kyber_speed+0x6bc>)
 800141a:	f007 fac7 	bl	80089ac <print_results>

  perf_counter_reset();
 800141e:	f7ff fb4f 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 8001422:	f7ff fb79 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 800142c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e02b      	b.n	800148c <test_kyber_speed+0x564>
    t[i] = cpucycles();
 8001434:	f7ff fd68 	bl	8000f08 <cpucycles>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4866      	ldr	r0, [pc, #408]	; (80015d8 <test_kyber_speed+0x6b0>)
 800143e:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 8001442:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8001446:	6809      	ldr	r1, [r1, #0]
 8001448:	00c9      	lsls	r1, r1, #3
 800144a:	4401      	add	r1, r0
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_initA(kexsenda, key, sk, pk);
 8001450:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 8001454:	f103 0304 	add.w	r3, r3, #4
 8001458:	f507 52cb 	add.w	r2, r7, #6496	; 0x1960
 800145c:	f102 0204 	add.w	r2, r2, #4
 8001460:	f507 51b2 	add.w	r1, r7, #5696	; 0x1640
 8001464:	f101 0104 	add.w	r1, r1, #4
 8001468:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 800146c:	f100 0008 	add.w	r0, r0, #8
 8001470:	3804      	subs	r0, #4
 8001472:	f006 f9fa 	bl	800786a <kex_ake_initA>
  for(i=0;i<NTESTS;i++) {
 8001476:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800147a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001486:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001490:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800149a:	d3cb      	bcc.n	8001434 <test_kyber_speed+0x50c>
  }
  print_results("kex_ake_initA: ", t, NTESTS);
 800149c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <test_kyber_speed+0x6b0>)
 80014a2:	4851      	ldr	r0, [pc, #324]	; (80015e8 <test_kyber_speed+0x6c0>)
 80014a4:	f007 fa82 	bl	80089ac <print_results>

  perf_counter_reset();
 80014a8:	f7ff fb0a 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 80014ac:	f7ff fb34 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80014b6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e02f      	b.n	800151e <test_kyber_speed+0x5f6>
    t[i] = cpucycles();
 80014be:	f7ff fd23 	bl	8000f08 <cpucycles>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4844      	ldr	r0, [pc, #272]	; (80015d8 <test_kyber_speed+0x6b0>)
 80014c8:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 80014cc:	f101 0124 	add.w	r1, r1, #36	; 0x24
 80014d0:	6809      	ldr	r1, [r1, #0]
 80014d2:	00c9      	lsls	r1, r1, #3
 80014d4:	4401      	add	r1, r0
 80014d6:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_sharedB(kexsendb, kexkey, kexsenda, sk, pk);
 80014da:	f507 54cb 	add.w	r4, r7, #6496	; 0x1960
 80014de:	f104 0404 	add.w	r4, r4, #4
 80014e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80014e6:	f102 0208 	add.w	r2, r2, #8
 80014ea:	3a04      	subs	r2, #4
 80014ec:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80014f0:	3904      	subs	r1, #4
 80014f2:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 80014f6:	3804      	subs	r0, #4
 80014f8:	f507 53fe 	add.w	r3, r7, #8128	; 0x1fc0
 80014fc:	f103 0304 	add.w	r3, r3, #4
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4623      	mov	r3, r4
 8001504:	f006 f9c8 	bl	8007898 <kex_ake_sharedB>
  for(i=0;i<NTESTS;i++) {
 8001508:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800150c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001518:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8001522:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800152c:	d3c7      	bcc.n	80014be <test_kyber_speed+0x596>
  }
  print_results("kex_ake_sharedB: ", t, NTESTS);
 800152e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001532:	4929      	ldr	r1, [pc, #164]	; (80015d8 <test_kyber_speed+0x6b0>)
 8001534:	482d      	ldr	r0, [pc, #180]	; (80015ec <test_kyber_speed+0x6c4>)
 8001536:	f007 fa39 	bl	80089ac <print_results>

  perf_counter_reset();
 800153a:	f7ff fac1 	bl	8000ac0 <perf_counter_reset>
  perf_counter_start();
 800153e:	f7ff faeb 	bl	8000b18 <perf_counter_start>
  for(i=0;i<NTESTS;i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 8001548:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e02e      	b.n	80015ae <test_kyber_speed+0x686>
    t[i] = cpucycles();
 8001550:	f7ff fcda 	bl	8000f08 <cpucycles>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <test_kyber_speed+0x6b0>)
 800155a:	f507 510b 	add.w	r1, r7, #8896	; 0x22c0
 800155e:	f101 0124 	add.w	r1, r1, #36	; 0x24
 8001562:	6809      	ldr	r1, [r1, #0]
 8001564:	00c9      	lsls	r1, r1, #3
 8001566:	4401      	add	r1, r0
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
    kex_ake_sharedA(kexkey, kexsendb, key, sk, sk);
 800156c:	f507 54cb 	add.w	r4, r7, #6496	; 0x1960
 8001570:	f104 0404 	add.w	r4, r4, #4
 8001574:	f507 52b2 	add.w	r2, r7, #5696	; 0x1640
 8001578:	f102 0204 	add.w	r2, r2, #4
 800157c:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8001580:	3904      	subs	r1, #4
 8001582:	f607 2008 	addw	r0, r7, #2568	; 0xa08
 8001586:	3804      	subs	r0, #4
 8001588:	f507 53cb 	add.w	r3, r7, #6496	; 0x1960
 800158c:	f103 0304 	add.w	r3, r3, #4
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	f006 f9ad 	bl	80078f2 <kex_ake_sharedA>
  for(i=0;i<NTESTS;i++) {
 8001598:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 800159c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	f507 520b 	add.w	r2, r7, #8896	; 0x22c0
 80015a8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 80015b2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015bc:	d3c8      	bcc.n	8001550 <test_kyber_speed+0x628>
  }
  print_results("kex_ake_sharedA: ", t, NTESTS);
 80015be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015c2:	4905      	ldr	r1, [pc, #20]	; (80015d8 <test_kyber_speed+0x6b0>)
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <test_kyber_speed+0x6c8>)
 80015c6:	f007 f9f1 	bl	80089ac <print_results>

  return 0;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	f507 570b 	add.w	r7, r7, #8896	; 0x22c0
 80015d2:	372c      	adds	r7, #44	; 0x2c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000180 	.word	0x20000180
 80015dc:	0800b1f0 	.word	0x0800b1f0
 80015e0:	0800b204 	.word	0x0800b204
 80015e4:	0800b218 	.word	0x0800b218
 80015e8:	0800b22c 	.word	0x0800b22c
 80015ec:	0800b23c 	.word	0x0800b23c
 80015f0:	0800b250 	.word	0x0800b250

080015f4 <cpucycles>:
static inline uint64_t cpucycles(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return (uint64_t) *DWT_CYCCNT;
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <cpucycles+0x1c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	f04f 0300 	mov.w	r3, #0
}
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	2000017c 	.word	0x2000017c

08001614 <test_xtea_speed>:

#define NTESTS 1000

uint64_t t[NTESTS];

int test_xtea_speed() {
 8001614:	b580      	push	{r7, lr}
 8001616:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 800161a:	af00      	add	r7, sp, #0
	unsigned int i;
	uint8_t ct[CRYPTO_CIPHERTEXTBYTES];
	uint32_t key[XTEA_KEY_LENGTH];
	const uint32_t nonce = (uint32_t) rand();
 800161c:	f008 fd16 	bl	800a04c <rand>
 8001620:	4603      	mov	r3, r0
 8001622:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
	uint32_t iv[2] = { nonce, 1 };
 8001626:	463b      	mov	r3, r7
 8001628:	f8d7 2348 	ldr.w	r2, [r7, #840]	; 0x348
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	463b      	mov	r3, r7
 8001630:	2201      	movs	r2, #1
 8001632:	605a      	str	r2, [r3, #4]

	printf("CRYPTO_CIPHERTEXTBYTES: %d\n", CRYPTO_CIPHERTEXTBYTES);
 8001634:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001638:	4845      	ldr	r0, [pc, #276]	; (8001750 <test_xtea_speed+0x13c>)
 800163a:	f008 fad9 	bl	8009bf0 <iprintf>
	printf("XTEA_KEY_LENGTH: %d (uint32_t)\n", XTEA_KEY_LENGTH);
 800163e:	2110      	movs	r1, #16
 8001640:	4844      	ldr	r0, [pc, #272]	; (8001754 <test_xtea_speed+0x140>)
 8001642:	f008 fad5 	bl	8009bf0 <iprintf>

	perf_counter_reset();
 8001646:	f7ff fa3b 	bl	8000ac0 <perf_counter_reset>
	perf_counter_start();
 800164a:	f7ff fa65 	bl	8000b18 <perf_counter_start>
	for (i = 0; i < NTESTS; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001654:	e015      	b.n	8001682 <test_xtea_speed+0x6e>
		t[i] = cpucycles();
 8001656:	f7ff ffcd 	bl	80015f4 <cpucycles>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	483e      	ldr	r0, [pc, #248]	; (8001758 <test_xtea_speed+0x144>)
 8001660:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 8001664:	00c9      	lsls	r1, r1, #3
 8001666:	4401      	add	r1, r0
 8001668:	e9c1 2300 	strd	r2, r3, [r1]
		csp_xtea_set_key(key, XTEA_KEY_LENGTH);
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	2110      	movs	r1, #16
 8001672:	4618      	mov	r0, r3
 8001674:	f008 f964 	bl	8009940 <csp_xtea_set_key>
	for (i = 0; i < NTESTS; i++) {
 8001678:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800167c:	3301      	adds	r3, #1
 800167e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001682:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168a:	d3e4      	bcc.n	8001656 <test_xtea_speed+0x42>
	}
	print_results("xtea_set_key: ", t, NTESTS);
 800168c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001690:	4931      	ldr	r1, [pc, #196]	; (8001758 <test_xtea_speed+0x144>)
 8001692:	4832      	ldr	r0, [pc, #200]	; (800175c <test_xtea_speed+0x148>)
 8001694:	f007 f98a 	bl	80089ac <print_results>

	perf_counter_reset();
 8001698:	f7ff fa12 	bl	8000ac0 <perf_counter_reset>
	perf_counter_start();
 800169c:	f7ff fa3c 	bl	8000b18 <perf_counter_start>
	for (i = 0; i < NTESTS; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80016a6:	e017      	b.n	80016d8 <test_xtea_speed+0xc4>
		t[i] = cpucycles();
 80016a8:	f7ff ffa4 	bl	80015f4 <cpucycles>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4829      	ldr	r0, [pc, #164]	; (8001758 <test_xtea_speed+0x144>)
 80016b2:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	4401      	add	r1, r0
 80016ba:	e9c1 2300 	strd	r2, r3, [r1]
		csp_xtea_encrypt(ct, CRYPTO_CIPHERTEXTBYTES, iv);
 80016be:	463a      	mov	r2, r7
 80016c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016c4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016c8:	4618      	mov	r0, r3
 80016ca:	f008 f953 	bl	8009974 <csp_xtea_encrypt>
	for (i = 0; i < NTESTS; i++) {
 80016ce:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80016d2:	3301      	adds	r3, #1
 80016d4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80016d8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80016dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e0:	d3e2      	bcc.n	80016a8 <test_xtea_speed+0x94>
	}
	print_results("xtea_enc: ", t, NTESTS);
 80016e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e6:	491c      	ldr	r1, [pc, #112]	; (8001758 <test_xtea_speed+0x144>)
 80016e8:	481d      	ldr	r0, [pc, #116]	; (8001760 <test_xtea_speed+0x14c>)
 80016ea:	f007 f95f 	bl	80089ac <print_results>

	perf_counter_reset();
 80016ee:	f7ff f9e7 	bl	8000ac0 <perf_counter_reset>
	perf_counter_start();
 80016f2:	f7ff fa11 	bl	8000b18 <perf_counter_start>
	for (i = 0; i < NTESTS; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80016fc:	e017      	b.n	800172e <test_xtea_speed+0x11a>
		t[i] = cpucycles();
 80016fe:	f7ff ff79 	bl	80015f4 <cpucycles>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <test_xtea_speed+0x144>)
 8001708:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 800170c:	00c9      	lsls	r1, r1, #3
 800170e:	4401      	add	r1, r0
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
		csp_xtea_decrypt(ct, CRYPTO_CIPHERTEXTBYTES, iv); //(ct, CRYPTO_CIPHERTEXTBYTES, iv);
 8001714:	463a      	mov	r2, r7
 8001716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800171a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800171e:	4618      	mov	r0, r3
 8001720:	f008 f97e 	bl	8009a20 <csp_xtea_decrypt>
	for (i = 0; i < NTESTS; i++) {
 8001724:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001728:	3301      	adds	r3, #1
 800172a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800172e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001736:	d3e2      	bcc.n	80016fe <test_xtea_speed+0xea>
	}
	print_results("xtea_dec: ", t, NTESTS);
 8001738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <test_xtea_speed+0x144>)
 800173e:	4809      	ldr	r0, [pc, #36]	; (8001764 <test_xtea_speed+0x150>)
 8001740:	f007 f934 	bl	80089ac <print_results>

	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	f507 7754 	add.w	r7, r7, #848	; 0x350
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800b264 	.word	0x0800b264
 8001754:	0800b280 	.word	0x0800b280
 8001758:	20000180 	.word	0x20000180
 800175c:	0800b2a0 	.word	0x0800b2a0
 8001760:	0800b2b0 	.word	0x0800b2b0
 8001764:	0800b2bc 	.word	0x0800b2bc

08001768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800176c:	480d      	ldr	r0, [pc, #52]	; (80017a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176e:	490e      	ldr	r1, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001784:	4c0b      	ldr	r4, [pc, #44]	; (80017b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001792:	f7ff fba7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001796:	f008 f9ed 	bl	8009b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179a:	f7fe fee5 	bl	8000568 <main>
  bx  lr    
 800179e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80017ac:	0800b66c 	.word	0x0800b66c
  ldr r2, =_sbss
 80017b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80017b4:	200020d4 	.word	0x200020d4

080017b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b8:	e7fe      	b.n	80017b8 <ADC_IRQHandler>
	...

080017bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_Init+0x40>)
 80017c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_Init+0x40>)
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_Init+0x40>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_Init+0x40>)
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f94f 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f808 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f7ff f9c6 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x54>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_InitTick+0x58>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f967 	bl	8001af2 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f92f 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	; (800185c <HAL_InitTick+0x5c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000000 	.word	0x20000000
 8001858:	20000008 	.word	0x20000008
 800185c:	20000004 	.word	0x20000004

08001860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	; (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000008 	.word	0x20000008
 8001884:	200020c0 	.word	0x200020c0

08001888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200020c0 	.word	0x200020c0

080018a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <HAL_Delay+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e16b      	b.n	8001e00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 815a 	bne.w	8001dfa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d130      	bne.n	8001bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d017      	beq.n	8001bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80b4 	beq.w	8001dfa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_GPIO_Init+0x30c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a5b      	ldr	r2, [pc, #364]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	; (8001e20 <HAL_GPIO_Init+0x314>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a51      	ldr	r2, [pc, #324]	; (8001e24 <HAL_GPIO_Init+0x318>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d025      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_GPIO_Init+0x31c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d01f      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_GPIO_Init+0x320>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d019      	beq.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0x216>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00d      	beq.n	8001d1e <HAL_GPIO_Init+0x212>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_GPIO_Init+0x32c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d007      	beq.n	8001d1a <HAL_GPIO_Init+0x20e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <HAL_GPIO_Init+0x330>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d101      	bne.n	8001d16 <HAL_GPIO_Init+0x20a>
 8001d12:	2307      	movs	r3, #7
 8001d14:	e00e      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d16:	2308      	movs	r3, #8
 8001d18:	e00c      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00a      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d1e:	2305      	movs	r3, #5
 8001d20:	e008      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d22:	2304      	movs	r3, #4
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d26:	2303      	movs	r3, #3
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_Init+0x228>
 8001d32:	2300      	movs	r3, #0
 8001d34:	69fa      	ldr	r2, [r7, #28]
 8001d36:	f002 0203 	and.w	r2, r2, #3
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	4093      	lsls	r3, r2
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d44:	4935      	ldr	r1, [pc, #212]	; (8001e1c <HAL_GPIO_Init+0x310>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	3302      	adds	r3, #2
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d76:	4a32      	ldr	r2, [pc, #200]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d7c:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b0f      	cmp	r3, #15
 8001e04:	f67f ae90 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	; 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020c00 	.word	0x40020c00
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40021400 	.word	0x40021400
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021c00 	.word	0x40021c00
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e264      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d075      	beq.n	8001f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d00c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea2:	4ba0      	ldr	r3, [pc, #640]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d112      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b99      	ldr	r3, [pc, #612]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d05b      	beq.n	8001f80 <HAL_RCC_OscConfig+0x108>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d157      	bne.n	8001f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e23f      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x74>
 8001ede:	4b91      	ldr	r3, [pc, #580]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a90      	ldr	r2, [pc, #576]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e01d      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a87      	ldr	r2, [pc, #540]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0xb0>
 8001f10:	4b84      	ldr	r3, [pc, #528]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a83      	ldr	r2, [pc, #524]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b81      	ldr	r3, [pc, #516]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a80      	ldr	r2, [pc, #512]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcaa 	bl	8001888 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fca6 	bl	8001888 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e204      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b76      	ldr	r3, [pc, #472]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0xc0>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc96 	bl	8001888 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fc92 	bl	8001888 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1f0      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0xe8>
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d063      	beq.n	8002056 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8e:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00b      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9a:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d11c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e1c4      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fca:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4952      	ldr	r1, [pc, #328]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fde:	e03a      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe8:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7ff fc4b 	bl	8001888 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7ff fc47 	bl	8001888 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e1a5      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002014:	4b43      	ldr	r3, [pc, #268]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4940      	ldr	r1, [pc, #256]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202a:	4b3f      	ldr	r3, [pc, #252]	; (8002128 <HAL_RCC_OscConfig+0x2b0>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7ff fc2a 	bl	8001888 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002038:	f7ff fc26 	bl	8001888 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e184      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d030      	beq.n	80020c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d016      	beq.n	8002098 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff fc0a 	bl	8001888 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fc06 	bl	8001888 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e164      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 800208c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x200>
 8002096:	e015      	b.n	80020c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_OscConfig+0x2b4>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fbf3 	bl	8001888 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a6:	f7ff fbef 	bl	8001888 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e14d      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a0 	beq.w	8002212 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a07      	ldr	r2, [pc, #28]	; (8002130 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7ff fbb5 	bl	8001888 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e011      	b.n	8002146 <HAL_RCC_OscConfig+0x2ce>
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
 8002130:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002134:	f7ff fba8 	bl	8001888 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e106      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x4e4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d106      	bne.n	8002168 <HAL_RCC_OscConfig+0x2f0>
 800215a:	4b81      	ldr	r3, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a80      	ldr	r2, [pc, #512]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x312>
 8002170:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	4a7a      	ldr	r2, [pc, #488]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6713      	str	r3, [r2, #112]	; 0x70
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a77      	ldr	r2, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x32a>
 800218a:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a74      	ldr	r2, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7ff fb6d 	bl	8001888 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7ff fb69 	bl	8001888 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0c5      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x33a>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7ff fb57 	bl	8001888 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7ff fb53 	bl	8001888 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0af      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b56      	ldr	r3, [pc, #344]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a55      	ldr	r2, [pc, #340]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 809b 	beq.w	8002352 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d05c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d141      	bne.n	80022b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fb27 	bl	8001888 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff fb23 	bl	8001888 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e081      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002250:	4b43      	ldr	r3, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	3b01      	subs	r3, #1
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fafc 	bl	8001888 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff faf8 	bl	8001888 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e056      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x41c>
 80022b2:	e04e      	b.n	8002352 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x4ec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fae5 	bl	8001888 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fae1 	bl	8001888 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03f      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x44a>
 80022e0:	e037      	b.n	8002352 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e032      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x4e8>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d028      	beq.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002306:	429a      	cmp	r2, r3
 8002308:	d121      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d11a      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231e:	4013      	ands	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002324:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002326:	4293      	cmp	r3, r2
 8002328:	d111      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	3b01      	subs	r3, #1
 8002338:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d107      	bne.n	800234e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40007000 	.word	0x40007000
 8002360:	40023800 	.word	0x40023800
 8002364:	42470060 	.word	0x42470060

08002368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0cc      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d90c      	bls.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b8      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d020      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	494d      	ldr	r1, [pc, #308]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d044      	beq.n	8002488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d119      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e07f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d003      	beq.n	8002426 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002422:	2b03      	cmp	r3, #3
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e067      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 0203 	bic.w	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	4934      	ldr	r1, [pc, #208]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002458:	f7ff fa16 	bl	8001888 <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	e00a      	b.n	8002476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002460:	f7ff fa12 	bl	8001888 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e04f      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 020c 	and.w	r2, r3, #12
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	429a      	cmp	r2, r3
 8002486:	d1eb      	bne.n	8002460 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d20c      	bcs.n	80024b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002496:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e032      	b.n	8002516 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4916      	ldr	r1, [pc, #88]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ee:	f000 f821 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1bc>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	091b      	lsrs	r3, r3, #4
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	490a      	ldr	r1, [pc, #40]	; (8002528 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	5ccb      	ldrb	r3, [r1, r3]
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f976 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00
 8002524:	40023800 	.word	0x40023800
 8002528:	0800b334 	.word	0x0800b334
 800252c:	20000000 	.word	0x20000000
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	2300      	movs	r3, #0
 8002546:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254c:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
 8002554:	2b08      	cmp	r3, #8
 8002556:	d00d      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x40>
 8002558:	2b08      	cmp	r3, #8
 800255a:	f200 80bd 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x34>
 8002562:	2b04      	cmp	r3, #4
 8002564:	d003      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x3a>
 8002566:	e0b7      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800256a:	60bb      	str	r3, [r7, #8]
       break;
 800256c:	e0b7      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800256e:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002570:	60bb      	str	r3, [r7, #8]
      break;
 8002572:	e0b4      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d04d      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	461a      	mov	r2, r3
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f240 10ff 	movw	r0, #511	; 0x1ff
 800259a:	f04f 0100 	mov.w	r1, #0
 800259e:	ea02 0800 	and.w	r8, r2, r0
 80025a2:	ea03 0901 	and.w	r9, r3, r1
 80025a6:	4640      	mov	r0, r8
 80025a8:	4649      	mov	r1, r9
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	014b      	lsls	r3, r1, #5
 80025b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025b8:	0142      	lsls	r2, r0, #5
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	ebb0 0008 	subs.w	r0, r0, r8
 80025c2:	eb61 0109 	sbc.w	r1, r1, r9
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	018b      	lsls	r3, r1, #6
 80025d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025d4:	0182      	lsls	r2, r0, #6
 80025d6:	1a12      	subs	r2, r2, r0
 80025d8:	eb63 0301 	sbc.w	r3, r3, r1
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f04f 0100 	mov.w	r1, #0
 80025e4:	00d9      	lsls	r1, r3, #3
 80025e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ea:	00d0      	lsls	r0, r2, #3
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	eb12 0208 	adds.w	r2, r2, r8
 80025f4:	eb43 0309 	adc.w	r3, r3, r9
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	0259      	lsls	r1, r3, #9
 8002602:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002606:	0250      	lsls	r0, r2, #9
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f7fd fe2a 	bl	8000270 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4613      	mov	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e04a      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002626:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	461a      	mov	r2, r3
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	ea02 0400 	and.w	r4, r2, r0
 800263e:	ea03 0501 	and.w	r5, r3, r1
 8002642:	4620      	mov	r0, r4
 8002644:	4629      	mov	r1, r5
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	014b      	lsls	r3, r1, #5
 8002650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002654:	0142      	lsls	r2, r0, #5
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	1b00      	subs	r0, r0, r4
 800265c:	eb61 0105 	sbc.w	r1, r1, r5
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	018b      	lsls	r3, r1, #6
 800266a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800266e:	0182      	lsls	r2, r0, #6
 8002670:	1a12      	subs	r2, r2, r0
 8002672:	eb63 0301 	sbc.w	r3, r3, r1
 8002676:	f04f 0000 	mov.w	r0, #0
 800267a:	f04f 0100 	mov.w	r1, #0
 800267e:	00d9      	lsls	r1, r3, #3
 8002680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002684:	00d0      	lsls	r0, r2, #3
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	1912      	adds	r2, r2, r4
 800268c:	eb45 0303 	adc.w	r3, r5, r3
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	0299      	lsls	r1, r3, #10
 800269a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800269e:	0290      	lsls	r0, r2, #10
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f7fd fdde 	bl	8000270 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	60bb      	str	r3, [r7, #8]
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026da:	60bb      	str	r3, [r7, #8]
      break;
 80026dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026de:	68bb      	ldr	r3, [r7, #8]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	0800b344 	.word	0x0800b344

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	0800b344 	.word	0x0800b344

08002760 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e01c      	b.n	80027ac <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	795b      	ldrb	r3, [r3, #5]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe fa24 	bl	8000bd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0204 	orr.w	r2, r2, #4
 800279c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d105      	bne.n	80027da <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2210      	movs	r2, #16
 80027d2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80027d4:	2301      	movs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e00b      	b.n	80027f2 <HAL_RNG_IRQHandler+0x3e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d104      	bne.n	80027f2 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2208      	movs	r2, #8
 80027ec:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80027ee:	2301      	movs	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10b      	bne.n	8002810 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f839 	bl	8002876 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0260 	mvn.w	r2, #96	; 0x60
 800280c:	605a      	str	r2, [r3, #4]

    return;
 800280e:	e024      	b.n	800285a <HAL_RNG_IRQHandler+0xa6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d11d      	bne.n	800285a <HAL_RNG_IRQHandler+0xa6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0208 	bic.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	795b      	ldrb	r3, [r3, #5]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b04      	cmp	r3, #4
 8002840:	d00b      	beq.n	800285a <HAL_RNG_IRQHandler+0xa6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f803 	bl	8002860 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e041      	b.n	8002920 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d106      	bne.n	80028b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe f9b5 	bl	8000c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f000 f95d 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e046      	b.n	80029ce <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a23      	ldr	r2, [pc, #140]	; (80029dc <HAL_TIM_Base_Start+0xb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d022      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295a:	d01d      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1f      	ldr	r2, [pc, #124]	; (80029e0 <HAL_TIM_Base_Start+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_TIM_Base_Start+0xbc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_TIM_Base_Start+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <HAL_TIM_Base_Start+0xc4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <HAL_TIM_Base_Start+0xc8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_TIM_Base_Start+0x70>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_TIM_Base_Start+0xcc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d010      	beq.n	80029cc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ba:	e007      	b.n	80029cc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40010000 	.word	0x40010000
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40000c00 	.word	0x40000c00
 80029ec:	40010400 	.word	0x40010400
 80029f0:	40014000 	.word	0x40014000
 80029f4:	40001800 	.word	0x40001800

080029f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIM_ConfigClockSource+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0b4      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x186>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4c:	d03e      	beq.n	8002acc <HAL_TIM_ConfigClockSource+0xd4>
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a52:	f200 8087 	bhi.w	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	f000 8086 	beq.w	8002b6a <HAL_TIM_ConfigClockSource+0x172>
 8002a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a62:	d87f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b70      	cmp	r3, #112	; 0x70
 8002a66:	d01a      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0xa6>
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d87b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d050      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x11a>
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d877      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d03c      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a78:	2b50      	cmp	r3, #80	; 0x50
 8002a7a:	d873      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d058      	beq.n	8002b32 <HAL_TIM_ConfigClockSource+0x13a>
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d86f      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d064      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15a>
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	d86b      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d060      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15a>
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d867      	bhi.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05c      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15a>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d05a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0x15a>
 8002a9c:	e062      	b.n	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f000 f985 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	609a      	str	r2, [r3, #8]
      break;
 8002aca:	e04f      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6899      	ldr	r1, [r3, #8]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f000 f96e 	bl	8002dbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aee:	609a      	str	r2, [r3, #8]
      break;
 8002af0:	e03c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 f8e2 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2150      	movs	r1, #80	; 0x50
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f93b 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002b10:	e02c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6859      	ldr	r1, [r3, #4]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f000 f901 	bl	8002d26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2160      	movs	r1, #96	; 0x60
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f92b 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002b30:	e01c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6859      	ldr	r1, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f000 f8c2 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 f91b 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002b50:	e00c      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f000 f912 	bl	8002d86 <TIM_ITRx_SetConfig>
      break;
 8002b62:	e003      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e000      	b.n	8002b6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a40      	ldr	r2, [pc, #256]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba6:	d00f      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <TIM_Base_SetConfig+0x118>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3c      	ldr	r2, [pc, #240]	; (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3a      	ldr	r2, [pc, #232]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2f      	ldr	r2, [pc, #188]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d02b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d027      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <TIM_Base_SetConfig+0x118>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d023      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d01b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d017      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <TIM_Base_SetConfig+0x128>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <TIM_Base_SetConfig+0x12c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <TIM_Base_SetConfig+0x130>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <TIM_Base_SetConfig+0x134>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <TIM_Base_SetConfig+0x138>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a23      	ldr	r2, [pc, #140]	; (8002cc4 <TIM_Base_SetConfig+0x13c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <TIM_Base_SetConfig+0x114>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d003      	beq.n	8002c80 <TIM_Base_SetConfig+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <TIM_Base_SetConfig+0x124>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d103      	bne.n	8002c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40000800 	.word	0x40000800
 8002ca8:	40000c00 	.word	0x40000c00
 8002cac:	40010400 	.word	0x40010400
 8002cb0:	40014000 	.word	0x40014000
 8002cb4:	40014400 	.word	0x40014400
 8002cb8:	40014800 	.word	0x40014800
 8002cbc:	40001800 	.word	0x40001800
 8002cc0:	40001c00 	.word	0x40001c00
 8002cc4:	40002000 	.word	0x40002000

08002cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 030a 	bic.w	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b087      	sub	sp, #28
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	031b      	lsls	r3, r3, #12
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	621a      	str	r2, [r3, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f043 0307 	orr.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	609a      	str	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e05a      	b.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d01d      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40010400 	.word	0x40010400
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40001800 	.word	0x40001800

08002ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e03f      	b.n	8002f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fea0 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2224      	movs	r2, #36	; 0x24
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f929 	bl	8003190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b08a      	sub	sp, #40	; 0x28
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d17c      	bne.n	80030a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_UART_Transmit+0x2c>
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e075      	b.n	80030aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_UART_Transmit+0x3e>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e06e      	b.n	80030aa <HAL_UART_Transmit+0x11c>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2221      	movs	r2, #33	; 0x21
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe2:	f7fe fc51 	bl	8001888 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	88fa      	ldrh	r2, [r7, #6]
 8002ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	d108      	bne.n	8003010 <HAL_UART_Transmit+0x82>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e003      	b.n	8003018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003020:	e02a      	b.n	8003078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f840 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e036      	b.n	80030aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	3302      	adds	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e007      	b.n	800306a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3301      	adds	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1cf      	bne.n	8003022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	2140      	movs	r1, #64	; 0x40
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f810 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e006      	b.n	80030aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b090      	sub	sp, #64	; 0x40
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	e050      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d04c      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d2:	f7fe fbd9 	bl	8001888 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030de:	429a      	cmp	r2, r3
 80030e0:	d241      	bcs.n	8003166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	330c      	adds	r3, #12
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003102:	637a      	str	r2, [r7, #52]	; 0x34
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3314      	adds	r3, #20
 800311c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	e853 3f00 	ldrex	r3, [r3]
 8003124:	613b      	str	r3, [r7, #16]
   return(result);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f023 0301 	bic.w	r3, r3, #1
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3314      	adds	r3, #20
 8003134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003136:	623a      	str	r2, [r7, #32]
 8003138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	69f9      	ldr	r1, [r7, #28]
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	61bb      	str	r3, [r7, #24]
   return(result);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e5      	bne.n	8003116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d09f      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3740      	adds	r7, #64	; 0x40
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003194:	b09f      	sub	sp, #124	; 0x7c
 8003196:	af00      	add	r7, sp, #0
 8003198:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	68d9      	ldr	r1, [r3, #12]
 80031a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	ea40 0301 	orr.w	r3, r0, r1
 80031b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031d4:	f021 010c 	bic.w	r1, r1, #12
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	6999      	ldr	r1, [r3, #24]
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	ea40 0301 	orr.w	r3, r0, r1
 80031f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4bc5      	ldr	r3, [pc, #788]	; (8003514 <UART_SetConfig+0x384>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d004      	beq.n	800320e <UART_SetConfig+0x7e>
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4bc3      	ldr	r3, [pc, #780]	; (8003518 <UART_SetConfig+0x388>)
 800320a:	429a      	cmp	r2, r3
 800320c:	d103      	bne.n	8003216 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800320e:	f7ff fa93 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8003212:	6778      	str	r0, [r7, #116]	; 0x74
 8003214:	e002      	b.n	800321c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003216:	f7ff fa7b 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 800321a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003224:	f040 80b6 	bne.w	8003394 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322a:	461c      	mov	r4, r3
 800322c:	f04f 0500 	mov.w	r5, #0
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	1891      	adds	r1, r2, r2
 8003236:	6439      	str	r1, [r7, #64]	; 0x40
 8003238:	415b      	adcs	r3, r3
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
 800323c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003240:	1912      	adds	r2, r2, r4
 8003242:	eb45 0303 	adc.w	r3, r5, r3
 8003246:	f04f 0000 	mov.w	r0, #0
 800324a:	f04f 0100 	mov.w	r1, #0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003254:	00d0      	lsls	r0, r2, #3
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	1911      	adds	r1, r2, r4
 800325c:	6639      	str	r1, [r7, #96]	; 0x60
 800325e:	416b      	adcs	r3, r5
 8003260:	667b      	str	r3, [r7, #100]	; 0x64
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	1891      	adds	r1, r2, r2
 800326e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003270:	415b      	adcs	r3, r3
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003278:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800327c:	f7fc fff8 	bl	8000270 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4ba5      	ldr	r3, [pc, #660]	; (800351c <UART_SetConfig+0x38c>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	011e      	lsls	r6, r3, #4
 800328e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003290:	461c      	mov	r4, r3
 8003292:	f04f 0500 	mov.w	r5, #0
 8003296:	4622      	mov	r2, r4
 8003298:	462b      	mov	r3, r5
 800329a:	1891      	adds	r1, r2, r2
 800329c:	6339      	str	r1, [r7, #48]	; 0x30
 800329e:	415b      	adcs	r3, r3
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
 80032a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032a6:	1912      	adds	r2, r2, r4
 80032a8:	eb45 0303 	adc.w	r3, r5, r3
 80032ac:	f04f 0000 	mov.w	r0, #0
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	00d9      	lsls	r1, r3, #3
 80032b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ba:	00d0      	lsls	r0, r2, #3
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	1911      	adds	r1, r2, r4
 80032c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032c4:	416b      	adcs	r3, r5
 80032c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	1891      	adds	r1, r2, r2
 80032d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80032d6:	415b      	adcs	r3, r3
 80032d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032e2:	f7fc ffc5 	bl	8000270 <__aeabi_uldivmod>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4b8c      	ldr	r3, [pc, #560]	; (800351c <UART_SetConfig+0x38c>)
 80032ec:	fba3 1302 	umull	r1, r3, r3, r2
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	2164      	movs	r1, #100	; 0x64
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	4a87      	ldr	r2, [pc, #540]	; (800351c <UART_SetConfig+0x38c>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800330c:	441e      	add	r6, r3
 800330e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003310:	4618      	mov	r0, r3
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	1894      	adds	r4, r2, r2
 800331c:	623c      	str	r4, [r7, #32]
 800331e:	415b      	adcs	r3, r3
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003326:	1812      	adds	r2, r2, r0
 8003328:	eb41 0303 	adc.w	r3, r1, r3
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	f04f 0500 	mov.w	r5, #0
 8003334:	00dd      	lsls	r5, r3, #3
 8003336:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800333a:	00d4      	lsls	r4, r2, #3
 800333c:	4622      	mov	r2, r4
 800333e:	462b      	mov	r3, r5
 8003340:	1814      	adds	r4, r2, r0
 8003342:	653c      	str	r4, [r7, #80]	; 0x50
 8003344:	414b      	adcs	r3, r1
 8003346:	657b      	str	r3, [r7, #84]	; 0x54
 8003348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	461a      	mov	r2, r3
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	1891      	adds	r1, r2, r2
 8003354:	61b9      	str	r1, [r7, #24]
 8003356:	415b      	adcs	r3, r3
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003362:	f7fc ff85 	bl	8000270 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b6c      	ldr	r3, [pc, #432]	; (800351c <UART_SetConfig+0x38c>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <UART_SetConfig+0x38c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 0207 	and.w	r2, r3, #7
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4432      	add	r2, r6
 8003390:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003392:	e0b9      	b.n	8003508 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003396:	461c      	mov	r4, r3
 8003398:	f04f 0500 	mov.w	r5, #0
 800339c:	4622      	mov	r2, r4
 800339e:	462b      	mov	r3, r5
 80033a0:	1891      	adds	r1, r2, r2
 80033a2:	6139      	str	r1, [r7, #16]
 80033a4:	415b      	adcs	r3, r3
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033ac:	1912      	adds	r2, r2, r4
 80033ae:	eb45 0303 	adc.w	r3, r5, r3
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	00d9      	lsls	r1, r3, #3
 80033bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c0:	00d0      	lsls	r0, r2, #3
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	eb12 0804 	adds.w	r8, r2, r4
 80033ca:	eb43 0905 	adc.w	r9, r3, r5
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	008b      	lsls	r3, r1, #2
 80033e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033e6:	0082      	lsls	r2, r0, #2
 80033e8:	4640      	mov	r0, r8
 80033ea:	4649      	mov	r1, r9
 80033ec:	f7fc ff40 	bl	8000270 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b49      	ldr	r3, [pc, #292]	; (800351c <UART_SetConfig+0x38c>)
 80033f6:	fba3 2302 	umull	r2, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	011e      	lsls	r6, r3, #4
 80033fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003400:	4618      	mov	r0, r3
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	1894      	adds	r4, r2, r2
 800340c:	60bc      	str	r4, [r7, #8]
 800340e:	415b      	adcs	r3, r3
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003416:	1812      	adds	r2, r2, r0
 8003418:	eb41 0303 	adc.w	r3, r1, r3
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	f04f 0500 	mov.w	r5, #0
 8003424:	00dd      	lsls	r5, r3, #3
 8003426:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800342a:	00d4      	lsls	r4, r2, #3
 800342c:	4622      	mov	r2, r4
 800342e:	462b      	mov	r3, r5
 8003430:	1814      	adds	r4, r2, r0
 8003432:	64bc      	str	r4, [r7, #72]	; 0x48
 8003434:	414b      	adcs	r3, r1
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003450:	0082      	lsls	r2, r0, #2
 8003452:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003456:	f7fc ff0b 	bl	8000270 <__aeabi_uldivmod>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <UART_SetConfig+0x38c>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a2a      	ldr	r2, [pc, #168]	; (800351c <UART_SetConfig+0x38c>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347e:	441e      	add	r6, r3
 8003480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003482:	4618      	mov	r0, r3
 8003484:	f04f 0100 	mov.w	r1, #0
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	1894      	adds	r4, r2, r2
 800348e:	603c      	str	r4, [r7, #0]
 8003490:	415b      	adcs	r3, r3
 8003492:	607b      	str	r3, [r7, #4]
 8003494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003498:	1812      	adds	r2, r2, r0
 800349a:	eb41 0303 	adc.w	r3, r1, r3
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	f04f 0500 	mov.w	r5, #0
 80034a6:	00dd      	lsls	r5, r3, #3
 80034a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034ac:	00d4      	lsls	r4, r2, #3
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	eb12 0a00 	adds.w	sl, r2, r0
 80034b6:	eb43 0b01 	adc.w	fp, r3, r1
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	008b      	lsls	r3, r1, #2
 80034ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034d2:	0082      	lsls	r2, r0, #2
 80034d4:	4650      	mov	r0, sl
 80034d6:	4659      	mov	r1, fp
 80034d8:	f7fc feca 	bl	8000270 <__aeabi_uldivmod>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <UART_SetConfig+0x38c>)
 80034e2:	fba3 1302 	umull	r1, r3, r3, r2
 80034e6:	095b      	lsrs	r3, r3, #5
 80034e8:	2164      	movs	r1, #100	; 0x64
 80034ea:	fb01 f303 	mul.w	r3, r1, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	3332      	adds	r3, #50	; 0x32
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <UART_SetConfig+0x38c>)
 80034f6:	fba2 2303 	umull	r2, r3, r2, r3
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4432      	add	r2, r6
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	377c      	adds	r7, #124	; 0x7c
 800350c:	46bd      	mov	sp, r7
 800350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003512:	bf00      	nop
 8003514:	40011000 	.word	0x40011000
 8003518:	40011400 	.word	0x40011400
 800351c:	51eb851f 	.word	0x51eb851f

08003520 <load32_littleendian>:
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns 32-bit unsigned integer loaded from x
**************************************************/
static uint32_t load32_littleendian(const uint8_t x[4])
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t r;
  r  = (uint32_t)x[0];
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[1] << 8;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3301      	adds	r3, #1
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[2] << 16;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3302      	adds	r3, #2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[3] << 24;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3303      	adds	r3, #3
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  return r;
 8003558:	68fb      	ldr	r3, [r7, #12]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <load24_littleendian>:
*
* Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
**************************************************/
#if KYBER_ETA1 == 3
static uint32_t load24_littleendian(const uint8_t x[3])
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint32_t r;
  r  = (uint32_t)x[0];
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[1] << 8;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3301      	adds	r3, #1
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  r |= (uint32_t)x[2] << 16;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3302      	adds	r3, #2
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  return r;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <cbd2>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
static void cbd2(poly *r, const uint8_t buf[2*KYBER_N/4])
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b088      	sub	sp, #32
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/8;i++) {
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	e03d      	b.n	800362a <cbd2+0x8c>
    t  = load32_littleendian(buf+4*i);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	4413      	add	r3, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffb2 	bl	8003520 <load32_littleendian>
 80035bc:	6178      	str	r0, [r7, #20]
    d  = t & 0x55555555;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80035c4:	613b      	str	r3, [r7, #16]
    d += (t>>1) & 0x55555555;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]

    for(j=0;j<8;j++) {
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	e021      	b.n	800361e <cbd2+0x80>
      a = (d >> (4*j+0)) & 0x3;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	81fb      	strh	r3, [r7, #14]
      b = (d >> (4*j+2)) & 0x3;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	b21b      	sxth	r3, r3
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	81bb      	strh	r3, [r7, #12]
      r->coeffs[8*i+j] = a - b;
 8003600:	89fa      	ldrh	r2, [r7, #14]
 8003602:	89bb      	ldrh	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	b299      	uxth	r1, r3
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	00da      	lsls	r2, r3, #3
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	441a      	add	r2, r3
 8003610:	b209      	sxth	r1, r1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<8;j++) {
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	3301      	adds	r3, #1
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b07      	cmp	r3, #7
 8003622:	d9da      	bls.n	80035da <cbd2+0x3c>
  for(i=0;i<KYBER_N/8;i++) {
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3301      	adds	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b1f      	cmp	r3, #31
 800362e:	d9be      	bls.n	80035ae <cbd2+0x10>
    }
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <cbd3>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
#if KYBER_ETA1 == 3
static void cbd3(poly *r, const uint8_t buf[3*KYBER_N/4])
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/4;i++) {
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e04c      	b.n	80036e6 <cbd3+0xaa>
    t  = load24_littleendian(buf+3*i);
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	4613      	mov	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	4413      	add	r3, r2
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff84 	bl	8003566 <load24_littleendian>
 800365e:	6178      	str	r0, [r7, #20]
    d  = t & 0x00249249;
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <cbd3+0xbc>)
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    d += (t>>1) & 0x00249249;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	085a      	lsrs	r2, r3, #1
 800366c:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <cbd3+0xbc>)
 800366e:	4013      	ands	r3, r2
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4413      	add	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
    d += (t>>2) & 0x00249249;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	089a      	lsrs	r2, r3, #2
 800367a:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <cbd3+0xbc>)
 800367c:	4013      	ands	r3, r2
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	613b      	str	r3, [r7, #16]

    for(j=0;j<4;j++) {
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
 8003688:	e027      	b.n	80036da <cbd3+0x9e>
      a = (d >> (6*j+0)) & 0x7;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	461a      	mov	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	40d3      	lsrs	r3, r2
 800369a:	b21b      	sxth	r3, r3
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	81fb      	strh	r3, [r7, #14]
      b = (d >> (6*j+3)) & 0x7;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	3303      	adds	r3, #3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	81bb      	strh	r3, [r7, #12]
      r->coeffs[4*i+j] = a - b;
 80036bc:	89fa      	ldrh	r2, [r7, #14]
 80036be:	89bb      	ldrh	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b299      	uxth	r1, r3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	009a      	lsls	r2, r3, #2
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	441a      	add	r2, r3
 80036cc:	b209      	sxth	r1, r1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<4;j++) {
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	3301      	adds	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d9d4      	bls.n	800368a <cbd3+0x4e>
  for(i=0;i<KYBER_N/4;i++) {
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	3301      	adds	r3, #1
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b3f      	cmp	r3, #63	; 0x3f
 80036ea:	d9af      	bls.n	800364c <cbd3+0x10>
    }
  }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	00249249 	.word	0x00249249

080036fc <pqcrystals_kyber512_ref_poly_cbd_eta1>:
#endif

void poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
#if KYBER_ETA1 == 2
  cbd2(r, buf);
#elif KYBER_ETA1 == 3
  cbd3(r, buf);
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ff97 	bl	800363c <cbd3>
#else
#error "This implementation requires eta1 in {2,3}"
#endif
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <pqcrystals_kyber512_ref_poly_cbd_eta2>:

void poly_cbd_eta2(poly *r, const uint8_t buf[KYBER_ETA2*KYBER_N/4])
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
#if KYBER_ETA2 == 2
  cbd2(r, buf);
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ff3b 	bl	800359e <cbd2>
#else
#error "This implementation requires eta2 = 2"
#endif
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <cpucycles>:
static inline uint64_t cpucycles(void) {
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return (uint64_t) *DWT_CYCCNT;
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <cpucycles+0x1c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f04f 0300 	mov.w	r3, #0
}
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	2000017c 	.word	0x2000017c

08003750 <cpucycles_overhead>:
#include <stdint.h>
#include "cpucycles.h"
#include "main.h"

uint64_t cpucycles_overhead(void) {
 8003750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af00      	add	r7, sp, #0
  uint64_t t0, t1, overhead = -1LL;
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	e9c7 2306 	strd	r2, r3, [r7, #24]
  unsigned int i;

  for(i=0;i<100000;i++) {
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	e022      	b.n	80037b0 <cpucycles_overhead+0x60>
    t0 = cpucycles();
 800376a:	f7ff ffe1 	bl	8003730 <cpucycles>
 800376e:	e9c7 0102 	strd	r0, r1, [r7, #8]
    // __asm__ volatile ("");
    __NOP();
 8003772:	bf00      	nop
    t1 = cpucycles();
 8003774:	f7ff ffdc 	bl	8003730 <cpucycles>
 8003778:	e9c7 0100 	strd	r0, r1, [r7]
    if(t1 - t0 < overhead)
 800377c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003784:	1a84      	subs	r4, r0, r2
 8003786:	eb61 0503 	sbc.w	r5, r1, r3
 800378a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800378e:	429d      	cmp	r5, r3
 8003790:	bf08      	it	eq
 8003792:	4294      	cmpeq	r4, r2
 8003794:	d209      	bcs.n	80037aa <cpucycles_overhead+0x5a>
      overhead = t1 - t0;
 8003796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800379a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800379e:	ebb0 0802 	subs.w	r8, r0, r2
 80037a2:	eb61 0903 	sbc.w	r9, r1, r3
 80037a6:	e9c7 8906 	strd	r8, r9, [r7, #24]
  for(i=0;i<100000;i++) {
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3301      	adds	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <cpucycles_overhead+0x78>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d9d8      	bls.n	800376a <cpucycles_overhead+0x1a>
  }

  return overhead;
 80037b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037c8:	0001869f 	.word	0x0001869f

080037cc <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 80037cc:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 80037e2:	2100      	movs	r1, #0
 80037e4:	6179      	str	r1, [r7, #20]
 80037e6:	e021      	b.n	800382c <load64+0x60>
    r |= (uint64_t)x[i] << 8*i;
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	6979      	ldr	r1, [r7, #20]
 80037ec:	4401      	add	r1, r0
 80037ee:	7809      	ldrb	r1, [r1, #0]
 80037f0:	b2c8      	uxtb	r0, r1
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	697c      	ldr	r4, [r7, #20]
 80037f8:	00e4      	lsls	r4, r4, #3
 80037fa:	f1a4 0620 	sub.w	r6, r4, #32
 80037fe:	f1c4 0520 	rsb	r5, r4, #32
 8003802:	fa01 f304 	lsl.w	r3, r1, r4
 8003806:	fa00 f606 	lsl.w	r6, r0, r6
 800380a:	4333      	orrs	r3, r6
 800380c:	fa20 f505 	lsr.w	r5, r0, r5
 8003810:	432b      	orrs	r3, r5
 8003812:	fa00 f204 	lsl.w	r2, r0, r4
 8003816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800381a:	ea40 0802 	orr.w	r8, r0, r2
 800381e:	ea41 0903 	orr.w	r9, r1, r3
 8003822:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	3101      	adds	r1, #1
 800382a:	6179      	str	r1, [r7, #20]
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	2907      	cmp	r1, #7
 8003830:	d9da      	bls.n	80037e8 <load64+0x1c>

  return r;
 8003832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003836:	4610      	mov	r0, r2
 8003838:	4619      	mov	r1, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8003842:	4770      	bx	lr

08003844 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 8003844:	b4f0      	push	{r4, r5, r6, r7}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	e019      	b.n	800388a <store64+0x46>
    x[i] = u >> 8*i;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	00d9      	lsls	r1, r3, #3
 800385a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800385e:	f1c1 0620 	rsb	r6, r1, #32
 8003862:	f1a1 0020 	sub.w	r0, r1, #32
 8003866:	fa22 f401 	lsr.w	r4, r2, r1
 800386a:	fa03 f606 	lsl.w	r6, r3, r6
 800386e:	4334      	orrs	r4, r6
 8003870:	fa23 f000 	lsr.w	r0, r3, r0
 8003874:	4304      	orrs	r4, r0
 8003876:	fa23 f501 	lsr.w	r5, r3, r1
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	b2e2      	uxtb	r2, r4
 8003882:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3301      	adds	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2b07      	cmp	r3, #7
 800388e:	d9e2      	bls.n	8003856 <store64+0x12>
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bcf0      	pop	{r4, r5, r6, r7}
 800389a:	4770      	bx	lr

0800389c <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 800389c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038a0:	f6ad 3d88 	subw	sp, sp, #2952	; 0xb88
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038aa:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80038ac:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b6:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80038ba:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 80038be:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038c8:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80038cc:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80038d0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038da:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80038de:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80038e2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80038ec:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80038f0:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 80038f4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038fe:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8003902:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 8003906:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003910:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8003914:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8003918:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003922:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8003926:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800392a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003934:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8003938:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800393c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003946:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 800394a:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800394e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003958:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 800395c:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8003960:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800396a:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 800396e:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 8003972:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800397c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8003980:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8003984:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800398e:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8003992:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8003996:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80039a0:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80039a4:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80039a8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80039b2:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80039b6:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 80039ba:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80039c4:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 80039c8:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 80039cc:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80039d6:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80039da:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 80039de:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80039e8:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 80039f0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80039fa:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80039fe:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8003a02:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8003a0c:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003a10:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8003a14:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8003a1e:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003a22:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8003a26:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8003a30:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003a34:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8003a38:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8003a42:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8003a46:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8003a4a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8003a54:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8003a58:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8003a5c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8003a66:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8003a74:	f002 bd96 	b.w	80065a4 <KeccakF1600_StatePermute+0x2d08>
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8003a78:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a80:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	ea80 0602 	eor.w	r6, r0, r2
 8003a8c:	f8c7 6990 	str.w	r6, [r7, #2448]	; 0x990
 8003a90:	404b      	eors	r3, r1
 8003a92:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8003a96:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f8d7 1990 	ldr.w	r1, [r7, #2448]	; 0x990
 8003aa2:	4051      	eors	r1, r2
 8003aa4:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 8003aa8:	f8d7 1994 	ldr.w	r1, [r7, #2452]	; 0x994
 8003aac:	404b      	eors	r3, r1
 8003aae:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8003ab2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 8003abe:	4051      	eors	r1, r2
 8003ac0:	f8c7 1980 	str.w	r1, [r7, #2432]	; 0x980
 8003ac4:	f8d7 198c 	ldr.w	r1, [r7, #2444]	; 0x98c
 8003ac8:	404b      	eors	r3, r1
 8003aca:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8003ace:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f8d7 1980 	ldr.w	r1, [r7, #2432]	; 0x980
 8003ada:	4051      	eors	r1, r2
 8003adc:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 8003ae0:	f8d7 1984 	ldr.w	r1, [r7, #2436]	; 0x984
 8003ae4:	404b      	eors	r3, r1
 8003ae6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8003aea:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003af6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8003afa:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b02:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	ea80 0602 	eor.w	r6, r0, r2
 8003b0e:	f8c7 6978 	str.w	r6, [r7, #2424]	; 0x978
 8003b12:	404b      	eors	r3, r1
 8003b14:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8003b18:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 8003b24:	4051      	eors	r1, r2
 8003b26:	f8c7 1970 	str.w	r1, [r7, #2416]	; 0x970
 8003b2a:	f8d7 197c 	ldr.w	r1, [r7, #2428]	; 0x97c
 8003b2e:	404b      	eors	r3, r1
 8003b30:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8003b34:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f8d7 1970 	ldr.w	r1, [r7, #2416]	; 0x970
 8003b40:	4051      	eors	r1, r2
 8003b42:	f8c7 1968 	str.w	r1, [r7, #2408]	; 0x968
 8003b46:	f8d7 1974 	ldr.w	r1, [r7, #2420]	; 0x974
 8003b4a:	404b      	eors	r3, r1
 8003b4c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8003b50:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f8d7 1968 	ldr.w	r1, [r7, #2408]	; 0x968
 8003b5c:	4051      	eors	r1, r2
 8003b5e:	f8c7 1540 	str.w	r1, [r7, #1344]	; 0x540
 8003b62:	f8d7 196c 	ldr.w	r1, [r7, #2412]	; 0x96c
 8003b66:	404b      	eors	r3, r1
 8003b68:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8003b6c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003b78:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8003b7c:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8003b80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b84:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	ea80 0602 	eor.w	r6, r0, r2
 8003b90:	f8c7 6960 	str.w	r6, [r7, #2400]	; 0x960
 8003b94:	404b      	eors	r3, r1
 8003b96:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8003b9a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f8d7 1960 	ldr.w	r1, [r7, #2400]	; 0x960
 8003ba6:	4051      	eors	r1, r2
 8003ba8:	f8c7 1958 	str.w	r1, [r7, #2392]	; 0x958
 8003bac:	f8d7 1964 	ldr.w	r1, [r7, #2404]	; 0x964
 8003bb0:	404b      	eors	r3, r1
 8003bb2:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8003bb6:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f8d7 1958 	ldr.w	r1, [r7, #2392]	; 0x958
 8003bc2:	4051      	eors	r1, r2
 8003bc4:	f8c7 1950 	str.w	r1, [r7, #2384]	; 0x950
 8003bc8:	f8d7 195c 	ldr.w	r1, [r7, #2396]	; 0x95c
 8003bcc:	404b      	eors	r3, r1
 8003bce:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8003bd2:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f8d7 1950 	ldr.w	r1, [r7, #2384]	; 0x950
 8003bde:	4051      	eors	r1, r2
 8003be0:	f8c7 1538 	str.w	r1, [r7, #1336]	; 0x538
 8003be4:	f8d7 1954 	ldr.w	r1, [r7, #2388]	; 0x954
 8003be8:	404b      	eors	r3, r1
 8003bea:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8003bee:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003bfa:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8003bfe:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8003c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c06:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	ea80 0602 	eor.w	r6, r0, r2
 8003c12:	f8c7 6948 	str.w	r6, [r7, #2376]	; 0x948
 8003c16:	404b      	eors	r3, r1
 8003c18:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8003c1c:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f8d7 1948 	ldr.w	r1, [r7, #2376]	; 0x948
 8003c28:	4051      	eors	r1, r2
 8003c2a:	f8c7 1940 	str.w	r1, [r7, #2368]	; 0x940
 8003c2e:	f8d7 194c 	ldr.w	r1, [r7, #2380]	; 0x94c
 8003c32:	404b      	eors	r3, r1
 8003c34:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8003c38:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f8d7 1940 	ldr.w	r1, [r7, #2368]	; 0x940
 8003c44:	4051      	eors	r1, r2
 8003c46:	f8c7 1938 	str.w	r1, [r7, #2360]	; 0x938
 8003c4a:	f8d7 1944 	ldr.w	r1, [r7, #2372]	; 0x944
 8003c4e:	404b      	eors	r3, r1
 8003c50:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8003c54:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5c:	f8d7 1938 	ldr.w	r1, [r7, #2360]	; 0x938
 8003c60:	4051      	eors	r1, r2
 8003c62:	f8c7 1530 	str.w	r1, [r7, #1328]	; 0x530
 8003c66:	f8d7 193c 	ldr.w	r1, [r7, #2364]	; 0x93c
 8003c6a:	404b      	eors	r3, r1
 8003c6c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8003c70:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003c7c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8003c80:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8003c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c88:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	ea80 0602 	eor.w	r6, r0, r2
 8003c94:	f8c7 6930 	str.w	r6, [r7, #2352]	; 0x930
 8003c98:	404b      	eors	r3, r1
 8003c9a:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8003c9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f8d7 1930 	ldr.w	r1, [r7, #2352]	; 0x930
 8003caa:	4051      	eors	r1, r2
 8003cac:	f8c7 1928 	str.w	r1, [r7, #2344]	; 0x928
 8003cb0:	f8d7 1934 	ldr.w	r1, [r7, #2356]	; 0x934
 8003cb4:	404b      	eors	r3, r1
 8003cb6:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8003cba:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f8d7 1928 	ldr.w	r1, [r7, #2344]	; 0x928
 8003cc6:	4051      	eors	r1, r2
 8003cc8:	f8c7 1920 	str.w	r1, [r7, #2336]	; 0x920
 8003ccc:	f8d7 192c 	ldr.w	r1, [r7, #2348]	; 0x92c
 8003cd0:	404b      	eors	r3, r1
 8003cd2:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8003cd6:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	f8d7 1920 	ldr.w	r1, [r7, #2336]	; 0x920
 8003ce2:	4051      	eors	r1, r2
 8003ce4:	f8c7 1528 	str.w	r1, [r7, #1320]	; 0x528
 8003ce8:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 8003cec:	404b      	eors	r3, r1
 8003cee:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8003cf2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8003cfe:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 8003d02:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8003d06:	0fda      	lsrs	r2, r3, #31
 8003d08:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8003d14:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8003d18:	0fda      	lsrs	r2, r3, #31
 8003d1a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8003d26:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 8003d32:	4051      	eors	r1, r2
 8003d34:	f8c7 1520 	str.w	r1, [r7, #1312]	; 0x520
 8003d38:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 8003d3c:	404b      	eors	r3, r1
 8003d3e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8003d42:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8003d4e:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8003d52:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8003d56:	0fda      	lsrs	r2, r3, #31
 8003d58:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8003d64:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8003d68:	0fda      	lsrs	r2, r3, #31
 8003d6a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8003d76:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f8d7 1910 	ldr.w	r1, [r7, #2320]	; 0x910
 8003d82:	4051      	eors	r1, r2
 8003d84:	f8c7 1518 	str.w	r1, [r7, #1304]	; 0x518
 8003d88:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 8003d8c:	404b      	eors	r3, r1
 8003d8e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8003d92:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8003d9e:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8003da2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8003da6:	0fda      	lsrs	r2, r3, #31
 8003da8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8003db4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8003db8:	0fda      	lsrs	r2, r3, #31
 8003dba:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8003dc6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f8d7 1908 	ldr.w	r1, [r7, #2312]	; 0x908
 8003dd2:	4051      	eors	r1, r2
 8003dd4:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
 8003dd8:	f8d7 190c 	ldr.w	r1, [r7, #2316]	; 0x90c
 8003ddc:	404b      	eors	r3, r1
 8003dde:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8003de2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8003dee:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8003df2:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8003df6:	0fda      	lsrs	r2, r3, #31
 8003df8:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8003e04:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8003e08:	0fda      	lsrs	r2, r3, #31
 8003e0a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8003e16:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f8d7 1900 	ldr.w	r1, [r7, #2304]	; 0x900
 8003e22:	4051      	eors	r1, r2
 8003e24:	f8c7 1508 	str.w	r1, [r7, #1288]	; 0x508
 8003e28:	f8d7 1904 	ldr.w	r1, [r7, #2308]	; 0x904
 8003e2c:	404b      	eors	r3, r1
 8003e2e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8003e32:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8003e3e:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8003e42:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8003e46:	0fda      	lsrs	r2, r3, #31
 8003e48:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8003e54:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8003e58:	0fda      	lsrs	r2, r3, #31
 8003e5a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8003e66:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	; 0x8f8
 8003e72:	4051      	eors	r1, r2
 8003e74:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 8003e78:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	; 0x8fc
 8003e7c:	404b      	eors	r3, r1
 8003e7e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8003e82:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8003e8e:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8003e92:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e9a:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	ea80 0602 	eor.w	r6, r0, r2
 8003ea6:	f8c7 64f8 	str.w	r6, [r7, #1272]	; 0x4f8
 8003eaa:	404b      	eors	r3, r1
 8003eac:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8003eb0:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8003ebc:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8003ec0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003ecc:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8003ed0:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ed8:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	ea80 0602 	eor.w	r6, r0, r2
 8003ee4:	f8c7 64f0 	str.w	r6, [r7, #1264]	; 0x4f0
 8003ee8:	404b      	eors	r3, r1
 8003eea:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8003eee:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8003efa:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8003efe:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8003f02:	031a      	lsls	r2, r3, #12
 8003f04:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8003f08:	0d1b      	lsrs	r3, r3, #20
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8003f10:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8003f14:	031a      	lsls	r2, r3, #12
 8003f16:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8003f1a:	0d1b      	lsrs	r3, r3, #20
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8003f22:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003f2e:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8003f32:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f3a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	ea80 0602 	eor.w	r6, r0, r2
 8003f46:	f8c7 64e0 	str.w	r6, [r7, #1248]	; 0x4e0
 8003f4a:	404b      	eors	r3, r1
 8003f4c:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8003f50:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8003f60:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8003f64:	02da      	lsls	r2, r3, #11
 8003f66:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8003f6a:	0d5b      	lsrs	r3, r3, #21
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8003f72:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8003f76:	02da      	lsls	r2, r3, #11
 8003f78:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8003f7c:	0d5b      	lsrs	r3, r3, #21
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8003f84:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8003f90:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8003f94:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f9c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	ea80 0602 	eor.w	r6, r0, r2
 8003fa8:	f8c7 64d0 	str.w	r6, [r7, #1232]	; 0x4d0
 8003fac:	404b      	eors	r3, r1
 8003fae:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8003fb2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8003fbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8003fc2:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8003fc6:	0ada      	lsrs	r2, r3, #11
 8003fc8:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8003fcc:	055b      	lsls	r3, r3, #21
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8003fd4:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8003fd8:	0ada      	lsrs	r2, r3, #11
 8003fda:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8003fde:	055b      	lsls	r3, r3, #21
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8003fe6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8003ff2:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 8003ff6:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ffe:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	ea80 0602 	eor.w	r6, r0, r2
 800400a:	f8c7 64c0 	str.w	r6, [r7, #1216]	; 0x4c0
 800400e:	404b      	eors	r3, r1
 8004010:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8004014:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8004020:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8004024:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8004028:	0c9a      	lsrs	r2, r3, #18
 800402a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800402e:	039b      	lsls	r3, r3, #14
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8004036:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800403a:	0c9a      	lsrs	r2, r3, #18
 800403c:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8004040:	039b      	lsls	r3, r3, #14
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8004048:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004054:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 8004058:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	43d1      	mvns	r1, r2
 8004062:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 8004066:	43db      	mvns	r3, r3
 8004068:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 800406c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004074:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	; 0x8f0
 8004078:	4011      	ands	r1, r2
 800407a:	f8c7 18e8 	str.w	r1, [r7, #2280]	; 0x8e8
 800407e:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 8004082:	400b      	ands	r3, r1
 8004084:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 8004088:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	; 0x8e8
 8004094:	4051      	eors	r1, r2
 8004096:	f8c7 14b0 	str.w	r1, [r7, #1200]	; 0x4b0
 800409a:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	; 0x8ec
 800409e:	404b      	eors	r3, r1
 80040a0:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 80040a4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80040b0:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80040b4:	4afd      	ldr	r2, [pc, #1012]	; (80044ac <KeccakF1600_StatePermute+0xc10>)
 80040b6:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040c2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	ea82 0600 	eor.w	r6, r2, r0
 80040ce:	f8c7 64a8 	str.w	r6, [r7, #1192]	; 0x4a8
 80040d2:	404b      	eors	r3, r1
 80040d4:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80040d8:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80040e4:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 80040e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80040ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f0:	43d1      	mvns	r1, r2
 80040f2:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 80040f6:	43db      	mvns	r3, r3
 80040f8:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80040fc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	; 0x8e0
 8004108:	4011      	ands	r1, r2
 800410a:	f8c7 18d8 	str.w	r1, [r7, #2264]	; 0x8d8
 800410e:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	; 0x8e4
 8004112:	400b      	ands	r3, r1
 8004114:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8004118:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	; 0x8d8
 8004124:	4051      	eors	r1, r2
 8004126:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 800412a:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	; 0x8dc
 800412e:	404b      	eors	r3, r1
 8004130:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8004134:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8004140:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8004144:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	43d1      	mvns	r1, r2
 800414e:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 8004152:	43db      	mvns	r3, r3
 8004154:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8004158:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	; 0x8d0
 8004164:	4011      	ands	r1, r2
 8004166:	f8c7 18c8 	str.w	r1, [r7, #2248]	; 0x8c8
 800416a:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	; 0x8d4
 800416e:	400b      	ands	r3, r1
 8004170:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 8004174:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	; 0x8c8
 8004180:	4051      	eors	r1, r2
 8004182:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 8004186:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	; 0x8cc
 800418a:	404b      	eors	r3, r1
 800418c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8004190:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800419c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 80041a0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	43d1      	mvns	r1, r2
 80041aa:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 80041ae:	43db      	mvns	r3, r3
 80041b0:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80041b4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	; 0x8c0
 80041c0:	4011      	ands	r1, r2
 80041c2:	f8c7 18b8 	str.w	r1, [r7, #2232]	; 0x8b8
 80041c6:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	; 0x8c4
 80041ca:	400b      	ands	r3, r1
 80041cc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 80041d0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	; 0x8b8
 80041dc:	4051      	eors	r1, r2
 80041de:	f8c7 1490 	str.w	r1, [r7, #1168]	; 0x490
 80041e2:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	; 0x8bc
 80041e6:	404b      	eors	r3, r1
 80041e8:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80041ec:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80041f8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 80041fc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	43d1      	mvns	r1, r2
 8004206:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800420a:	43db      	mvns	r3, r3
 800420c:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8004210:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	; 0x8b0
 800421c:	4011      	ands	r1, r2
 800421e:	f8c7 18a8 	str.w	r1, [r7, #2216]	; 0x8a8
 8004222:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	; 0x8b4
 8004226:	400b      	ands	r3, r1
 8004228:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 800422c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	; 0x8a8
 8004238:	4051      	eors	r1, r2
 800423a:	f8c7 1488 	str.w	r1, [r7, #1160]	; 0x488
 800423e:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	; 0x8ac
 8004242:	404b      	eors	r3, r1
 8004244:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8004248:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8004254:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 8004258:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800425c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004260:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	ea80 0602 	eor.w	r6, r0, r2
 800426c:	f8c7 6480 	str.w	r6, [r7, #1152]	; 0x480
 8004270:	404b      	eors	r3, r1
 8004272:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8004276:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8004282:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 8004286:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 800428a:	091a      	lsrs	r2, r3, #4
 800428c:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8004290:	071b      	lsls	r3, r3, #28
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8004298:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 800429c:	091a      	lsrs	r2, r3, #4
 800429e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 80042a2:	071b      	lsls	r3, r3, #28
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80042aa:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80042b6:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 80042ba:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80042be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c2:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	ea80 0602 	eor.w	r6, r0, r2
 80042ce:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 80042d2:	404b      	eors	r3, r1
 80042d4:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80042d8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 80042e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 80042e8:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80042ec:	0b1a      	lsrs	r2, r3, #12
 80042ee:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80042f2:	051b      	lsls	r3, r3, #20
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 80042fa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80042fe:	0b1a      	lsrs	r2, r3, #12
 8004300:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8004304:	051b      	lsls	r3, r3, #20
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 800430c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004318:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 800431c:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8004320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004324:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	ea80 0602 	eor.w	r6, r0, r2
 8004330:	f8c7 6460 	str.w	r6, [r7, #1120]	; 0x460
 8004334:	404b      	eors	r3, r1
 8004336:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 800433a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8004346:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800434a:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800434e:	0f5a      	lsrs	r2, r3, #29
 8004350:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800435c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8004360:	0f5a      	lsrs	r2, r3, #29
 8004362:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800436e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800437a:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 800437e:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8004382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004386:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	ea80 0602 	eor.w	r6, r0, r2
 8004392:	f8c7 6450 	str.w	r6, [r7, #1104]	; 0x450
 8004396:	404b      	eors	r3, r1
 8004398:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800439c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80043a8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 80043ac:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80043b0:	035a      	lsls	r2, r3, #13
 80043b2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80043b6:	0cdb      	lsrs	r3, r3, #19
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 80043be:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80043c2:	035a      	lsls	r2, r3, #13
 80043c4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80043c8:	0cdb      	lsrs	r3, r3, #19
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80043d0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80043d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80043dc:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 80043e0:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 80043e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043e8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	ea80 0602 	eor.w	r6, r0, r2
 80043f4:	f8c7 6440 	str.w	r6, [r7, #1088]	; 0x440
 80043f8:	404b      	eors	r3, r1
 80043fa:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 80043fe:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800440a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800440e:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8004412:	075a      	lsls	r2, r3, #29
 8004414:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8004418:	08db      	lsrs	r3, r3, #3
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8004420:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8004424:	075a      	lsls	r2, r3, #29
 8004426:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800442a:	08db      	lsrs	r3, r3, #3
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8004432:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800443e:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 8004442:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	43d1      	mvns	r1, r2
 800444c:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 8004450:	43db      	mvns	r3, r3
 8004452:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8004456:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	; 0x8a0
 8004462:	4011      	ands	r1, r2
 8004464:	f8c7 1898 	str.w	r1, [r7, #2200]	; 0x898
 8004468:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	; 0x8a4
 800446c:	400b      	ands	r3, r1
 800446e:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 8004472:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f8d7 1898 	ldr.w	r1, [r7, #2200]	; 0x898
 800447e:	4051      	eors	r1, r2
 8004480:	f8c7 1430 	str.w	r1, [r7, #1072]	; 0x430
 8004484:	f8d7 189c 	ldr.w	r1, [r7, #2204]	; 0x89c
 8004488:	404b      	eors	r3, r1
 800448a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800448e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 800449a:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 800449e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	43d1      	mvns	r1, r2
 80044a8:	e002      	b.n	80044b0 <KeccakF1600_StatePermute+0xc14>
 80044aa:	bf00      	nop
 80044ac:	0800b350 	.word	0x0800b350
 80044b0:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 80044b4:	43db      	mvns	r3, r3
 80044b6:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 80044ba:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f8d7 1890 	ldr.w	r1, [r7, #2192]	; 0x890
 80044c6:	4011      	ands	r1, r2
 80044c8:	f8c7 1888 	str.w	r1, [r7, #2184]	; 0x888
 80044cc:	f8d7 1894 	ldr.w	r1, [r7, #2196]	; 0x894
 80044d0:	400b      	ands	r3, r1
 80044d2:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 80044d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80044da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044de:	f8d7 1888 	ldr.w	r1, [r7, #2184]	; 0x888
 80044e2:	4051      	eors	r1, r2
 80044e4:	f8c7 1428 	str.w	r1, [r7, #1064]	; 0x428
 80044e8:	f8d7 188c 	ldr.w	r1, [r7, #2188]	; 0x88c
 80044ec:	404b      	eors	r3, r1
 80044ee:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80044f2:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80044fe:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 8004502:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	43d1      	mvns	r1, r2
 800450c:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 8004510:	43db      	mvns	r3, r3
 8004512:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8004516:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f8d7 1880 	ldr.w	r1, [r7, #2176]	; 0x880
 8004522:	4011      	ands	r1, r2
 8004524:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
 8004528:	f8d7 1884 	ldr.w	r1, [r7, #2180]	; 0x884
 800452c:	400b      	ands	r3, r1
 800452e:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8004532:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 800453e:	4051      	eors	r1, r2
 8004540:	f8c7 1420 	str.w	r1, [r7, #1056]	; 0x420
 8004544:	f8d7 187c 	ldr.w	r1, [r7, #2172]	; 0x87c
 8004548:	404b      	eors	r3, r1
 800454a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 800454e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 800455a:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800455e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	43d1      	mvns	r1, r2
 8004568:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 800456c:	43db      	mvns	r3, r3
 800456e:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 8004572:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f8d7 1870 	ldr.w	r1, [r7, #2160]	; 0x870
 800457e:	4011      	ands	r1, r2
 8004580:	f8c7 1868 	str.w	r1, [r7, #2152]	; 0x868
 8004584:	f8d7 1874 	ldr.w	r1, [r7, #2164]	; 0x874
 8004588:	400b      	ands	r3, r1
 800458a:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 800458e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f8d7 1868 	ldr.w	r1, [r7, #2152]	; 0x868
 800459a:	4051      	eors	r1, r2
 800459c:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 80045a0:	f8d7 186c 	ldr.w	r1, [r7, #2156]	; 0x86c
 80045a4:	404b      	eors	r3, r1
 80045a6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 80045aa:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80045b6:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 80045ba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	43d1      	mvns	r1, r2
 80045c4:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 80045c8:	43db      	mvns	r3, r3
 80045ca:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 80045ce:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80045d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d6:	f8d7 1860 	ldr.w	r1, [r7, #2144]	; 0x860
 80045da:	4011      	ands	r1, r2
 80045dc:	f8c7 1858 	str.w	r1, [r7, #2136]	; 0x858
 80045e0:	f8d7 1864 	ldr.w	r1, [r7, #2148]	; 0x864
 80045e4:	400b      	ands	r3, r1
 80045e6:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 80045ea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	f8d7 1858 	ldr.w	r1, [r7, #2136]	; 0x858
 80045f6:	4051      	eors	r1, r2
 80045f8:	f8c7 1410 	str.w	r1, [r7, #1040]	; 0x410
 80045fc:	f8d7 185c 	ldr.w	r1, [r7, #2140]	; 0x85c
 8004600:	404b      	eors	r3, r1
 8004602:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8004606:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8004612:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 8004616:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800461a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800461e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	ea80 0602 	eor.w	r6, r0, r2
 800462a:	f8c7 6408 	str.w	r6, [r7, #1032]	; 0x408
 800462e:	404b      	eors	r3, r1
 8004630:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8004634:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8004640:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8004644:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8004648:	0fda      	lsrs	r2, r3, #31
 800464a:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8004656:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 800465a:	0fda      	lsrs	r2, r3, #31
 800465c:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8004668:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004674:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 8004678:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800467c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004680:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004688:	ea80 0602 	eor.w	r6, r0, r2
 800468c:	f8c7 63f8 	str.w	r6, [r7, #1016]	; 0x3f8
 8004690:	404b      	eors	r3, r1
 8004692:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8004696:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 800469a:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 800469e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80046a2:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80046a6:	0e9a      	lsrs	r2, r3, #26
 80046a8:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 80046b4:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 80046b8:	0e9a      	lsrs	r2, r3, #26
 80046ba:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 80046be:	019b      	lsls	r3, r3, #6
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80046c6:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80046ca:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80046ce:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 80046d2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80046d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046da:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	ea80 0602 	eor.w	r6, r0, r2
 80046e6:	f8c7 63e8 	str.w	r6, [r7, #1000]	; 0x3e8
 80046ea:	404b      	eors	r3, r1
 80046ec:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80046f0:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 80046f4:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80046f8:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 80046fc:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004700:	09da      	lsrs	r2, r3, #7
 8004702:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8004706:	065b      	lsls	r3, r3, #25
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 800470e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8004712:	09da      	lsrs	r2, r3, #7
 8004714:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8004718:	065b      	lsls	r3, r3, #25
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8004720:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8004724:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004728:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800472c:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004734:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	ea80 0602 	eor.w	r6, r0, r2
 8004740:	f8c7 63d8 	str.w	r6, [r7, #984]	; 0x3d8
 8004744:	404b      	eors	r3, r1
 8004746:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800474a:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 800474e:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8004752:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8004756:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 800475a:	0e1a      	lsrs	r2, r3, #24
 800475c:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8004768:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 800476c:	0e1a      	lsrs	r2, r3, #24
 800476e:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 800477a:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 800477e:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004782:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 8004786:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 800478a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478e:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	ea80 0602 	eor.w	r6, r0, r2
 800479a:	f8c7 63c8 	str.w	r6, [r7, #968]	; 0x3c8
 800479e:	404b      	eors	r3, r1
 80047a0:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80047a4:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80047a8:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80047ac:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80047b0:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80047b4:	0b9a      	lsrs	r2, r3, #14
 80047b6:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80047ba:	049b      	lsls	r3, r3, #18
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 80047c2:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 80047c6:	0b9a      	lsrs	r2, r3, #14
 80047c8:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 80047cc:	049b      	lsls	r3, r3, #18
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 80047d4:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80047d8:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80047dc:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 80047e0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	43d1      	mvns	r1, r2
 80047ea:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 80047ee:	43db      	mvns	r3, r3
 80047f0:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 80047f4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f8d7 1850 	ldr.w	r1, [r7, #2128]	; 0x850
 8004800:	4011      	ands	r1, r2
 8004802:	f8c7 1848 	str.w	r1, [r7, #2120]	; 0x848
 8004806:	f8d7 1854 	ldr.w	r1, [r7, #2132]	; 0x854
 800480a:	400b      	ands	r3, r1
 800480c:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8004810:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	f8d7 1848 	ldr.w	r1, [r7, #2120]	; 0x848
 800481c:	4051      	eors	r1, r2
 800481e:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 8004822:	f8d7 184c 	ldr.w	r1, [r7, #2124]	; 0x84c
 8004826:	404b      	eors	r3, r1
 8004828:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 800482c:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8004830:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8004834:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8004838:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	43d1      	mvns	r1, r2
 8004842:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 8004846:	43db      	mvns	r3, r3
 8004848:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 800484c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f8d7 1840 	ldr.w	r1, [r7, #2112]	; 0x840
 8004858:	4011      	ands	r1, r2
 800485a:	f8c7 1838 	str.w	r1, [r7, #2104]	; 0x838
 800485e:	f8d7 1844 	ldr.w	r1, [r7, #2116]	; 0x844
 8004862:	400b      	ands	r3, r1
 8004864:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 8004868:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 8004874:	4051      	eors	r1, r2
 8004876:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 800487a:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 800487e:	404b      	eors	r3, r1
 8004880:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8004884:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8004888:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 800488c:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 8004890:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	43d1      	mvns	r1, r2
 800489a:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 800489e:	43db      	mvns	r3, r3
 80048a0:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 80048a4:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f8d7 1830 	ldr.w	r1, [r7, #2096]	; 0x830
 80048b0:	4011      	ands	r1, r2
 80048b2:	f8c7 1828 	str.w	r1, [r7, #2088]	; 0x828
 80048b6:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 80048ba:	400b      	ands	r3, r1
 80048bc:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 80048c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f8d7 1828 	ldr.w	r1, [r7, #2088]	; 0x828
 80048cc:	4051      	eors	r1, r2
 80048ce:	f8c7 13a8 	str.w	r1, [r7, #936]	; 0x3a8
 80048d2:	f8d7 182c 	ldr.w	r1, [r7, #2092]	; 0x82c
 80048d6:	404b      	eors	r3, r1
 80048d8:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80048dc:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 80048e0:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 80048e4:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 80048e8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	43d1      	mvns	r1, r2
 80048f2:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 80048f6:	43db      	mvns	r3, r3
 80048f8:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 80048fc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f8d7 1820 	ldr.w	r1, [r7, #2080]	; 0x820
 8004908:	4011      	ands	r1, r2
 800490a:	f8c7 1818 	str.w	r1, [r7, #2072]	; 0x818
 800490e:	f8d7 1824 	ldr.w	r1, [r7, #2084]	; 0x824
 8004912:	400b      	ands	r3, r1
 8004914:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8004918:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f8d7 1818 	ldr.w	r1, [r7, #2072]	; 0x818
 8004924:	4051      	eors	r1, r2
 8004926:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 800492a:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 800492e:	404b      	eors	r3, r1
 8004930:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8004934:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8004938:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 800493c:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8004940:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	43d1      	mvns	r1, r2
 800494a:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 800494e:	43db      	mvns	r3, r3
 8004950:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8004954:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 8004960:	4011      	ands	r1, r2
 8004962:	f8c7 1808 	str.w	r1, [r7, #2056]	; 0x808
 8004966:	f8d7 1814 	ldr.w	r1, [r7, #2068]	; 0x814
 800496a:	400b      	ands	r3, r1
 800496c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8004970:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004978:	f8d7 1808 	ldr.w	r1, [r7, #2056]	; 0x808
 800497c:	4051      	eors	r1, r2
 800497e:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8004982:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8004986:	404b      	eors	r3, r1
 8004988:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800498c:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8004990:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8004994:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8004998:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 800499c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049a0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	ea80 0602 	eor.w	r6, r0, r2
 80049ac:	f8c7 6390 	str.w	r6, [r7, #912]	; 0x390
 80049b0:	404b      	eors	r3, r1
 80049b2:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 80049b6:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80049ba:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 80049be:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 80049c2:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 80049c6:	095a      	lsrs	r2, r3, #5
 80049c8:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 80049cc:	06db      	lsls	r3, r3, #27
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 80049d4:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 80049d8:	095a      	lsrs	r2, r3, #5
 80049da:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 80049de:	06db      	lsls	r3, r3, #27
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80049e6:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 80049ea:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80049ee:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 80049f2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80049f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049fa:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	ea80 0602 	eor.w	r6, r0, r2
 8004a06:	f8c7 6380 	str.w	r6, [r7, #896]	; 0x380
 8004a0a:	404b      	eors	r3, r1
 8004a0c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8004a10:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8004a14:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8004a18:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8004a1c:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004a26:	0f1b      	lsrs	r3, r3, #28
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8004a2e:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8004a32:	011a      	lsls	r2, r3, #4
 8004a34:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8004a38:	0f1b      	lsrs	r3, r3, #28
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8004a40:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8004a44:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004a48:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8004a4c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8004a50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a54:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5c:	ea80 0602 	eor.w	r6, r0, r2
 8004a60:	f8c7 6370 	str.w	r6, [r7, #880]	; 0x370
 8004a64:	404b      	eors	r3, r1
 8004a66:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8004a6a:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8004a6e:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8004a72:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8004a76:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004a7a:	0d9a      	lsrs	r2, r3, #22
 8004a7c:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8004a88:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8004a8c:	0d9a      	lsrs	r2, r3, #22
 8004a8e:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8004a92:	029b      	lsls	r3, r3, #10
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8004a9a:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8004a9e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004aa2:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8004aa6:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8004aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004aae:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	ea80 0602 	eor.w	r6, r0, r2
 8004aba:	f8c7 6360 	str.w	r6, [r7, #864]	; 0x360
 8004abe:	404b      	eors	r3, r1
 8004ac0:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8004ac4:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8004ac8:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8004acc:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8004ad0:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004ad4:	0c5a      	lsrs	r2, r3, #17
 8004ad6:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004ada:	03db      	lsls	r3, r3, #15
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004ae2:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8004ae6:	0c5a      	lsrs	r2, r3, #17
 8004ae8:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8004aec:	03db      	lsls	r3, r3, #15
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004af4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8004af8:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004afc:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8004b00:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b08:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	ea80 0602 	eor.w	r6, r0, r2
 8004b14:	f8c7 6350 	str.w	r6, [r7, #848]	; 0x350
 8004b18:	404b      	eors	r3, r1
 8004b1a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004b1e:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8004b22:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8004b26:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8004b2a:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004b2e:	061a      	lsls	r2, r3, #24
 8004b30:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004b34:	0a1b      	lsrs	r3, r3, #8
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8004b3c:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8004b40:	061a      	lsls	r2, r3, #24
 8004b42:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8004b4e:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8004b52:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004b56:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8004b5a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	43d1      	mvns	r1, r2
 8004b64:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8004b6e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 8004b7a:	4011      	ands	r1, r2
 8004b7c:	f8c7 17f8 	str.w	r1, [r7, #2040]	; 0x7f8
 8004b80:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 8004b84:	400b      	ands	r3, r1
 8004b86:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8004b8a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	; 0x7f8
 8004b96:	4051      	eors	r1, r2
 8004b98:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8004b9c:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	; 0x7fc
 8004ba0:	404b      	eors	r3, r1
 8004ba2:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8004ba6:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8004baa:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8004bae:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8004bb2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	43d1      	mvns	r1, r2
 8004bbc:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8004bc6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	; 0x7f0
 8004bd2:	4011      	ands	r1, r2
 8004bd4:	f8c7 17e8 	str.w	r1, [r7, #2024]	; 0x7e8
 8004bd8:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	; 0x7f4
 8004bdc:	400b      	ands	r3, r1
 8004bde:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8004be2:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 8004bee:	4051      	eors	r1, r2
 8004bf0:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8004bf4:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	; 0x7ec
 8004bf8:	404b      	eors	r3, r1
 8004bfa:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8004bfe:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8004c02:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8004c06:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8004c0a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	43d1      	mvns	r1, r2
 8004c14:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8004c1e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	; 0x7e0
 8004c2a:	4011      	ands	r1, r2
 8004c2c:	f8c7 17d8 	str.w	r1, [r7, #2008]	; 0x7d8
 8004c30:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	; 0x7e4
 8004c34:	400b      	ands	r3, r1
 8004c36:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004c3a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	; 0x7d8
 8004c46:	4051      	eors	r1, r2
 8004c48:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8004c4c:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	; 0x7dc
 8004c50:	404b      	eors	r3, r1
 8004c52:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8004c56:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8004c5a:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8004c5e:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8004c62:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	43d1      	mvns	r1, r2
 8004c6c:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8004c70:	43db      	mvns	r3, r3
 8004c72:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8004c76:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	; 0x7d0
 8004c82:	4011      	ands	r1, r2
 8004c84:	f8c7 17c8 	str.w	r1, [r7, #1992]	; 0x7c8
 8004c88:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8004c92:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	; 0x7c8
 8004c9e:	4051      	eors	r1, r2
 8004ca0:	f8c7 1328 	str.w	r1, [r7, #808]	; 0x328
 8004ca4:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	; 0x7cc
 8004ca8:	404b      	eors	r3, r1
 8004caa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8004cae:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8004cb2:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8004cb6:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8004cba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	43d1      	mvns	r1, r2
 8004cc4:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8004cce:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	; 0x7c0
 8004cda:	4011      	ands	r1, r2
 8004cdc:	f8c7 17b8 	str.w	r1, [r7, #1976]	; 0x7b8
 8004ce0:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	; 0x7c4
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8004cea:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	; 0x7b8
 8004cf6:	4051      	eors	r1, r2
 8004cf8:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8004cfc:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	; 0x7bc
 8004d00:	404b      	eors	r3, r1
 8004d02:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8004d06:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8004d0a:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8004d0e:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8004d12:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8004d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d1a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	ea80 0602 	eor.w	r6, r0, r2
 8004d26:	f8c7 6318 	str.w	r6, [r7, #792]	; 0x318
 8004d2a:	404b      	eors	r3, r1
 8004d2c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8004d30:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8004d34:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8004d38:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8004d3c:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8004d40:	079a      	lsls	r2, r3, #30
 8004d42:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8004d4e:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8004d52:	079a      	lsls	r2, r3, #30
 8004d54:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8004d58:	089b      	lsrs	r3, r3, #2
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8004d60:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8004d64:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8004d68:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8004d6c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8004d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004d74:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	ea80 0602 	eor.w	r6, r0, r2
 8004d80:	f8c7 6308 	str.w	r6, [r7, #776]	; 0x308
 8004d84:	404b      	eors	r3, r1
 8004d86:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8004d8a:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8004d8e:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8004d92:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8004d96:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8004d9a:	05da      	lsls	r2, r3, #23
 8004d9c:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8004da0:	0a5b      	lsrs	r3, r3, #9
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8004da8:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8004dac:	05da      	lsls	r2, r3, #23
 8004dae:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8004db2:	0a5b      	lsrs	r3, r3, #9
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8004dba:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8004dbe:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8004dc2:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8004dc6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dce:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8004dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd6:	ea80 0602 	eor.w	r6, r0, r2
 8004dda:	f8c7 62f8 	str.w	r6, [r7, #760]	; 0x2f8
 8004dde:	404b      	eors	r3, r1
 8004de0:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8004de4:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8004de8:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8004dec:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8004df0:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8004df4:	01da      	lsls	r2, r3, #7
 8004df6:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8004dfa:	0e5b      	lsrs	r3, r3, #25
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8004e02:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8004e06:	01da      	lsls	r2, r3, #7
 8004e08:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8004e0c:	0e5b      	lsrs	r3, r3, #25
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8004e14:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8004e18:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8004e1c:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8004e20:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8004e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e28:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	ea80 0602 	eor.w	r6, r0, r2
 8004e34:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 8004e38:	404b      	eors	r3, r1
 8004e3a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8004e3e:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8004e42:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8004e46:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8004e4a:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8004e4e:	025a      	lsls	r2, r3, #9
 8004e50:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8004e54:	0ddb      	lsrs	r3, r3, #23
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8004e5c:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8004e60:	025a      	lsls	r2, r3, #9
 8004e62:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8004e66:	0ddb      	lsrs	r3, r3, #23
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8004e6e:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8004e72:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8004e76:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8004e7a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8004e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e82:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	ea80 0602 	eor.w	r6, r0, r2
 8004e8e:	f8c7 62d8 	str.w	r6, [r7, #728]	; 0x2d8
 8004e92:	404b      	eors	r3, r1
 8004e94:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8004e98:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8004e9c:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8004ea0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8004ea4:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8004ea8:	0f9a      	lsrs	r2, r3, #30
 8004eaa:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8004eb6:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8004eba:	0f9a      	lsrs	r2, r3, #30
 8004ebc:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8004ec8:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8004ecc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8004ed0:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8004ed4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	43d1      	mvns	r1, r2
 8004ede:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8004ee8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	; 0x7b0
 8004ef4:	4011      	ands	r1, r2
 8004ef6:	f8c7 17a8 	str.w	r1, [r7, #1960]	; 0x7a8
 8004efa:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	; 0x7b4
 8004efe:	400b      	ands	r3, r1
 8004f00:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8004f04:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	; 0x7a8
 8004f10:	4051      	eors	r1, r2
 8004f12:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8004f16:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	; 0x7ac
 8004f1a:	404b      	eors	r3, r1
 8004f1c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8004f20:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8004f24:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8004f28:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8004f2c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	43d1      	mvns	r1, r2
 8004f36:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8004f40:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	; 0x7a0
 8004f4c:	4011      	ands	r1, r2
 8004f4e:	f8c7 1798 	str.w	r1, [r7, #1944]	; 0x798
 8004f52:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	; 0x7a4
 8004f56:	400b      	ands	r3, r1
 8004f58:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 8004f5c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f8d7 1798 	ldr.w	r1, [r7, #1944]	; 0x798
 8004f68:	4051      	eors	r1, r2
 8004f6a:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8004f6e:	f8d7 179c 	ldr.w	r1, [r7, #1948]	; 0x79c
 8004f72:	404b      	eors	r3, r1
 8004f74:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8004f78:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8004f7c:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8004f80:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 8004f84:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	43d1      	mvns	r1, r2
 8004f8e:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 8004f92:	43db      	mvns	r3, r3
 8004f94:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 8004f98:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f8d7 1790 	ldr.w	r1, [r7, #1936]	; 0x790
 8004fa4:	4011      	ands	r1, r2
 8004fa6:	f8c7 1788 	str.w	r1, [r7, #1928]	; 0x788
 8004faa:	f8d7 1794 	ldr.w	r1, [r7, #1940]	; 0x794
 8004fae:	400b      	ands	r3, r1
 8004fb0:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 8004fb4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f8d7 1788 	ldr.w	r1, [r7, #1928]	; 0x788
 8004fc0:	4051      	eors	r1, r2
 8004fc2:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8004fc6:	f8d7 178c 	ldr.w	r1, [r7, #1932]	; 0x78c
 8004fca:	404b      	eors	r3, r1
 8004fcc:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 8004fd0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8004fd4:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8004fd8:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8004fdc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	43d1      	mvns	r1, r2
 8004fe6:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 8004fea:	43db      	mvns	r3, r3
 8004fec:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 8004ff0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f8d7 1780 	ldr.w	r1, [r7, #1920]	; 0x780
 8004ffc:	4011      	ands	r1, r2
 8004ffe:	f8c7 1778 	str.w	r1, [r7, #1912]	; 0x778
 8005002:	f8d7 1784 	ldr.w	r1, [r7, #1924]	; 0x784
 8005006:	400b      	ands	r3, r1
 8005008:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 800500c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f8d7 1778 	ldr.w	r1, [r7, #1912]	; 0x778
 8005018:	4051      	eors	r1, r2
 800501a:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 800501e:	f8d7 177c 	ldr.w	r1, [r7, #1916]	; 0x77c
 8005022:	404b      	eors	r3, r1
 8005024:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8005028:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 800502c:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8005030:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8005034:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	43d1      	mvns	r1, r2
 800503e:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 8005042:	43db      	mvns	r3, r3
 8005044:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 8005048:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f8d7 1770 	ldr.w	r1, [r7, #1904]	; 0x770
 8005054:	4011      	ands	r1, r2
 8005056:	f8c7 1768 	str.w	r1, [r7, #1896]	; 0x768
 800505a:	f8d7 1774 	ldr.w	r1, [r7, #1908]	; 0x774
 800505e:	400b      	ands	r3, r1
 8005060:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 8005064:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f8d7 1768 	ldr.w	r1, [r7, #1896]	; 0x768
 8005070:	4051      	eors	r1, r2
 8005072:	f8c7 12a8 	str.w	r1, [r7, #680]	; 0x2a8
 8005076:	f8d7 176c 	ldr.w	r1, [r7, #1900]	; 0x76c
 800507a:	404b      	eors	r3, r1
 800507c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8005080:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8005084:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8005088:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 800508c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005090:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005094:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	ea80 0602 	eor.w	r6, r0, r2
 80050a0:	f8c7 6760 	str.w	r6, [r7, #1888]	; 0x760
 80050a4:	404b      	eors	r3, r1
 80050a6:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 80050aa:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f8d7 1760 	ldr.w	r1, [r7, #1888]	; 0x760
 80050b6:	4051      	eors	r1, r2
 80050b8:	f8c7 1758 	str.w	r1, [r7, #1880]	; 0x758
 80050bc:	f8d7 1764 	ldr.w	r1, [r7, #1892]	; 0x764
 80050c0:	404b      	eors	r3, r1
 80050c2:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80050c6:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f8d7 1758 	ldr.w	r1, [r7, #1880]	; 0x758
 80050d2:	4051      	eors	r1, r2
 80050d4:	f8c7 1750 	str.w	r1, [r7, #1872]	; 0x750
 80050d8:	f8d7 175c 	ldr.w	r1, [r7, #1884]	; 0x75c
 80050dc:	404b      	eors	r3, r1
 80050de:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 80050e2:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	f8d7 1750 	ldr.w	r1, [r7, #1872]	; 0x750
 80050ee:	4051      	eors	r1, r2
 80050f0:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80050f4:	f8d7 1754 	ldr.w	r1, [r7, #1876]	; 0x754
 80050f8:	404b      	eors	r3, r1
 80050fa:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80050fe:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8005102:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005106:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800510a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800510e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005112:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8005116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511a:	ea80 0602 	eor.w	r6, r0, r2
 800511e:	f8c7 6748 	str.w	r6, [r7, #1864]	; 0x748
 8005122:	404b      	eors	r3, r1
 8005124:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 8005128:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f8d7 1748 	ldr.w	r1, [r7, #1864]	; 0x748
 8005134:	4051      	eors	r1, r2
 8005136:	f8c7 1740 	str.w	r1, [r7, #1856]	; 0x740
 800513a:	f8d7 174c 	ldr.w	r1, [r7, #1868]	; 0x74c
 800513e:	404b      	eors	r3, r1
 8005140:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 8005144:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f8d7 1740 	ldr.w	r1, [r7, #1856]	; 0x740
 8005150:	4051      	eors	r1, r2
 8005152:	f8c7 1738 	str.w	r1, [r7, #1848]	; 0x738
 8005156:	f8d7 1744 	ldr.w	r1, [r7, #1860]	; 0x744
 800515a:	404b      	eors	r3, r1
 800515c:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 8005160:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f8d7 1738 	ldr.w	r1, [r7, #1848]	; 0x738
 800516c:	4051      	eors	r1, r2
 800516e:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8005172:	f8d7 173c 	ldr.w	r1, [r7, #1852]	; 0x73c
 8005176:	404b      	eors	r3, r1
 8005178:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800517c:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8005180:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005184:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8005188:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800518c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005190:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	ea80 0602 	eor.w	r6, r0, r2
 800519c:	f8c7 6730 	str.w	r6, [r7, #1840]	; 0x730
 80051a0:	404b      	eors	r3, r1
 80051a2:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 80051a6:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f8d7 1730 	ldr.w	r1, [r7, #1840]	; 0x730
 80051b2:	4051      	eors	r1, r2
 80051b4:	f8c7 1728 	str.w	r1, [r7, #1832]	; 0x728
 80051b8:	f8d7 1734 	ldr.w	r1, [r7, #1844]	; 0x734
 80051bc:	404b      	eors	r3, r1
 80051be:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 80051c2:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f8d7 1728 	ldr.w	r1, [r7, #1832]	; 0x728
 80051ce:	4051      	eors	r1, r2
 80051d0:	f8c7 1720 	str.w	r1, [r7, #1824]	; 0x720
 80051d4:	f8d7 172c 	ldr.w	r1, [r7, #1836]	; 0x72c
 80051d8:	404b      	eors	r3, r1
 80051da:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 80051de:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f8d7 1720 	ldr.w	r1, [r7, #1824]	; 0x720
 80051ea:	4051      	eors	r1, r2
 80051ec:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 80051f0:	f8d7 1724 	ldr.w	r1, [r7, #1828]	; 0x724
 80051f4:	404b      	eors	r3, r1
 80051f6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80051fa:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80051fe:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005202:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8005206:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800520a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800520e:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8005212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005216:	ea80 0602 	eor.w	r6, r0, r2
 800521a:	f8c7 6718 	str.w	r6, [r7, #1816]	; 0x718
 800521e:	404b      	eors	r3, r1
 8005220:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8005224:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f8d7 1718 	ldr.w	r1, [r7, #1816]	; 0x718
 8005230:	4051      	eors	r1, r2
 8005232:	f8c7 1710 	str.w	r1, [r7, #1808]	; 0x710
 8005236:	f8d7 171c 	ldr.w	r1, [r7, #1820]	; 0x71c
 800523a:	404b      	eors	r3, r1
 800523c:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8005240:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f8d7 1710 	ldr.w	r1, [r7, #1808]	; 0x710
 800524c:	4051      	eors	r1, r2
 800524e:	f8c7 1708 	str.w	r1, [r7, #1800]	; 0x708
 8005252:	f8d7 1714 	ldr.w	r1, [r7, #1812]	; 0x714
 8005256:	404b      	eors	r3, r1
 8005258:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 800525c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f8d7 1708 	ldr.w	r1, [r7, #1800]	; 0x708
 8005268:	4051      	eors	r1, r2
 800526a:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 800526e:	f8d7 170c 	ldr.w	r1, [r7, #1804]	; 0x70c
 8005272:	404b      	eors	r3, r1
 8005274:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8005278:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 800527c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005280:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8005284:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800528c:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005294:	ea80 0602 	eor.w	r6, r0, r2
 8005298:	f8c7 6700 	str.w	r6, [r7, #1792]	; 0x700
 800529c:	404b      	eors	r3, r1
 800529e:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 80052a2:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80052a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052aa:	f8d7 1700 	ldr.w	r1, [r7, #1792]	; 0x700
 80052ae:	4051      	eors	r1, r2
 80052b0:	f8c7 16f8 	str.w	r1, [r7, #1784]	; 0x6f8
 80052b4:	f8d7 1704 	ldr.w	r1, [r7, #1796]	; 0x704
 80052b8:	404b      	eors	r3, r1
 80052ba:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 80052be:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	; 0x6f8
 80052ca:	4051      	eors	r1, r2
 80052cc:	f8c7 16f0 	str.w	r1, [r7, #1776]	; 0x6f0
 80052d0:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 80052d4:	404b      	eors	r3, r1
 80052d6:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80052da:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	; 0x6f0
 80052e6:	4051      	eors	r1, r2
 80052e8:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80052ec:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	; 0x6f4
 80052f0:	404b      	eors	r3, r1
 80052f2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80052f6:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 80052fa:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80052fe:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8005302:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8005306:	0fda      	lsrs	r2, r3, #31
 8005308:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 8005314:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8005318:	0fda      	lsrs	r2, r3, #31
 800531a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8005326:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	; 0x6e8
 8005332:	4051      	eors	r1, r2
 8005334:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8005338:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	; 0x6ec
 800533c:	404b      	eors	r3, r1
 800533e:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8005342:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8005346:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 800534a:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800534e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8005352:	0fda      	lsrs	r2, r3, #31
 8005354:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 8005360:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8005364:	0fda      	lsrs	r2, r3, #31
 8005366:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8005372:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	; 0x6e0
 800537e:	4051      	eors	r1, r2
 8005380:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8005384:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	; 0x6e4
 8005388:	404b      	eors	r3, r1
 800538a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800538e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8005392:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8005396:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 800539a:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 800539e:	0fda      	lsrs	r2, r3, #31
 80053a0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80053ac:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80053b0:	0fda      	lsrs	r2, r3, #31
 80053b2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 80053be:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	; 0x6d8
 80053ca:	4051      	eors	r1, r2
 80053cc:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80053d0:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	; 0x6dc
 80053d4:	404b      	eors	r3, r1
 80053d6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80053da:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80053de:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 80053e2:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 80053e6:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 80053ea:	0fda      	lsrs	r2, r3, #31
 80053ec:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 80053f8:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 80053fc:	0fda      	lsrs	r2, r3, #31
 80053fe:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 800540a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 8005416:	4051      	eors	r1, r2
 8005418:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 800541c:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	; 0x6d4
 8005420:	404b      	eors	r3, r1
 8005422:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8005426:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 800542a:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 800542e:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8005432:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8005436:	0fda      	lsrs	r2, r3, #31
 8005438:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 8005444:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8005448:	0fda      	lsrs	r2, r3, #31
 800544a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 8005456:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	; 0x6c8
 8005462:	4051      	eors	r1, r2
 8005464:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8005468:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	; 0x6cc
 800546c:	404b      	eors	r3, r1
 800546e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8005472:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8005476:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 800547a:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 800547e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005486:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	ea80 0602 	eor.w	r6, r0, r2
 8005492:	f8c7 6250 	str.w	r6, [r7, #592]	; 0x250
 8005496:	404b      	eors	r3, r1
 8005498:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 800549c:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80054a0:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80054a4:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 80054a8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80054b4:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 80054b8:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80054bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054c0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	ea80 0602 	eor.w	r6, r0, r2
 80054cc:	f8c7 6248 	str.w	r6, [r7, #584]	; 0x248
 80054d0:	404b      	eors	r3, r1
 80054d2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80054d6:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 80054da:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80054de:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 80054e2:	f607 2034 	addw	r0, r7, #2612	; 0xa34
 80054e6:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 80054ea:	6803      	ldr	r3, [r0, #0]
 80054ec:	031a      	lsls	r2, r3, #12
 80054ee:	680b      	ldr	r3, [r1, #0]
 80054f0:	0d1b      	lsrs	r3, r3, #20
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80054f8:	680b      	ldr	r3, [r1, #0]
 80054fa:	031a      	lsls	r2, r3, #12
 80054fc:	6803      	ldr	r3, [r0, #0]
 80054fe:	0d1b      	lsrs	r3, r3, #20
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8005506:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800550a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800550e:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8005512:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8005516:	e9d3 0100 	ldrd	r0, r1, [r3]
 800551a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	ea80 0602 	eor.w	r6, r0, r2
 8005526:	f8c7 6238 	str.w	r6, [r7, #568]	; 0x238
 800552a:	404b      	eors	r3, r1
 800552c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8005530:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8005534:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8005538:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 800553c:	f607 2004 	addw	r0, r7, #2564	; 0xa04
 8005540:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 8005544:	6803      	ldr	r3, [r0, #0]
 8005546:	02da      	lsls	r2, r3, #11
 8005548:	680b      	ldr	r3, [r1, #0]
 800554a:	0d5b      	lsrs	r3, r3, #21
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8005552:	680b      	ldr	r3, [r1, #0]
 8005554:	02da      	lsls	r2, r3, #11
 8005556:	6803      	ldr	r3, [r0, #0]
 8005558:	0d5b      	lsrs	r3, r3, #21
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8005560:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 8005564:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005568:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 800556c:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8005570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005574:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	ea80 0602 	eor.w	r6, r0, r2
 8005580:	f8c7 6228 	str.w	r6, [r7, #552]	; 0x228
 8005584:	404b      	eors	r3, r1
 8005586:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 800558a:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 800558e:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8005592:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 8005596:	f507 601d 	add.w	r0, r7, #2512	; 0x9d0
 800559a:	f607 11d4 	addw	r1, r7, #2516	; 0x9d4
 800559e:	6803      	ldr	r3, [r0, #0]
 80055a0:	0ada      	lsrs	r2, r3, #11
 80055a2:	680b      	ldr	r3, [r1, #0]
 80055a4:	055b      	lsls	r3, r3, #21
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	0ada      	lsrs	r2, r3, #11
 80055b0:	6803      	ldr	r3, [r0, #0]
 80055b2:	055b      	lsls	r3, r3, #21
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80055ba:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 80055be:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80055c2:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 80055c6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80055ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ce:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	ea80 0602 	eor.w	r6, r0, r2
 80055da:	f8c7 6218 	str.w	r6, [r7, #536]	; 0x218
 80055de:	404b      	eors	r3, r1
 80055e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80055e4:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 80055e8:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 80055ec:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 80055f0:	f507 601a 	add.w	r0, r7, #2464	; 0x9a0
 80055f4:	f607 11a4 	addw	r1, r7, #2468	; 0x9a4
 80055f8:	6803      	ldr	r3, [r0, #0]
 80055fa:	0c9a      	lsrs	r2, r3, #18
 80055fc:	680b      	ldr	r3, [r1, #0]
 80055fe:	039b      	lsls	r3, r3, #14
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005606:	680b      	ldr	r3, [r1, #0]
 8005608:	0c9a      	lsrs	r2, r3, #18
 800560a:	6803      	ldr	r3, [r0, #0]
 800560c:	039b      	lsls	r3, r3, #14
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005614:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8005618:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800561c:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 8005620:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	43d1      	mvns	r1, r2
 800562a:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 800562e:	43db      	mvns	r3, r3
 8005630:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 8005634:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	; 0x6c0
 8005640:	4011      	ands	r1, r2
 8005642:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 8005646:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	; 0x6c4
 800564a:	400b      	ands	r3, r1
 800564c:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 8005650:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	; 0x6b8
 800565c:	4051      	eors	r1, r2
 800565e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8005662:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	; 0x6bc
 8005666:	404b      	eors	r3, r1
 8005668:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800566c:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 8005670:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8005674:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8005678:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800567c:	3301      	adds	r3, #1
 800567e:	4af3      	ldr	r2, [pc, #972]	; (8005a4c <KeccakF1600_StatePermute+0x21b0>)
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005688:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	ea82 0600 	eor.w	r6, r2, r0
 8005694:	f8c7 6200 	str.w	r6, [r7, #512]	; 0x200
 8005698:	404b      	eors	r3, r1
 800569a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800569e:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80056a2:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80056a6:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 80056aa:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	43d1      	mvns	r1, r2
 80056b4:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 80056b8:	43db      	mvns	r3, r3
 80056ba:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 80056be:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	; 0x6b0
 80056ca:	4011      	ands	r1, r2
 80056cc:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 80056d0:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	; 0x6b4
 80056d4:	400b      	ands	r3, r1
 80056d6:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 80056da:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	; 0x6a8
 80056e6:	4051      	eors	r1, r2
 80056e8:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80056ec:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	; 0x6ac
 80056f0:	404b      	eors	r3, r1
 80056f2:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80056f6:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 80056fa:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80056fe:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8005702:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	43d1      	mvns	r1, r2
 800570c:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 8005710:	43db      	mvns	r3, r3
 8005712:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8005716:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	; 0x6a0
 8005722:	4011      	ands	r1, r2
 8005724:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 8005728:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	; 0x6a4
 800572c:	400b      	ands	r3, r1
 800572e:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8005732:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f8d7 1698 	ldr.w	r1, [r7, #1688]	; 0x698
 800573e:	4051      	eors	r1, r2
 8005740:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8005744:	f8d7 169c 	ldr.w	r1, [r7, #1692]	; 0x69c
 8005748:	404b      	eors	r3, r1
 800574a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800574e:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005752:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8005756:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 800575a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	43d1      	mvns	r1, r2
 8005764:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 8005768:	43db      	mvns	r3, r3
 800576a:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 800576e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f8d7 1690 	ldr.w	r1, [r7, #1680]	; 0x690
 800577a:	4011      	ands	r1, r2
 800577c:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 8005780:	f8d7 1694 	ldr.w	r1, [r7, #1684]	; 0x694
 8005784:	400b      	ands	r3, r1
 8005786:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 800578a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f8d7 1688 	ldr.w	r1, [r7, #1672]	; 0x688
 8005796:	4051      	eors	r1, r2
 8005798:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 800579c:	f8d7 168c 	ldr.w	r1, [r7, #1676]	; 0x68c
 80057a0:	404b      	eors	r3, r1
 80057a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80057a6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80057aa:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80057ae:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 80057b2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	43d1      	mvns	r1, r2
 80057bc:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 80057c0:	43db      	mvns	r3, r3
 80057c2:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 80057c6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f8d7 1680 	ldr.w	r1, [r7, #1664]	; 0x680
 80057d2:	4011      	ands	r1, r2
 80057d4:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 80057d8:	f8d7 1684 	ldr.w	r1, [r7, #1668]	; 0x684
 80057dc:	400b      	ands	r3, r1
 80057de:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 80057e2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f8d7 1678 	ldr.w	r1, [r7, #1656]	; 0x678
 80057ee:	4051      	eors	r1, r2
 80057f0:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 80057f4:	f8d7 167c 	ldr.w	r1, [r7, #1660]	; 0x67c
 80057f8:	404b      	eors	r3, r1
 80057fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80057fe:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8005802:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8005806:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 800580a:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 800580e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005812:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	ea80 0602 	eor.w	r6, r0, r2
 800581e:	f8c7 61d8 	str.w	r6, [r7, #472]	; 0x1d8
 8005822:	404b      	eors	r3, r1
 8005824:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005828:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800582c:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 8005830:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8005834:	f607 2048 	addw	r0, r7, #2632	; 0xa48
 8005838:	f607 214c 	addw	r1, r7, #2636	; 0xa4c
 800583c:	6803      	ldr	r3, [r0, #0]
 800583e:	091a      	lsrs	r2, r3, #4
 8005840:	680b      	ldr	r3, [r1, #0]
 8005842:	071b      	lsls	r3, r3, #28
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800584a:	680b      	ldr	r3, [r1, #0]
 800584c:	091a      	lsrs	r2, r3, #4
 800584e:	6803      	ldr	r3, [r0, #0]
 8005850:	071b      	lsls	r3, r3, #28
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005858:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800585c:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005860:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8005864:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8005868:	e9d3 0100 	ldrd	r0, r1, [r3]
 800586c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	ea80 0602 	eor.w	r6, r0, r2
 8005878:	f8c7 61c8 	str.w	r6, [r7, #456]	; 0x1c8
 800587c:	404b      	eors	r3, r1
 800587e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8005882:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8005886:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 800588a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 800588e:	f607 2018 	addw	r0, r7, #2584	; 0xa18
 8005892:	f607 211c 	addw	r1, r7, #2588	; 0xa1c
 8005896:	6803      	ldr	r3, [r0, #0]
 8005898:	0b1a      	lsrs	r2, r3, #12
 800589a:	680b      	ldr	r3, [r1, #0]
 800589c:	051b      	lsls	r3, r3, #20
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80058a4:	680b      	ldr	r3, [r1, #0]
 80058a6:	0b1a      	lsrs	r2, r3, #12
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	051b      	lsls	r3, r3, #20
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80058b2:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80058b6:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80058ba:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 80058be:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80058c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80058c6:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	ea80 0602 	eor.w	r6, r0, r2
 80058d2:	f8c7 61b8 	str.w	r6, [r7, #440]	; 0x1b8
 80058d6:	404b      	eors	r3, r1
 80058d8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80058dc:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 80058e0:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 80058e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 80058e8:	f507 6021 	add.w	r0, r7, #2576	; 0xa10
 80058ec:	f607 2114 	addw	r1, r7, #2580	; 0xa14
 80058f0:	6803      	ldr	r3, [r0, #0]
 80058f2:	0f5a      	lsrs	r2, r3, #29
 80058f4:	680b      	ldr	r3, [r1, #0]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	0f5a      	lsrs	r2, r3, #29
 8005902:	6803      	ldr	r3, [r0, #0]
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800590c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8005910:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005914:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8005918:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800591c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005920:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005928:	ea80 0602 	eor.w	r6, r0, r2
 800592c:	f8c7 61a8 	str.w	r6, [r7, #424]	; 0x1a8
 8005930:	404b      	eors	r3, r1
 8005932:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005936:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 800593a:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800593e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8005942:	f607 10e4 	addw	r0, r7, #2532	; 0x9e4
 8005946:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 800594a:	6803      	ldr	r3, [r0, #0]
 800594c:	035a      	lsls	r2, r3, #13
 800594e:	680b      	ldr	r3, [r1, #0]
 8005950:	0cdb      	lsrs	r3, r3, #19
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005958:	680b      	ldr	r3, [r1, #0]
 800595a:	035a      	lsls	r2, r3, #13
 800595c:	6803      	ldr	r3, [r0, #0]
 800595e:	0cdb      	lsrs	r3, r3, #19
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005966:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800596a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800596e:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8005972:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8005976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800597a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	ea80 0602 	eor.w	r6, r0, r2
 8005986:	f8c7 6198 	str.w	r6, [r7, #408]	; 0x198
 800598a:	404b      	eors	r3, r1
 800598c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005990:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8005994:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8005998:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 800599c:	f607 10b4 	addw	r0, r7, #2484	; 0x9b4
 80059a0:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 80059a4:	6803      	ldr	r3, [r0, #0]
 80059a6:	075a      	lsls	r2, r3, #29
 80059a8:	680b      	ldr	r3, [r1, #0]
 80059aa:	08db      	lsrs	r3, r3, #3
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80059b2:	680b      	ldr	r3, [r1, #0]
 80059b4:	075a      	lsls	r2, r3, #29
 80059b6:	6803      	ldr	r3, [r0, #0]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80059c0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80059c4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80059c8:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 80059cc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	43d1      	mvns	r1, r2
 80059d6:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 80059da:	43db      	mvns	r3, r3
 80059dc:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 80059e0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f8d7 1670 	ldr.w	r1, [r7, #1648]	; 0x670
 80059ec:	4011      	ands	r1, r2
 80059ee:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 80059f2:	f8d7 1674 	ldr.w	r1, [r7, #1652]	; 0x674
 80059f6:	400b      	ands	r3, r1
 80059f8:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 80059fc:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f8d7 1668 	ldr.w	r1, [r7, #1640]	; 0x668
 8005a08:	4051      	eors	r1, r2
 8005a0a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8005a0e:	f8d7 166c 	ldr.w	r1, [r7, #1644]	; 0x66c
 8005a12:	404b      	eors	r3, r1
 8005a14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8005a18:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8005a1c:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8005a20:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8005a24:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2c:	43d1      	mvns	r1, r2
 8005a2e:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8005a32:	43db      	mvns	r3, r3
 8005a34:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8005a38:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a40:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
 8005a44:	4011      	ands	r1, r2
 8005a46:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 8005a4a:	e001      	b.n	8005a50 <KeccakF1600_StatePermute+0x21b4>
 8005a4c:	0800b350 	.word	0x0800b350
 8005a50:	f8d7 1664 	ldr.w	r1, [r7, #1636]	; 0x664
 8005a54:	400b      	ands	r3, r1
 8005a56:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8005a5a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8005a66:	4051      	eors	r1, r2
 8005a68:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8005a6c:	f8d7 165c 	ldr.w	r1, [r7, #1628]	; 0x65c
 8005a70:	404b      	eors	r3, r1
 8005a72:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005a76:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005a7a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8005a7e:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8005a82:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	43d1      	mvns	r1, r2
 8005a8c:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8005a90:	43db      	mvns	r3, r3
 8005a92:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8005a96:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 8005aa2:	4011      	ands	r1, r2
 8005aa4:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 8005aa8:	f8d7 1654 	ldr.w	r1, [r7, #1620]	; 0x654
 8005aac:	400b      	ands	r3, r1
 8005aae:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8005ab2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f8d7 1648 	ldr.w	r1, [r7, #1608]	; 0x648
 8005abe:	4051      	eors	r1, r2
 8005ac0:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8005ac4:	f8d7 164c 	ldr.w	r1, [r7, #1612]	; 0x64c
 8005ac8:	404b      	eors	r3, r1
 8005aca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005ace:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005ad2:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8005ad6:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8005ada:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	43d1      	mvns	r1, r2
 8005ae4:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8005aee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f8d7 1640 	ldr.w	r1, [r7, #1600]	; 0x640
 8005afa:	4011      	ands	r1, r2
 8005afc:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 8005b00:	f8d7 1644 	ldr.w	r1, [r7, #1604]	; 0x644
 8005b04:	400b      	ands	r3, r1
 8005b06:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8005b0a:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	f8d7 1638 	ldr.w	r1, [r7, #1592]	; 0x638
 8005b16:	4051      	eors	r1, r2
 8005b18:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8005b1c:	f8d7 163c 	ldr.w	r1, [r7, #1596]	; 0x63c
 8005b20:	404b      	eors	r3, r1
 8005b22:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005b26:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8005b2a:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8005b2e:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8005b32:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	43d1      	mvns	r1, r2
 8005b3c:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8005b40:	43db      	mvns	r3, r3
 8005b42:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8005b46:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f8d7 1630 	ldr.w	r1, [r7, #1584]	; 0x630
 8005b52:	4011      	ands	r1, r2
 8005b54:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 8005b58:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8005b5c:	400b      	ands	r3, r1
 8005b5e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8005b62:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f8d7 1628 	ldr.w	r1, [r7, #1576]	; 0x628
 8005b6e:	4051      	eors	r1, r2
 8005b70:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8005b74:	f8d7 162c 	ldr.w	r1, [r7, #1580]	; 0x62c
 8005b78:	404b      	eors	r3, r1
 8005b7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b7e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8005b82:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8005b86:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8005b8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8005b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b92:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	ea80 0602 	eor.w	r6, r0, r2
 8005b9e:	f8c7 6160 	str.w	r6, [r7, #352]	; 0x160
 8005ba2:	404b      	eors	r3, r1
 8005ba4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005ba8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005bac:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8005bb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8005bb4:	f607 2058 	addw	r0, r7, #2648	; 0xa58
 8005bb8:	f607 215c 	addw	r1, r7, #2652	; 0xa5c
 8005bbc:	6803      	ldr	r3, [r0, #0]
 8005bbe:	0fda      	lsrs	r2, r3, #31
 8005bc0:	680b      	ldr	r3, [r1, #0]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005bca:	680b      	ldr	r3, [r1, #0]
 8005bcc:	0fda      	lsrs	r2, r3, #31
 8005bce:	6803      	ldr	r3, [r0, #0]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005bd8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8005bdc:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005be0:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8005be4:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8005be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bec:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	ea80 0602 	eor.w	r6, r0, r2
 8005bf8:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 8005bfc:	404b      	eors	r3, r1
 8005bfe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005c02:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8005c06:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8005c0a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8005c0e:	f607 2028 	addw	r0, r7, #2600	; 0xa28
 8005c12:	f607 212c 	addw	r1, r7, #2604	; 0xa2c
 8005c16:	6803      	ldr	r3, [r0, #0]
 8005c18:	0e9a      	lsrs	r2, r3, #26
 8005c1a:	680b      	ldr	r3, [r1, #0]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005c24:	680b      	ldr	r3, [r1, #0]
 8005c26:	0e9a      	lsrs	r2, r3, #26
 8005c28:	6803      	ldr	r3, [r0, #0]
 8005c2a:	019b      	lsls	r3, r3, #6
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005c32:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8005c36:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005c3a:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8005c3e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8005c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c46:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	ea80 0602 	eor.w	r6, r0, r2
 8005c52:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 8005c56:	404b      	eors	r3, r1
 8005c58:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8005c5c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005c60:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8005c64:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8005c68:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 8005c6c:	f607 11fc 	addw	r1, r7, #2556	; 0x9fc
 8005c70:	6803      	ldr	r3, [r0, #0]
 8005c72:	09da      	lsrs	r2, r3, #7
 8005c74:	680b      	ldr	r3, [r1, #0]
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8005c7e:	680b      	ldr	r3, [r1, #0]
 8005c80:	09da      	lsrs	r2, r3, #7
 8005c82:	6803      	ldr	r3, [r0, #0]
 8005c84:	065b      	lsls	r3, r3, #25
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8005c8c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c90:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8005c94:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8005c98:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8005c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ca0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	ea80 0602 	eor.w	r6, r0, r2
 8005cac:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 8005cb0:	404b      	eors	r3, r1
 8005cb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005cb6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005cba:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8005cbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8005cc2:	f607 10c8 	addw	r0, r7, #2504	; 0x9c8
 8005cc6:	f607 11cc 	addw	r1, r7, #2508	; 0x9cc
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	0e1a      	lsrs	r2, r3, #24
 8005cce:	680b      	ldr	r3, [r1, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005cd8:	680b      	ldr	r3, [r1, #0]
 8005cda:	0e1a      	lsrs	r2, r3, #24
 8005cdc:	6803      	ldr	r3, [r0, #0]
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ce6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005cea:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8005cee:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8005cf2:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8005cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cfa:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	ea80 0602 	eor.w	r6, r0, r2
 8005d06:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 8005d0a:	404b      	eors	r3, r1
 8005d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d10:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8005d14:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8005d18:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8005d1c:	f507 601c 	add.w	r0, r7, #2496	; 0x9c0
 8005d20:	f607 11c4 	addw	r1, r7, #2500	; 0x9c4
 8005d24:	6803      	ldr	r3, [r0, #0]
 8005d26:	0b9a      	lsrs	r2, r3, #14
 8005d28:	680b      	ldr	r3, [r1, #0]
 8005d2a:	049b      	lsls	r3, r3, #18
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d32:	680b      	ldr	r3, [r1, #0]
 8005d34:	0b9a      	lsrs	r2, r3, #14
 8005d36:	6803      	ldr	r3, [r0, #0]
 8005d38:	049b      	lsls	r3, r3, #18
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d40:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8005d44:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8005d48:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8005d4c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	43d1      	mvns	r1, r2
 8005d56:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8005d60:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f8d7 1620 	ldr.w	r1, [r7, #1568]	; 0x620
 8005d6c:	4011      	ands	r1, r2
 8005d6e:	f8c7 1618 	str.w	r1, [r7, #1560]	; 0x618
 8005d72:	f8d7 1624 	ldr.w	r1, [r7, #1572]	; 0x624
 8005d76:	400b      	ands	r3, r1
 8005d78:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8005d7c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f8d7 1618 	ldr.w	r1, [r7, #1560]	; 0x618
 8005d88:	4051      	eors	r1, r2
 8005d8a:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8005d8e:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 8005d92:	404b      	eors	r3, r1
 8005d94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d98:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8005d9c:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8005da0:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8005da4:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	43d1      	mvns	r1, r2
 8005dae:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8005db2:	43db      	mvns	r3, r3
 8005db4:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8005db8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f8d7 1610 	ldr.w	r1, [r7, #1552]	; 0x610
 8005dc4:	4011      	ands	r1, r2
 8005dc6:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8005dca:	f8d7 1614 	ldr.w	r1, [r7, #1556]	; 0x614
 8005dce:	400b      	ands	r3, r1
 8005dd0:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8005dd4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f8d7 1608 	ldr.w	r1, [r7, #1544]	; 0x608
 8005de0:	4051      	eors	r1, r2
 8005de2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005de6:	f8d7 160c 	ldr.w	r1, [r7, #1548]	; 0x60c
 8005dea:	404b      	eors	r3, r1
 8005dec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005df0:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8005df4:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8005df8:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8005dfc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	43d1      	mvns	r1, r2
 8005e06:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 8005e10:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f8d7 1600 	ldr.w	r1, [r7, #1536]	; 0x600
 8005e1c:	4011      	ands	r1, r2
 8005e1e:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 8005e22:	f8d7 1604 	ldr.w	r1, [r7, #1540]	; 0x604
 8005e26:	400b      	ands	r3, r1
 8005e28:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8005e2c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	; 0x5f8
 8005e38:	4051      	eors	r1, r2
 8005e3a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8005e3e:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	; 0x5fc
 8005e42:	404b      	eors	r3, r1
 8005e44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e48:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8005e4c:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8005e50:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8005e54:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	43d1      	mvns	r1, r2
 8005e5e:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 8005e62:	43db      	mvns	r3, r3
 8005e64:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 8005e68:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	; 0x5f0
 8005e74:	4011      	ands	r1, r2
 8005e76:	f8c7 15e8 	str.w	r1, [r7, #1512]	; 0x5e8
 8005e7a:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	; 0x5f4
 8005e7e:	400b      	ands	r3, r1
 8005e80:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 8005e84:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	; 0x5e8
 8005e90:	4051      	eors	r1, r2
 8005e92:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005e96:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	; 0x5ec
 8005e9a:	404b      	eors	r3, r1
 8005e9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ea0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8005ea4:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8005ea8:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8005eac:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	43d1      	mvns	r1, r2
 8005eb6:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 8005ec0:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	; 0x5e0
 8005ecc:	4011      	ands	r1, r2
 8005ece:	f8c7 15d8 	str.w	r1, [r7, #1496]	; 0x5d8
 8005ed2:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	; 0x5e4
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8005edc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	; 0x5d8
 8005ee8:	4051      	eors	r1, r2
 8005eea:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005eee:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	; 0x5dc
 8005ef2:	404b      	eors	r3, r1
 8005ef4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ef8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8005efc:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8005f00:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8005f04:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8005f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f0c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	ea80 0602 	eor.w	r6, r0, r2
 8005f18:	f8c7 60e8 	str.w	r6, [r7, #232]	; 0xe8
 8005f1c:	404b      	eors	r3, r1
 8005f1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f22:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8005f26:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8005f2a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8005f2e:	f507 6024 	add.w	r0, r7, #2624	; 0xa40
 8005f32:	f607 2144 	addw	r1, r7, #2628	; 0xa44
 8005f36:	6803      	ldr	r3, [r0, #0]
 8005f38:	095a      	lsrs	r2, r3, #5
 8005f3a:	680b      	ldr	r3, [r1, #0]
 8005f3c:	06db      	lsls	r3, r3, #27
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f44:	680b      	ldr	r3, [r1, #0]
 8005f46:	095a      	lsrs	r2, r3, #5
 8005f48:	6803      	ldr	r3, [r0, #0]
 8005f4a:	06db      	lsls	r3, r3, #27
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f52:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8005f56:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8005f5a:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8005f5e:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8005f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f66:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	ea80 0602 	eor.w	r6, r0, r2
 8005f72:	f8c7 60d8 	str.w	r6, [r7, #216]	; 0xd8
 8005f76:	404b      	eors	r3, r1
 8005f78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f7c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8005f80:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8005f84:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8005f88:	f607 203c 	addw	r0, r7, #2620	; 0xa3c
 8005f8c:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 8005f90:	6803      	ldr	r3, [r0, #0]
 8005f92:	011a      	lsls	r2, r3, #4
 8005f94:	680b      	ldr	r3, [r1, #0]
 8005f96:	0f1b      	lsrs	r3, r3, #28
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f9e:	680b      	ldr	r3, [r1, #0]
 8005fa0:	011a      	lsls	r2, r3, #4
 8005fa2:	6803      	ldr	r3, [r0, #0]
 8005fa4:	0f1b      	lsrs	r3, r3, #28
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8005fb0:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8005fb4:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8005fb8:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8005fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fc0:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	ea80 0602 	eor.w	r6, r0, r2
 8005fcc:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 8005fd0:	404b      	eors	r3, r1
 8005fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fd6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005fda:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8005fde:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8005fe2:	f607 2008 	addw	r0, r7, #2568	; 0xa08
 8005fe6:	f607 210c 	addw	r1, r7, #2572	; 0xa0c
 8005fea:	6803      	ldr	r3, [r0, #0]
 8005fec:	0d9a      	lsrs	r2, r3, #22
 8005fee:	680b      	ldr	r3, [r1, #0]
 8005ff0:	029b      	lsls	r3, r3, #10
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff8:	680b      	ldr	r3, [r1, #0]
 8005ffa:	0d9a      	lsrs	r2, r3, #22
 8005ffc:	6803      	ldr	r3, [r0, #0]
 8005ffe:	029b      	lsls	r3, r3, #10
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006006:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800600a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800600e:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8006012:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8006016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800601a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006022:	ea80 0602 	eor.w	r6, r0, r2
 8006026:	f8c7 60b8 	str.w	r6, [r7, #184]	; 0xb8
 800602a:	404b      	eors	r3, r1
 800602c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006030:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8006034:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8006038:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 800603c:	f607 10d8 	addw	r0, r7, #2520	; 0x9d8
 8006040:	f607 11dc 	addw	r1, r7, #2524	; 0x9dc
 8006044:	6803      	ldr	r3, [r0, #0]
 8006046:	0c5a      	lsrs	r2, r3, #17
 8006048:	680b      	ldr	r3, [r1, #0]
 800604a:	03db      	lsls	r3, r3, #15
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006052:	680b      	ldr	r3, [r1, #0]
 8006054:	0c5a      	lsrs	r2, r3, #17
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	03db      	lsls	r3, r3, #15
 800605a:	4313      	orrs	r3, r2
 800605c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006060:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006064:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8006068:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 800606c:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8006070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006074:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	ea80 0602 	eor.w	r6, r0, r2
 8006080:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 8006084:	404b      	eors	r3, r1
 8006086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800608a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800608e:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8006092:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8006096:	f607 10ac 	addw	r0, r7, #2476	; 0x9ac
 800609a:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 800609e:	6803      	ldr	r3, [r0, #0]
 80060a0:	061a      	lsls	r2, r3, #24
 80060a2:	680b      	ldr	r3, [r1, #0]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ac:	680b      	ldr	r3, [r1, #0]
 80060ae:	061a      	lsls	r2, r3, #24
 80060b0:	6803      	ldr	r3, [r0, #0]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060ba:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80060be:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80060c2:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 80060c6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	43d1      	mvns	r1, r2
 80060d0:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 80060d4:	43db      	mvns	r3, r3
 80060d6:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80060da:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	; 0x5d0
 80060e6:	4011      	ands	r1, r2
 80060e8:	f8c7 15c8 	str.w	r1, [r7, #1480]	; 0x5c8
 80060ec:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	; 0x5d4
 80060f0:	400b      	ands	r3, r1
 80060f2:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80060f6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80060fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fe:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	; 0x5c8
 8006102:	4051      	eors	r1, r2
 8006104:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8006108:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	; 0x5cc
 800610c:	404b      	eors	r3, r1
 800610e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006112:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006116:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800611a:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 800611e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	43d1      	mvns	r1, r2
 8006128:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 800612c:	43db      	mvns	r3, r3
 800612e:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8006132:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	; 0x5c0
 800613e:	4011      	ands	r1, r2
 8006140:	f8c7 15b8 	str.w	r1, [r7, #1464]	; 0x5b8
 8006144:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	; 0x5c4
 8006148:	400b      	ands	r3, r1
 800614a:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 800614e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006156:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	; 0x5b8
 800615a:	4051      	eors	r1, r2
 800615c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8006160:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	; 0x5bc
 8006164:	404b      	eors	r3, r1
 8006166:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800616a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800616e:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 8006172:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8006176:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	43d1      	mvns	r1, r2
 8006180:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 8006184:	43db      	mvns	r3, r3
 8006186:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 800618a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	; 0x5b0
 8006196:	4011      	ands	r1, r2
 8006198:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 800619c:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	; 0x5b4
 80061a0:	400b      	ands	r3, r1
 80061a2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80061a6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	; 0x5a8
 80061b2:	4051      	eors	r1, r2
 80061b4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80061b8:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	; 0x5ac
 80061bc:	404b      	eors	r3, r1
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80061c6:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 80061ca:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80061ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	43d1      	mvns	r1, r2
 80061d8:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 80061dc:	43db      	mvns	r3, r3
 80061de:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 80061e2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	; 0x5a0
 80061ee:	4011      	ands	r1, r2
 80061f0:	f8c7 1598 	str.w	r1, [r7, #1432]	; 0x598
 80061f4:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	; 0x5a4
 80061f8:	400b      	ands	r3, r1
 80061fa:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80061fe:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006206:	f8d7 1598 	ldr.w	r1, [r7, #1432]	; 0x598
 800620a:	4051      	eors	r1, r2
 800620c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006210:	f8d7 159c 	ldr.w	r1, [r7, #1436]	; 0x59c
 8006214:	404b      	eors	r3, r1
 8006216:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800621a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800621e:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8006222:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8006226:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	43d1      	mvns	r1, r2
 8006230:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8006234:	43db      	mvns	r3, r3
 8006236:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 800623a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	f8d7 1590 	ldr.w	r1, [r7, #1424]	; 0x590
 8006246:	4011      	ands	r1, r2
 8006248:	f8c7 1588 	str.w	r1, [r7, #1416]	; 0x588
 800624c:	f8d7 1594 	ldr.w	r1, [r7, #1428]	; 0x594
 8006250:	400b      	ands	r3, r1
 8006252:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8006256:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f8d7 1588 	ldr.w	r1, [r7, #1416]	; 0x588
 8006262:	4051      	eors	r1, r2
 8006264:	67b9      	str	r1, [r7, #120]	; 0x78
 8006266:	f8d7 158c 	ldr.w	r1, [r7, #1420]	; 0x58c
 800626a:	404b      	eors	r3, r1
 800626c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800626e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006272:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8006276:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 800627a:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800627e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006282:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	ea80 0602 	eor.w	r6, r0, r2
 800628e:	673e      	str	r6, [r7, #112]	; 0x70
 8006290:	404b      	eors	r3, r1
 8006292:	677b      	str	r3, [r7, #116]	; 0x74
 8006294:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006298:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 800629c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80062a0:	f607 2054 	addw	r0, r7, #2644	; 0xa54
 80062a4:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80062a8:	6803      	ldr	r3, [r0, #0]
 80062aa:	079a      	lsls	r2, r3, #30
 80062ac:	680b      	ldr	r3, [r1, #0]
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	4313      	orrs	r3, r2
 80062b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062b4:	680b      	ldr	r3, [r1, #0]
 80062b6:	079a      	lsls	r2, r3, #30
 80062b8:	6803      	ldr	r3, [r0, #0]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	4313      	orrs	r3, r2
 80062be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80062c4:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80062c8:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80062cc:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80062d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80062d4:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80062d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062dc:	ea80 0602 	eor.w	r6, r0, r2
 80062e0:	663e      	str	r6, [r7, #96]	; 0x60
 80062e2:	404b      	eors	r3, r1
 80062e4:	667b      	str	r3, [r7, #100]	; 0x64
 80062e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80062ea:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80062ee:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80062f2:	f607 2024 	addw	r0, r7, #2596	; 0xa24
 80062f6:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 80062fa:	6803      	ldr	r3, [r0, #0]
 80062fc:	05da      	lsls	r2, r3, #23
 80062fe:	680b      	ldr	r3, [r1, #0]
 8006300:	0a5b      	lsrs	r3, r3, #9
 8006302:	4313      	orrs	r3, r2
 8006304:	65bb      	str	r3, [r7, #88]	; 0x58
 8006306:	680b      	ldr	r3, [r1, #0]
 8006308:	05da      	lsls	r2, r3, #23
 800630a:	6803      	ldr	r3, [r0, #0]
 800630c:	0a5b      	lsrs	r3, r3, #9
 800630e:	4313      	orrs	r3, r2
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006316:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 800631a:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 800631e:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006326:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	ea80 0602 	eor.w	r6, r0, r2
 8006332:	653e      	str	r6, [r7, #80]	; 0x50
 8006334:	404b      	eors	r3, r1
 8006336:	657b      	str	r3, [r7, #84]	; 0x54
 8006338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800633c:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8006340:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 8006344:	f607 10f4 	addw	r0, r7, #2548	; 0x9f4
 8006348:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	01da      	lsls	r2, r3, #7
 8006350:	680b      	ldr	r3, [r1, #0]
 8006352:	0e5b      	lsrs	r3, r3, #25
 8006354:	4313      	orrs	r3, r2
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
 8006358:	680b      	ldr	r3, [r1, #0]
 800635a:	01da      	lsls	r2, r3, #7
 800635c:	6803      	ldr	r3, [r0, #0]
 800635e:	0e5b      	lsrs	r3, r3, #25
 8006360:	4313      	orrs	r3, r2
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006368:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800636c:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 8006370:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8006374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006378:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	ea80 0602 	eor.w	r6, r0, r2
 8006384:	643e      	str	r6, [r7, #64]	; 0x40
 8006386:	404b      	eors	r3, r1
 8006388:	647b      	str	r3, [r7, #68]	; 0x44
 800638a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800638e:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8006392:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 8006396:	f607 10ec 	addw	r0, r7, #2540	; 0x9ec
 800639a:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 800639e:	6803      	ldr	r3, [r0, #0]
 80063a0:	025a      	lsls	r2, r3, #9
 80063a2:	680b      	ldr	r3, [r1, #0]
 80063a4:	0ddb      	lsrs	r3, r3, #23
 80063a6:	4313      	orrs	r3, r2
 80063a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80063aa:	680b      	ldr	r3, [r1, #0]
 80063ac:	025a      	lsls	r2, r3, #9
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	0ddb      	lsrs	r3, r3, #23
 80063b2:	4313      	orrs	r3, r2
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063ba:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80063be:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80063c2:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 80063c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063ca:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	ea80 0602 	eor.w	r6, r0, r2
 80063d6:	633e      	str	r6, [r7, #48]	; 0x30
 80063d8:	404b      	eors	r3, r1
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
 80063dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063e0:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 80063e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 80063e8:	f607 10b8 	addw	r0, r7, #2488	; 0x9b8
 80063ec:	f607 11bc 	addw	r1, r7, #2492	; 0x9bc
 80063f0:	6803      	ldr	r3, [r0, #0]
 80063f2:	0f9a      	lsrs	r2, r3, #30
 80063f4:	680b      	ldr	r3, [r1, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4313      	orrs	r3, r2
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fc:	680b      	ldr	r3, [r1, #0]
 80063fe:	0f9a      	lsrs	r2, r3, #30
 8006400:	6803      	ldr	r3, [r0, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4313      	orrs	r3, r2
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
 8006408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800640c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8006410:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8006414:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	43d1      	mvns	r1, r2
 800641e:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 8006422:	43db      	mvns	r3, r3
 8006424:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8006428:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f8d7 1580 	ldr.w	r1, [r7, #1408]	; 0x580
 8006434:	4011      	ands	r1, r2
 8006436:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 800643a:	f8d7 1584 	ldr.w	r1, [r7, #1412]	; 0x584
 800643e:	400b      	ands	r3, r1
 8006440:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8006444:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f8d7 1578 	ldr.w	r1, [r7, #1400]	; 0x578
 8006450:	4051      	eors	r1, r2
 8006452:	6239      	str	r1, [r7, #32]
 8006454:	f8d7 157c 	ldr.w	r1, [r7, #1404]	; 0x57c
 8006458:	404b      	eors	r3, r1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006460:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8006464:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 8006468:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	43d1      	mvns	r1, r2
 8006472:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8006476:	43db      	mvns	r3, r3
 8006478:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800647c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f8d7 1570 	ldr.w	r1, [r7, #1392]	; 0x570
 8006488:	4011      	ands	r1, r2
 800648a:	f8c7 1568 	str.w	r1, [r7, #1384]	; 0x568
 800648e:	f8d7 1574 	ldr.w	r1, [r7, #1396]	; 0x574
 8006492:	400b      	ands	r3, r1
 8006494:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8006498:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f8d7 1568 	ldr.w	r1, [r7, #1384]	; 0x568
 80064a4:	4051      	eors	r1, r2
 80064a6:	61b9      	str	r1, [r7, #24]
 80064a8:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80064ac:	404b      	eors	r3, r1
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b4:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80064b8:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80064bc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	43d1      	mvns	r1, r2
 80064c6:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 80064ca:	43db      	mvns	r3, r3
 80064cc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80064d0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f8d7 1560 	ldr.w	r1, [r7, #1376]	; 0x560
 80064dc:	4011      	ands	r1, r2
 80064de:	f8c7 1558 	str.w	r1, [r7, #1368]	; 0x558
 80064e2:	f8d7 1564 	ldr.w	r1, [r7, #1380]	; 0x564
 80064e6:	400b      	ands	r3, r1
 80064e8:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 80064ec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f8d7 1558 	ldr.w	r1, [r7, #1368]	; 0x558
 80064f8:	4051      	eors	r1, r2
 80064fa:	6139      	str	r1, [r7, #16]
 80064fc:	f8d7 155c 	ldr.w	r1, [r7, #1372]	; 0x55c
 8006500:	404b      	eors	r3, r1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006508:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800650c:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8006510:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	43d1      	mvns	r1, r2
 800651a:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 800651e:	43db      	mvns	r3, r3
 8006520:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 8006524:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f8d7 1550 	ldr.w	r1, [r7, #1360]	; 0x550
 8006530:	ea01 0a02 	and.w	sl, r1, r2
 8006534:	f8d7 1554 	ldr.w	r1, [r7, #1364]	; 0x554
 8006538:	ea01 0b03 	and.w	fp, r1, r3
 800653c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	ea82 010a 	eor.w	r1, r2, sl
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	ea83 030b 	eor.w	r3, r3, fp
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006554:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8006558:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 800655c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006564:	ea6f 0802 	mvn.w	r8, r2
 8006568:	ea6f 0903 	mvn.w	r9, r3
 800656c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	ea08 0402 	and.w	r4, r8, r2
 8006578:	ea09 0503 	and.w	r5, r9, r3
 800657c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	ea82 0104 	eor.w	r1, r2, r4
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	406b      	eors	r3, r5
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006592:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8006596:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 800659a:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 800659e:	3302      	adds	r3, #2
 80065a0:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 80065a4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80065a8:	2b17      	cmp	r3, #23
 80065aa:	f77d aa65 	ble.w	8003a78 <KeccakF1600_StatePermute+0x1dc>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80065ae:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80065c0:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f103 0108 	add.w	r1, r3, #8
 80065ca:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 80065d6:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f103 0110 	add.w	r1, r3, #16
 80065e0:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 80065ec:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f103 0118 	add.w	r1, r3, #24
 80065f6:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8006602:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f103 0120 	add.w	r1, r3, #32
 800660c:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8006618:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006622:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 800662e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006638:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8006644:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800664e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 800665a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006664:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8006670:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800667a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8006686:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006690:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 800669c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80066a6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 80066b2:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80066bc:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 80066c8:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80066d2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 80066de:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80066e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 80066f4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80066fe:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 800670a:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8006714:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8006720:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800672a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800672e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006732:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8006736:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8006740:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 800674c:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8006756:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8006762:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800676c:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8006778:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8006782:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 800678e:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8006798:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 80067a4:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80067ae:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 80067ba:	f607 139c 	addw	r3, r7, #2460	; 0x99c
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 80067c4:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80067d0:	bf00      	nop
 80067d2:	f607 3788 	addw	r7, r7, #2952	; 0xb88
 80067d6:	46bd      	mov	sp, r7
 80067d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int pos,
                                   unsigned int r)
{
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(outlen) {
 80067ee:	e03e      	b.n	800686e <keccak_squeeze+0x8e>
    if(pos == r) {
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d104      	bne.n	8006802 <keccak_squeeze+0x22>
      KeccakF1600_StatePermute(s);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7fd f84f 	bl	800389c <KeccakF1600_StatePermute>
      pos = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	603b      	str	r3, [r7, #0]
    }
    for(i=pos;i < r && i < pos+outlen; i++)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e020      	b.n	800684a <keccak_squeeze+0x6a>
      *out++ = s[i/8] >> 8*(i%8);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	4413      	add	r3, r2
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	6979      	ldr	r1, [r7, #20]
 8006818:	f001 0107 	and.w	r1, r1, #7
 800681c:	00c9      	lsls	r1, r1, #3
 800681e:	f1c1 0620 	rsb	r6, r1, #32
 8006822:	f1a1 0020 	sub.w	r0, r1, #32
 8006826:	fa22 f401 	lsr.w	r4, r2, r1
 800682a:	fa03 f606 	lsl.w	r6, r3, r6
 800682e:	4334      	orrs	r4, r6
 8006830:	fa23 f000 	lsr.w	r0, r3, r0
 8006834:	4304      	orrs	r4, r0
 8006836:	fa23 f501 	lsr.w	r5, r3, r1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	60fa      	str	r2, [r7, #12]
 8006840:	b2e2      	uxtb	r2, r4
 8006842:	701a      	strb	r2, [r3, #0]
    for(i=pos;i < r && i < pos+outlen; i++)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	3301      	adds	r3, #1
 8006848:	617b      	str	r3, [r7, #20]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	429a      	cmp	r2, r3
 8006850:	d205      	bcs.n	800685e <keccak_squeeze+0x7e>
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4413      	add	r3, r2
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	429a      	cmp	r2, r3
 800685c:	d3d4      	bcc.n	8006808 <keccak_squeeze+0x28>
    outlen -= i-pos;
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	4413      	add	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]
    pos = i;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	603b      	str	r3, [r7, #0]
  while(outlen) {
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1bd      	bne.n	80067f0 <keccak_squeeze+0x10>
  }

  return pos;
 8006874:	683b      	ldr	r3, [r7, #0]
}
 8006876:	4618      	mov	r0, r3
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800687e <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 800687e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006882:	b08f      	sub	sp, #60	; 0x3c
 8006884:	af00      	add	r7, sp, #0
 8006886:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006888:	62b9      	str	r1, [r7, #40]	; 0x28
 800688a:	627a      	str	r2, [r7, #36]	; 0x24
 800688c:	623b      	str	r3, [r7, #32]
  unsigned int i;

  for(i=0;i<25;i++)
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
 8006892:	e00c      	b.n	80068ae <keccak_absorb_once+0x30>
    s[i] = 0;
 8006894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689a:	18d1      	adds	r1, r2, r3
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	3301      	adds	r3, #1
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	2b18      	cmp	r3, #24
 80068b2:	d9ef      	bls.n	8006894 <keccak_absorb_once+0x16>

  while(inlen >= r) {
 80068b4:	e032      	b.n	800691c <keccak_absorb_once+0x9e>
    for(i=0;i<r/8;i++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	e01f      	b.n	80068fc <keccak_absorb_once+0x7e>
      s[i] ^= load64(in+8*i);
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	4413      	add	r3, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fc ff81 	bl	80037cc <load64>
 80068ca:	4604      	mov	r4, r0
 80068cc:	460d      	mov	r5, r1
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	00da      	lsls	r2, r3, #3
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	4413      	add	r3, r2
 80068d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80068da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068dc:	00da      	lsls	r2, r3, #3
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	4413      	add	r3, r2
 80068e2:	ea84 0200 	eor.w	r2, r4, r0
 80068e6:	61ba      	str	r2, [r7, #24]
 80068e8:	ea85 0201 	eor.w	r2, r5, r1
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068f2:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 80068f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f8:	3301      	adds	r3, #1
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006902:	429a      	cmp	r2, r3
 8006904:	d3da      	bcc.n	80068bc <keccak_absorb_once+0x3e>
    in += r;
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	4413      	add	r3, r2
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    inlen -= r;
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	623b      	str	r3, [r7, #32]
    KeccakF1600_StatePermute(s);
 8006916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006918:	f7fc ffc0 	bl	800389c <KeccakF1600_StatePermute>
  while(inlen >= r) {
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	429a      	cmp	r2, r3
 8006922:	d2c8      	bcs.n	80068b6 <keccak_absorb_once+0x38>
  }

  for(i=0;i<inlen;i++)
 8006924:	2300      	movs	r3, #0
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
 8006928:	e033      	b.n	8006992 <keccak_absorb_once+0x114>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006932:	4413      	add	r3, r2
 8006934:	e9d3 5600 	ldrd	r5, r6, [r3]
 8006938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	4413      	add	r3, r2
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b2d8      	uxtb	r0, r3
 8006942:	f04f 0100 	mov.w	r1, #0
 8006946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	00dc      	lsls	r4, r3, #3
 800694e:	f1a4 0320 	sub.w	r3, r4, #32
 8006952:	f1c4 0220 	rsb	r2, r4, #32
 8006956:	fa01 fb04 	lsl.w	fp, r1, r4
 800695a:	fa00 f303 	lsl.w	r3, r0, r3
 800695e:	ea4b 0b03 	orr.w	fp, fp, r3
 8006962:	fa20 f202 	lsr.w	r2, r0, r2
 8006966:	ea4b 0b02 	orr.w	fp, fp, r2
 800696a:	fa00 fa04 	lsl.w	sl, r0, r4
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	f023 0307 	bic.w	r3, r3, #7
 8006974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006976:	4413      	add	r3, r2
 8006978:	ea85 020a 	eor.w	r2, r5, sl
 800697c:	613a      	str	r2, [r7, #16]
 800697e:	ea86 020b 	eor.w	r2, r6, fp
 8006982:	617a      	str	r2, [r7, #20]
 8006984:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006988:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	3301      	adds	r3, #1
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
 8006992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	429a      	cmp	r2, r3
 8006998:	d3c7      	bcc.n	800692a <keccak_absorb_once+0xac>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 800699a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	4413      	add	r3, r2
 80069a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80069a8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069b2:	f001 0107 	and.w	r1, r1, #7
 80069b6:	00c9      	lsls	r1, r1, #3
 80069b8:	f1a1 0620 	sub.w	r6, r1, #32
 80069bc:	f1c1 0020 	rsb	r0, r1, #32
 80069c0:	fa03 f901 	lsl.w	r9, r3, r1
 80069c4:	fa02 f606 	lsl.w	r6, r2, r6
 80069c8:	ea49 0906 	orr.w	r9, r9, r6
 80069cc:	fa22 f000 	lsr.w	r0, r2, r0
 80069d0:	ea49 0900 	orr.w	r9, r9, r0
 80069d4:	fa02 f801 	lsl.w	r8, r2, r1
 80069d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	4413      	add	r3, r2
 80069e2:	ea84 0208 	eor.w	r2, r4, r8
 80069e6:	60ba      	str	r2, [r7, #8]
 80069e8:	ea85 0209 	eor.w	r2, r5, r9
 80069ec:	60fa      	str	r2, [r7, #12]
 80069ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069f2:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a00:	4413      	add	r3, r2
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a08:	3901      	subs	r1, #1
 8006a0a:	f021 0107 	bic.w	r1, r1, #7
 8006a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a10:	4401      	add	r1, r0
 8006a12:	603a      	str	r2, [r7, #0]
 8006a14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006a1e:	e9c1 3400 	strd	r3, r4, [r1]
}
 8006a22:	bf00      	nop
 8006a24:	373c      	adds	r7, #60	; 0x3c
 8006a26:	46bd      	mov	sp, r7
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a2c <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks) {
 8006a3a:	e021      	b.n	8006a80 <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7fc ff2d 	bl	800389c <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e00f      	b.n	8006a68 <keccak_squeezeblocks+0x3c>
      store64(out+8*i, s[i]);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	18d1      	adds	r1, r2, r3
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	f7fc fef1 	bl	8003844 <store64>
    for(i=0;i<r/8;i++)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	3301      	adds	r3, #1
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	08db      	lsrs	r3, r3, #3
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d3ea      	bcc.n	8006a48 <keccak_squeezeblocks+0x1c>
    out += r;
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4413      	add	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
    nblocks -= 1;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	60bb      	str	r3, [r7, #8]
  while(nblocks) {
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1da      	bne.n	8006a3c <keccak_squeezeblocks+0x10>
  }
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	231f      	movs	r3, #31
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	21a8      	movs	r1, #168	; 0xa8
 8006aa8:	f7ff fee9 	bl	800687e <keccak_absorb_once>
  state->pos = SHAKE128_RATE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	22a8      	movs	r2, #168	; 0xa8
 8006ab0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	23a8      	movs	r3, #168	; 0xa8
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff ffac 	bl	8006a2c <keccak_squeezeblocks>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <pqcrystals_kyber_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006af0:	2188      	movs	r1, #136	; 0x88
 8006af2:	9100      	str	r1, [sp, #0]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fe72 	bl	80067e0 <keccak_squeeze>
 8006afc:	4602      	mov	r2, r0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <pqcrystals_kyber_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	231f      	movs	r3, #31
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	2188      	movs	r1, #136	; 0x88
 8006b24:	f7ff feab 	bl	800687e <keccak_absorb_once>
  state->pos = SHAKE256_RATE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2288      	movs	r2, #136	; 0x88
 8006b2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	2388      	movs	r3, #136	; 0x88
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff ff6e 	bl	8006a2c <keccak_squeezeblocks>
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <pqcrystals_kyber_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0ba      	sub	sp, #232	; 0xe8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
 8006b66:	f107 0310 	add.w	r3, r7, #16
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff ffcc 	bl	8006b0c <pqcrystals_kyber_fips202_ref_shake256_absorb_once>
  nblocks = outlen/SHAKE256_RATE;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <pqcrystals_kyber_fips202_ref_shake256+0x78>)
 8006b78:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  shake256_squeezeblocks(out, nblocks, &state);
 8006b82:	f107 0310 	add.w	r3, r7, #16
 8006b86:	461a      	mov	r2, r3
 8006b88:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ffd3 	bl	8006b38 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>
  outlen -= nblocks*SHAKE256_RATE;
 8006b92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b96:	4613      	mov	r3, r2
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	4413      	add	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
  out += nblocks*SHAKE256_RATE;
 8006ba6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006baa:	4613      	mov	r3, r2
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
  shake256_squeeze(out, outlen, &state);
 8006bba:	f107 0310 	add.w	r3, r7, #16
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff ff8a 	bl	8006adc <pqcrystals_kyber_fips202_ref_shake256_squeeze>
}
 8006bc8:	bf00      	nop
 8006bca:	37e8      	adds	r7, #232	; 0xe8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	f0f0f0f1 	.word	0xf0f0f0f1

08006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b0ba      	sub	sp, #232	; 0xe8
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
 8006be0:	f107 0010 	add.w	r0, r7, #16
 8006be4:	2306      	movs	r3, #6
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	2188      	movs	r1, #136	; 0x88
 8006bee:	f7ff fe46 	bl	800687e <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8006bf2:	f107 0310 	add.w	r3, r7, #16
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fc fe50 	bl	800389c <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c02:	e015      	b.n	8006c30 <pqcrystals_kyber_fips202_ref_sha3_256+0x5c>
    store64(h+8*i,s[i]);
 8006c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	18d1      	adds	r1, r2, r3
 8006c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006c18:	4413      	add	r3, r2
 8006c1a:	3bd0      	subs	r3, #208	; 0xd0
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	4608      	mov	r0, r1
 8006c22:	f7fc fe0f 	bl	8003844 <store64>
  for(i=0;i<4;i++)
 8006c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d9e5      	bls.n	8006c04 <pqcrystals_kyber_fips202_ref_sha3_256+0x30>
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	37e0      	adds	r7, #224	; 0xe0
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <pqcrystals_kyber_fips202_ref_sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b0ba      	sub	sp, #232	; 0xe8
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 8006c4e:	f107 0010 	add.w	r0, r7, #16
 8006c52:	2306      	movs	r3, #6
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	2148      	movs	r1, #72	; 0x48
 8006c5c:	f7ff fe0f 	bl	800687e <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fc fe19 	bl	800389c <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c70:	e015      	b.n	8006c9e <pqcrystals_kyber_fips202_ref_sha3_512+0x5c>
    store64(h+8*i,s[i]);
 8006c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	18d1      	adds	r1, r2, r3
 8006c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8006c86:	4413      	add	r3, r2
 8006c88:	3bd0      	subs	r3, #208	; 0xd0
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	4608      	mov	r0, r1
 8006c90:	f7fc fdd8 	bl	8003844 <store64>
  for(i=0;i<8;i++)
 8006c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ca2:	2b07      	cmp	r3, #7
 8006ca4:	d9e5      	bls.n	8006c72 <pqcrystals_kyber_fips202_ref_sha3_512+0x30>
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	37e0      	adds	r7, #224	; 0xe0
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <pack_pk>:
*              const uint8_t *seed: pointer to the input public seed
**************************************************/
static void pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES],
                    polyvec *pk,
                    const uint8_t seed[KYBER_SYMBYTES])
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  size_t i;
  polyvec_tobytes(r, pk);
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f001 fc17 	bl	80084f2 <pqcrystals_kyber512_ref_polyvec_tobytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e00c      	b.n	8006ce4 <pack_pk+0x34>
    r[i+KYBER_POLYVECBYTES] = seed[i];
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	441a      	add	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	440b      	add	r3, r1
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2b1f      	cmp	r3, #31
 8006ce8:	d9ef      	bls.n	8006cca <pack_pk+0x1a>
}
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <unpack_pk>:
*              - const uint8_t *packedpk: pointer to input serialized public key
**************************************************/
static void unpack_pk(polyvec *pk,
                      uint8_t seed[KYBER_SYMBYTES],
                      const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES])
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  size_t i;
  polyvec_frombytes(pk, packedpk);
 8006d00:	6879      	ldr	r1, [r7, #4]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f001 fc17 	bl	8008536 <pqcrystals_kyber512_ref_polyvec_frombytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	e00c      	b.n	8006d28 <unpack_pk+0x34>
    seed[i] = packedpk[i+KYBER_POLYVECBYTES];
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	441a      	add	r2, r3
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	440b      	add	r3, r1
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b1f      	cmp	r3, #31
 8006d2c:	d9ef      	bls.n	8006d0e <unpack_pk+0x1a>
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <pack_sk>:
*
* Arguments:   - uint8_t *r: pointer to output serialized secret key
*              - polyvec *sk: pointer to input vector of polynomials (secret key)
**************************************************/
static void pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  polyvec_tobytes(r, sk);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fbd4 	bl	80084f2 <pqcrystals_kyber512_ref_polyvec_tobytes>
}
 8006d4a:	bf00      	nop
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <unpack_sk>:
*
* Arguments:   - polyvec *sk: pointer to output vector of polynomials (secret key)
*              - const uint8_t *packedsk: pointer to input serialized secret key
**************************************************/
static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES])
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]
  polyvec_frombytes(sk, packedsk);
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fbe9 	bl	8008536 <pqcrystals_kyber512_ref_polyvec_frombytes>
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <pack_ciphertext>:
* Arguments:   uint8_t *r: pointer to the output serialized ciphertext
*              poly *pk: pointer to the input vector of polynomials b
*              poly *v: pointer to the input polynomial v
**************************************************/
static void pack_ciphertext(uint8_t r[KYBER_INDCPA_BYTES], polyvec *b, poly *v)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  polyvec_compress(r, b);
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f001 fa8c 	bl	8008298 <pqcrystals_kyber512_ref_polyvec_compress>
  poly_compress(r+KYBER_POLYVECCOMPRESSEDBYTES, v);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 ff63 	bl	8007c54 <pqcrystals_kyber512_ref_poly_compress>
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <unpack_ciphertext>:
* Arguments:   - polyvec *b: pointer to the output vector of polynomials b
*              - poly *v: pointer to the output polynomial v
*              - const uint8_t *c: pointer to the input serialized ciphertext
**************************************************/
static void unpack_ciphertext(polyvec *b, poly *v, const uint8_t c[KYBER_INDCPA_BYTES])
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  polyvec_decompress(b, c);
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f001 fb25 	bl	80083f4 <pqcrystals_kyber512_ref_polyvec_decompress>
  poly_decompress(v, c+KYBER_POLYVECCOMPRESSEDBYTES);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006db0:	4619      	mov	r1, r3
 8006db2:	68b8      	ldr	r0, [r7, #8]
 8006db4:	f000 ffc6 	bl	8007d44 <pqcrystals_kyber512_ref_poly_decompress>
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int16_t *r,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	; 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  unsigned int ctr, pos;
  uint16_t val0, val1;

  ctr = pos = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	61fb      	str	r3, [r7, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8006dd6:	e047      	b.n	8006e68 <rej_uniform+0xa8>
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	4413      	add	r3, r2
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b21a      	sxth	r2, r3
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3301      	adds	r3, #1
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	440b      	add	r3, r1
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	82fb      	strh	r3, [r7, #22]
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	091b      	lsrs	r3, r3, #4
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	b21a      	sxth	r2, r3
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	3302      	adds	r3, #2
 8006e10:	6879      	ldr	r1, [r7, #4]
 8006e12:	440b      	add	r3, r1
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	b21b      	sxth	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b21b      	sxth	r3, r3
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e24:	82bb      	strh	r3, [r7, #20]
    pos += 3;
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	3303      	adds	r3, #3
 8006e2a:	61bb      	str	r3, [r7, #24]

    if(val0 < KYBER_Q)
 8006e2c:	8afb      	ldrh	r3, [r7, #22]
 8006e2e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006e32:	d808      	bhi.n	8006e46 <rej_uniform+0x86>
      r[ctr++] = val0;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8006e44:	801a      	strh	r2, [r3, #0]
    if(ctr < len && val1 < KYBER_Q)
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d20c      	bcs.n	8006e68 <rej_uniform+0xa8>
 8006e4e:	8abb      	ldrh	r3, [r7, #20]
 8006e50:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8006e54:	d808      	bhi.n	8006e68 <rej_uniform+0xa8>
      r[ctr++] = val1;
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	61fa      	str	r2, [r7, #28]
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006e66:	801a      	strh	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d204      	bcs.n	8006e7a <rej_uniform+0xba>
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	3303      	adds	r3, #3
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d2ae      	bcs.n	8006dd8 <rej_uniform+0x18>
  }

  return ctr;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3724      	adds	r7, #36	; 0x24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <pqcrystals_kyber512_ref_gen_matrix>:
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	f107 030c 	add.w	r3, r7, #12
 8006e94:	6018      	str	r0, [r3, #0]
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	6019      	str	r1, [r3, #0]
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	601a      	str	r2, [r3, #0]
  unsigned int ctr, i, j, k;
  unsigned int buflen, off;
  uint8_t buf[GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES+2];
  xof_state state;

  for(i=0;i<KYBER_K;i++) {
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8006ea6:	e0b3      	b.n	8007010 <pqcrystals_kyber512_ref_gen_matrix+0x188>
    for(j=0;j<KYBER_K;j++) {
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006eae:	e0a5      	b.n	8006ffc <pqcrystals_kyber512_ref_gen_matrix+0x174>
      if(transposed)
 8006eb0:	1d3b      	adds	r3, r7, #4
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <pqcrystals_kyber512_ref_gen_matrix+0x4c>
        xof_absorb(&state, seed, i, j);
 8006eb8:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f107 0108 	add.w	r1, r7, #8
 8006ec8:	f107 0010 	add.w	r0, r7, #16
 8006ecc:	6809      	ldr	r1, [r1, #0]
 8006ece:	f001 fdf5 	bl	8008abc <pqcrystals_kyber512_ref_kyber_shake128_absorb>
 8006ed2:	e00c      	b.n	8006eee <pqcrystals_kyber512_ref_gen_matrix+0x66>
      else
        xof_absorb(&state, seed, j, i);
 8006ed4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	f107 0010 	add.w	r0, r7, #16
 8006ee8:	6809      	ldr	r1, [r1, #0]
 8006eea:	f001 fde7 	bl	8008abc <pqcrystals_kyber512_ref_kyber_shake128_absorb>

      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 8006eee:	f107 0210 	add.w	r2, r7, #16
 8006ef2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006ef6:	2103      	movs	r1, #3
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fddf 	bl	8006abc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
      buflen = GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES;
 8006efe:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8006f02:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 8006f06:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	f107 020c 	add.w	r2, r7, #12
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	441a      	add	r2, r3
 8006f14:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006f18:	025b      	lsls	r3, r3, #9
 8006f1a:	18d0      	adds	r0, r2, r3
 8006f1c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006f20:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006f24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f28:	f7ff ff4a 	bl	8006dc0 <rej_uniform>
 8006f2c:	f8c7 02f4 	str.w	r0, [r7, #756]	; 0x2f4

      while(ctr < KYBER_N) {
 8006f30:	e05b      	b.n	8006fea <pqcrystals_kyber512_ref_gen_matrix+0x162>
        off = buflen % 3;
 8006f32:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006f36:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <pqcrystals_kyber512_ref_gen_matrix+0x1a0>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	0859      	lsrs	r1, r3, #1
 8006f3e:	460b      	mov	r3, r1
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	440b      	add	r3, r1
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
        for(k = 0; k < off; k++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006f50:	e016      	b.n	8006f80 <pqcrystals_kyber512_ref_gen_matrix+0xf8>
          buf[k] = buf[buflen - off + k];
 8006f52:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8006f56:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f5a:	1ad2      	subs	r2, r2, r3
 8006f5c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f60:	4413      	add	r3, r2
 8006f62:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006f66:	5cd1      	ldrb	r1, [r2, r3]
 8006f68:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006f6c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f70:	4413      	add	r3, r2
 8006f72:	460a      	mov	r2, r1
 8006f74:	701a      	strb	r2, [r3, #0]
        for(k = 0; k < off; k++)
 8006f76:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8006f80:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8006f84:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d3e2      	bcc.n	8006f52 <pqcrystals_kyber512_ref_gen_matrix+0xca>
        xof_squeezeblocks(buf + off, 1, &state);
 8006f8c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006f90:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006f94:	4413      	add	r3, r2
 8006f96:	f107 0210 	add.w	r2, r7, #16
 8006f9a:	2101      	movs	r1, #1
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fd8d 	bl	8006abc <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
        buflen = off + XOF_BLOCKBYTES;
 8006fa2:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8006fa6:	33a8      	adds	r3, #168	; 0xa8
 8006fa8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 8006fac:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8006fb0:	029b      	lsls	r3, r3, #10
 8006fb2:	f107 020c 	add.w	r2, r7, #12
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	441a      	add	r2, r3
 8006fba:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006fbe:	025b      	lsls	r3, r3, #9
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	18d0      	adds	r0, r2, r3
 8006fca:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8006fce:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8006fd2:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8006fd6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8006fda:	f7ff fef1 	bl	8006dc0 <rej_uniform>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
      while(ctr < KYBER_N) {
 8006fea:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8006fee:	2bff      	cmp	r3, #255	; 0xff
 8006ff0:	d99f      	bls.n	8006f32 <pqcrystals_kyber512_ref_gen_matrix+0xaa>
    for(j=0;j<KYBER_K;j++) {
 8006ff2:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8006ffc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8007000:	2b01      	cmp	r3, #1
 8007002:	f67f af55 	bls.w	8006eb0 <pqcrystals_kyber512_ref_gen_matrix+0x28>
  for(i=0;i<KYBER_K;i++) {
 8007006:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800700a:	3301      	adds	r3, #1
 800700c:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8007010:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 8007014:	2b01      	cmp	r3, #1
 8007016:	f67f af47 	bls.w	8006ea8 <pqcrystals_kyber512_ref_gen_matrix+0x20>
      }
    }
  }
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	aaaaaaab 	.word	0xaaaaaaab

0800702c <pqcrystals_kyber512_ref_indcpa_keypair>:
*              - uint8_t *sk: pointer to output private key
                              (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
**************************************************/
void indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                    uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 800702c:	b580      	push	{r7, lr}
 800702e:	f5ad 5da2 	sub.w	sp, sp, #5184	; 0x1440
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	f107 0318 	add.w	r3, r7, #24
 800703a:	3b14      	subs	r3, #20
 800703c:	6018      	str	r0, [r3, #0]
 800703e:	f107 0318 	add.w	r3, r7, #24
 8007042:	3b18      	subs	r3, #24
 8007044:	6019      	str	r1, [r3, #0]
  unsigned int i;
  uint8_t buf[2*KYBER_SYMBYTES];
  const uint8_t *publicseed = buf;
 8007046:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800704a:	f103 0308 	add.w	r3, r3, #8
 800704e:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007052:	f102 020c 	add.w	r2, r2, #12
 8007056:	6013      	str	r3, [r2, #0]
  const uint8_t *noiseseed = buf+KYBER_SYMBYTES;
 8007058:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800705c:	f103 0308 	add.w	r3, r3, #8
 8007060:	3320      	adds	r3, #32
 8007062:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007066:	f102 0208 	add.w	r2, r2, #8
 800706a:	6013      	str	r3, [r2, #0]
  uint8_t nonce = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007072:	f102 0213 	add.w	r2, r2, #19
 8007076:	7013      	strb	r3, [r2, #0]
  polyvec a[KYBER_K], e, pkpv, skpv;

  randombytes(buf, KYBER_SYMBYTES);
 8007078:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 800707c:	f103 0308 	add.w	r3, r3, #8
 8007080:	2120      	movs	r1, #32
 8007082:	4618      	mov	r0, r3
 8007084:	f001 fb30 	bl	80086e8 <randombytes>
  hash_g(buf, buf, KYBER_SYMBYTES);
 8007088:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 800708c:	f101 0108 	add.w	r1, r1, #8
 8007090:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8007094:	f103 0308 	add.w	r3, r3, #8
 8007098:	2220      	movs	r2, #32
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fdd1 	bl	8006c42 <pqcrystals_kyber_fips202_ref_sha3_512>

  gen_a(a, publicseed);
 80070a0:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80070a4:	2200      	movs	r2, #0
 80070a6:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 80070aa:	f101 010c 	add.w	r1, r1, #12
 80070ae:	6809      	ldr	r1, [r1, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7ff fee9 	bl	8006e88 <pqcrystals_kyber512_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80070bc:	f102 0214 	add.w	r2, r2, #20
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e027      	b.n	8007114 <pqcrystals_kyber512_ref_indcpa_keypair+0xe8>
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 80070c4:	f107 0318 	add.w	r3, r7, #24
 80070c8:	3b10      	subs	r3, #16
 80070ca:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80070ce:	f102 0214 	add.w	r2, r2, #20
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	0252      	lsls	r2, r2, #9
 80070d6:	1898      	adds	r0, r3, r2
 80070d8:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80070dc:	f103 0313 	add.w	r3, r3, #19
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 80070e8:	f101 0113 	add.w	r1, r1, #19
 80070ec:	700a      	strb	r2, [r1, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80070f4:	f103 0308 	add.w	r3, r3, #8
 80070f8:	6819      	ldr	r1, [r3, #0]
 80070fa:	f000 ffa3 	bl	8008044 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 80070fe:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007102:	f103 0314 	add.w	r3, r3, #20
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800710e:	f102 0214 	add.w	r2, r2, #20
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007118:	f103 0314 	add.w	r3, r3, #20
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d9d0      	bls.n	80070c4 <pqcrystals_kyber512_ref_indcpa_keypair+0x98>
  for(i=0;i<KYBER_K;i++)
 8007122:	2300      	movs	r3, #0
 8007124:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007128:	f102 0214 	add.w	r2, r2, #20
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	e026      	b.n	800717e <pqcrystals_kyber512_ref_indcpa_keypair+0x152>
    poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
 8007130:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8007134:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007138:	f103 0314 	add.w	r3, r3, #20
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	025b      	lsls	r3, r3, #9
 8007140:	18d0      	adds	r0, r2, r3
 8007142:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007146:	f103 0313 	add.w	r3, r3, #19
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	f507 51a2 	add.w	r1, r7, #5184	; 0x1440
 8007152:	f101 0113 	add.w	r1, r1, #19
 8007156:	700a      	strb	r2, [r1, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800715e:	f103 0308 	add.w	r3, r3, #8
 8007162:	6819      	ldr	r1, [r3, #0]
 8007164:	f000 ff6e 	bl	8008044 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 8007168:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 800716c:	f103 0314 	add.w	r3, r3, #20
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007178:	f102 0214 	add.w	r2, r2, #20
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007182:	f103 0314 	add.w	r3, r3, #20
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d9d1      	bls.n	8007130 <pqcrystals_kyber512_ref_indcpa_keypair+0x104>

  polyvec_ntt(&skpv);
 800718c:	f107 0318 	add.w	r3, r7, #24
 8007190:	3b10      	subs	r3, #16
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f9f1 	bl	800857a <pqcrystals_kyber512_ref_polyvec_ntt>
  polyvec_ntt(&e);
 8007198:	f607 0308 	addw	r3, r7, #2056	; 0x808
 800719c:	4618      	mov	r0, r3
 800719e:	f001 f9ec 	bl	800857a <pqcrystals_kyber512_ref_polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++) {
 80071a2:	2300      	movs	r3, #0
 80071a4:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80071a8:	f102 0214 	add.w	r2, r2, #20
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	e030      	b.n	8007212 <pqcrystals_kyber512_ref_indcpa_keypair+0x1e6>
    polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
 80071b0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80071b4:	3b10      	subs	r3, #16
 80071b6:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80071ba:	f102 0214 	add.w	r2, r2, #20
 80071be:	6812      	ldr	r2, [r2, #0]
 80071c0:	0252      	lsls	r2, r2, #9
 80071c2:	1898      	adds	r0, r3, r2
 80071c4:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 80071c8:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 80071cc:	f103 0314 	add.w	r3, r3, #20
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	029b      	lsls	r3, r3, #10
 80071d4:	18d1      	adds	r1, r2, r3
 80071d6:	f107 0318 	add.w	r3, r7, #24
 80071da:	3b10      	subs	r3, #16
 80071dc:	461a      	mov	r2, r3
 80071de:	f001 f9fe 	bl	80085de <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
    poly_tomont(&pkpv.vec[i]);
 80071e2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80071e6:	3b10      	subs	r3, #16
 80071e8:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 80071ec:	f102 0214 	add.w	r2, r2, #20
 80071f0:	6812      	ldr	r2, [r2, #0]
 80071f2:	0252      	lsls	r2, r2, #9
 80071f4:	4413      	add	r3, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 ffba 	bl	8008170 <pqcrystals_kyber512_ref_poly_tomont>
  for(i=0;i<KYBER_K;i++) {
 80071fc:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007200:	f103 0314 	add.w	r3, r3, #20
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3301      	adds	r3, #1
 8007208:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 800720c:	f102 0214 	add.w	r2, r2, #20
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	f507 53a2 	add.w	r3, r7, #5184	; 0x1440
 8007216:	f103 0314 	add.w	r3, r3, #20
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d9c7      	bls.n	80071b0 <pqcrystals_kyber512_ref_indcpa_keypair+0x184>
  }

  polyvec_add(&pkpv, &pkpv, &e);
 8007220:	f607 0208 	addw	r2, r7, #2056	; 0x808
 8007224:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8007228:	3910      	subs	r1, #16
 800722a:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800722e:	3b10      	subs	r3, #16
 8007230:	4618      	mov	r0, r3
 8007232:	f001 fa36 	bl	80086a2 <pqcrystals_kyber512_ref_polyvec_add>
  polyvec_reduce(&pkpv);
 8007236:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 800723a:	3b10      	subs	r3, #16
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fa17 	bl	8008670 <pqcrystals_kyber512_ref_polyvec_reduce>

  pack_sk(sk, &skpv);
 8007242:	f107 0218 	add.w	r2, r7, #24
 8007246:	3a10      	subs	r2, #16
 8007248:	f107 0318 	add.w	r3, r7, #24
 800724c:	3b18      	subs	r3, #24
 800724e:	4611      	mov	r1, r2
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f7ff fd71 	bl	8006d38 <pack_sk>
  pack_pk(pk, &pkpv, publicseed);
 8007256:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 800725a:	3910      	subs	r1, #16
 800725c:	f107 0318 	add.w	r3, r7, #24
 8007260:	3b14      	subs	r3, #20
 8007262:	f507 52a2 	add.w	r2, r7, #5184	; 0x1440
 8007266:	f102 020c 	add.w	r2, r2, #12
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	f7ff fd1f 	bl	8006cb0 <pack_pk>
}
 8007272:	bf00      	nop
 8007274:	f507 57a2 	add.w	r7, r7, #5184	; 0x1440
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <pqcrystals_kyber512_ref_indcpa_enc>:
**************************************************/
void indcpa_enc(uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                const uint8_t coins[KYBER_SYMBYTES])
{
 800727e:	b590      	push	{r4, r7, lr}
 8007280:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	f107 0418 	add.w	r4, r7, #24
 800728c:	3c0c      	subs	r4, #12
 800728e:	6020      	str	r0, [r4, #0]
 8007290:	f107 0018 	add.w	r0, r7, #24
 8007294:	3810      	subs	r0, #16
 8007296:	6001      	str	r1, [r0, #0]
 8007298:	f107 0118 	add.w	r1, r7, #24
 800729c:	3914      	subs	r1, #20
 800729e:	600a      	str	r2, [r1, #0]
 80072a0:	f107 0218 	add.w	r2, r7, #24
 80072a4:	3a18      	subs	r2, #24
 80072a6:	6013      	str	r3, [r2, #0]
  unsigned int i;
  uint8_t seed[KYBER_SYMBYTES];
  uint8_t nonce = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 80072ae:	f102 0213 	add.w	r2, r2, #19
 80072b2:	7013      	strb	r3, [r2, #0]
  polyvec sp, pkpv, ep, at[KYBER_K], b;
  poly v, k, epp;

  unpack_pk(&pkpv, seed, pk);
 80072b4:	f107 0318 	add.w	r3, r7, #24
 80072b8:	3b14      	subs	r3, #20
 80072ba:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 80072be:	f101 0110 	add.w	r1, r1, #16
 80072c2:	f507 50b0 	add.w	r0, r7, #5632	; 0x1600
 80072c6:	f100 0010 	add.w	r0, r0, #16
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	f7ff fd12 	bl	8006cf4 <unpack_pk>
  poly_frommsg(&k, m);
 80072d0:	f107 0318 	add.w	r3, r7, #24
 80072d4:	3b10      	subs	r3, #16
 80072d6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80072da:	3a08      	subs	r2, #8
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	4610      	mov	r0, r2
 80072e0:	f000 fe1c 	bl	8007f1c <pqcrystals_kyber512_ref_poly_frommsg>
  gen_at(at, seed);
 80072e4:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 80072e8:	f101 0110 	add.w	r1, r1, #16
 80072ec:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80072f0:	3b08      	subs	r3, #8
 80072f2:	2201      	movs	r2, #1
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fdc7 	bl	8006e88 <pqcrystals_kyber512_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8007300:	f102 0214 	add.w	r2, r2, #20
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e026      	b.n	8007356 <pqcrystals_kyber512_ref_indcpa_enc+0xd8>
    poly_getnoise_eta1(sp.vec+i, coins, nonce++);
 8007308:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800730c:	f103 0314 	add.w	r3, r3, #20
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	025b      	lsls	r3, r3, #9
 8007314:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 8007318:	f102 0210 	add.w	r2, r2, #16
 800731c:	18d0      	adds	r0, r2, r3
 800731e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8007322:	f103 0313 	add.w	r3, r3, #19
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	1c53      	adds	r3, r2, #1
 800732a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 800732e:	f101 0113 	add.w	r1, r1, #19
 8007332:	700b      	strb	r3, [r1, #0]
 8007334:	f107 0318 	add.w	r3, r7, #24
 8007338:	3b18      	subs	r3, #24
 800733a:	6819      	ldr	r1, [r3, #0]
 800733c:	f000 fe82 	bl	8008044 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 8007340:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8007344:	f103 0314 	add.w	r3, r3, #20
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3301      	adds	r3, #1
 800734c:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8007350:	f102 0214 	add.w	r2, r2, #20
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800735a:	f103 0314 	add.w	r3, r3, #20
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d9d1      	bls.n	8007308 <pqcrystals_kyber512_ref_indcpa_enc+0x8a>
  for(i=0;i<KYBER_K;i++)
 8007364:	2300      	movs	r3, #0
 8007366:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800736a:	f102 0214 	add.w	r2, r2, #20
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	e026      	b.n	80073c0 <pqcrystals_kyber512_ref_indcpa_enc+0x142>
    poly_getnoise_eta2(ep.vec+i, coins, nonce++);
 8007372:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8007376:	f103 0314 	add.w	r3, r3, #20
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	025b      	lsls	r3, r3, #9
 800737e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8007382:	f102 0210 	add.w	r2, r2, #16
 8007386:	18d0      	adds	r0, r2, r3
 8007388:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800738c:	f103 0313 	add.w	r3, r3, #19
 8007390:	781a      	ldrb	r2, [r3, #0]
 8007392:	1c53      	adds	r3, r2, #1
 8007394:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8007398:	f101 0113 	add.w	r1, r1, #19
 800739c:	700b      	strb	r3, [r1, #0]
 800739e:	f107 0318 	add.w	r3, r7, #24
 80073a2:	3b18      	subs	r3, #24
 80073a4:	6819      	ldr	r1, [r3, #0]
 80073a6:	f000 fe65 	bl	8008074 <pqcrystals_kyber512_ref_poly_getnoise_eta2>
  for(i=0;i<KYBER_K;i++)
 80073aa:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80073ae:	f103 0314 	add.w	r3, r3, #20
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3301      	adds	r3, #1
 80073b6:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 80073ba:	f102 0214 	add.w	r2, r2, #20
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80073c4:	f103 0314 	add.w	r3, r3, #20
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d9d1      	bls.n	8007372 <pqcrystals_kyber512_ref_indcpa_enc+0xf4>
  poly_getnoise_eta2(&epp, coins, nonce++);
 80073ce:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 80073d2:	f103 0313 	add.w	r3, r3, #19
 80073d6:	781a      	ldrb	r2, [r3, #0]
 80073d8:	1c53      	adds	r3, r2, #1
 80073da:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 80073de:	f101 0113 	add.w	r1, r1, #19
 80073e2:	700b      	strb	r3, [r1, #0]
 80073e4:	f107 0318 	add.w	r3, r7, #24
 80073e8:	3b18      	subs	r3, #24
 80073ea:	f107 0018 	add.w	r0, r7, #24
 80073ee:	3808      	subs	r0, #8
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	f000 fe3f 	bl	8008074 <pqcrystals_kyber512_ref_poly_getnoise_eta2>

  polyvec_ntt(&sp);
 80073f6:	f507 53d0 	add.w	r3, r7, #6656	; 0x1a00
 80073fa:	f103 0310 	add.w	r3, r3, #16
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 f8bb 	bl	800857a <pqcrystals_kyber512_ref_polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++)
 8007404:	2300      	movs	r3, #0
 8007406:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800740a:	f102 0214 	add.w	r2, r2, #20
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e025      	b.n	800745e <pqcrystals_kyber512_ref_indcpa_enc+0x1e0>
    polyvec_basemul_acc_montgomery(&b.vec[i], &at[i], &sp);
 8007412:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 8007416:	3b08      	subs	r3, #8
 8007418:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 800741c:	f102 0214 	add.w	r2, r2, #20
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	0252      	lsls	r2, r2, #9
 8007424:	1898      	adds	r0, r3, r2
 8007426:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800742a:	3b08      	subs	r3, #8
 800742c:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8007430:	f102 0214 	add.w	r2, r2, #20
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	0292      	lsls	r2, r2, #10
 8007438:	4413      	add	r3, r2
 800743a:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 800743e:	f102 0210 	add.w	r2, r2, #16
 8007442:	4619      	mov	r1, r3
 8007444:	f001 f8cb 	bl	80085de <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
  for(i=0;i<KYBER_K;i++)
 8007448:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 800744c:	f103 0314 	add.w	r3, r3, #20
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8007458:	f102 0214 	add.w	r2, r2, #20
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8007462:	f103 0314 	add.w	r3, r3, #20
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d9d2      	bls.n	8007412 <pqcrystals_kyber512_ref_indcpa_enc+0x194>

  polyvec_basemul_acc_montgomery(&v, &pkpv, &sp);
 800746c:	f507 52d0 	add.w	r2, r7, #6656	; 0x1a00
 8007470:	f102 0210 	add.w	r2, r2, #16
 8007474:	f507 51b0 	add.w	r1, r7, #5632	; 0x1600
 8007478:	f101 0110 	add.w	r1, r1, #16
 800747c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8007480:	3b08      	subs	r3, #8
 8007482:	4618      	mov	r0, r3
 8007484:	f001 f8ab 	bl	80085de <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>

  polyvec_invntt_tomont(&b);
 8007488:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 800748c:	3b08      	subs	r3, #8
 800748e:	4618      	mov	r0, r3
 8007490:	f001 f88c 	bl	80085ac <pqcrystals_kyber512_ref_polyvec_invntt_tomont>
  poly_invntt_tomont(&v);
 8007494:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8007498:	3b08      	subs	r3, #8
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fe11 	bl	80080c2 <pqcrystals_kyber512_ref_poly_invntt_tomont>

  polyvec_add(&b, &b, &ep);
 80074a0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80074a4:	f102 0210 	add.w	r2, r2, #16
 80074a8:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 80074ac:	3908      	subs	r1, #8
 80074ae:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80074b2:	3b08      	subs	r3, #8
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 f8f4 	bl	80086a2 <pqcrystals_kyber512_ref_polyvec_add>
  poly_add(&v, &v, &epp);
 80074ba:	f107 0218 	add.w	r2, r7, #24
 80074be:	3a08      	subs	r2, #8
 80074c0:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80074c4:	3908      	subs	r1, #8
 80074c6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80074ca:	3b08      	subs	r3, #8
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fe95 	bl	80081fc <pqcrystals_kyber512_ref_poly_add>
  poly_add(&v, &v, &k);
 80074d2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80074d6:	3a08      	subs	r2, #8
 80074d8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80074dc:	3908      	subs	r1, #8
 80074de:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80074e2:	3b08      	subs	r3, #8
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 fe89 	bl	80081fc <pqcrystals_kyber512_ref_poly_add>
  polyvec_reduce(&b);
 80074ea:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80074ee:	3b08      	subs	r3, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f8bd 	bl	8008670 <pqcrystals_kyber512_ref_polyvec_reduce>
  poly_reduce(&v);
 80074f6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80074fa:	3b08      	subs	r3, #8
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fe5e 	bl	80081be <pqcrystals_kyber512_ref_poly_reduce>

  pack_ciphertext(c, &b, &v);
 8007502:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8007506:	3a08      	subs	r2, #8
 8007508:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 800750c:	3908      	subs	r1, #8
 800750e:	f107 0318 	add.w	r3, r7, #24
 8007512:	3b0c      	subs	r3, #12
 8007514:	6818      	ldr	r0, [r3, #0]
 8007516:	f7ff fc29 	bl	8006d6c <pack_ciphertext>
}
 800751a:	bf00      	nop
 800751c:	f507 57f1 	add.w	r7, r7, #7712	; 0x1e20
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd90      	pop	{r4, r7, pc}

08007526 <pqcrystals_kyber512_ref_indcpa_dec>:
*                                   (of length KYBER_INDCPA_SECRETKEYBYTES)
**************************************************/
void indcpa_dec(uint8_t m[KYBER_INDCPA_MSGBYTES],
                const uint8_t c[KYBER_INDCPA_BYTES],
                const uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 8007526:	b580      	push	{r7, lr}
 8007528:	f5ad 6d41 	sub.w	sp, sp, #3088	; 0xc10
 800752c:	af00      	add	r7, sp, #0
 800752e:	f107 030c 	add.w	r3, r7, #12
 8007532:	6018      	str	r0, [r3, #0]
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	6019      	str	r1, [r3, #0]
 800753a:	1d3b      	adds	r3, r7, #4
 800753c:	601a      	str	r2, [r3, #0]
  polyvec b, skpv;
  poly v, mp;

  unpack_ciphertext(&b, &v, c);
 800753e:	f107 0308 	add.w	r3, r7, #8
 8007542:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8007546:	f507 6001 	add.w	r0, r7, #2064	; 0x810
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	f7ff fc23 	bl	8006d96 <unpack_ciphertext>
  unpack_sk(&skpv, sk);
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8007556:	6819      	ldr	r1, [r3, #0]
 8007558:	4610      	mov	r0, r2
 800755a:	f7ff fbfa 	bl	8006d52 <unpack_sk>

  polyvec_ntt(&b);
 800755e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f809 	bl	800857a <pqcrystals_kyber512_ref_polyvec_ntt>
  polyvec_basemul_acc_montgomery(&mp, &skpv, &b);
 8007568:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 800756c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8007570:	f107 0310 	add.w	r3, r7, #16
 8007574:	4618      	mov	r0, r3
 8007576:	f001 f832 	bl	80085de <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
  poly_invntt_tomont(&mp);
 800757a:	f107 0310 	add.w	r3, r7, #16
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fd9f 	bl	80080c2 <pqcrystals_kyber512_ref_poly_invntt_tomont>

  poly_sub(&mp, &v, &mp);
 8007584:	f107 0210 	add.w	r2, r7, #16
 8007588:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800758c:	f107 0310 	add.w	r3, r7, #16
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fe5a 	bl	800824a <pqcrystals_kyber512_ref_poly_sub>
  poly_reduce(&mp);
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fe0f 	bl	80081be <pqcrystals_kyber512_ref_poly_reduce>

  poly_tomsg(m, &mp);
 80075a0:	f107 0210 	add.w	r2, r7, #16
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	4611      	mov	r1, r2
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	f000 fcf0 	bl	8007f90 <pqcrystals_kyber512_ref_poly_tomsg>
}
 80075b0:	bf00      	nop
 80075b2:	f507 6741 	add.w	r7, r7, #3088	; 0xc10
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <pqcrystals_kyber512_ref_keypair>:
*
* Returns 0 (success)
**************************************************/
int crypto_kem_keypair(uint8_t pk[KYBER_PUBLICKEYBYTES],
                       uint8_t sk[KYBER_SECRETKEYBYTES])
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  size_t i;
  indcpa_keypair(pk, sk);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff fd30 	bl	800702c <pqcrystals_kyber512_ref_indcpa_keypair>
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	e00c      	b.n	80075ec <pqcrystals_kyber512_ref_keypair+0x32>
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	441a      	add	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	440b      	add	r3, r1
 80075e2:	7812      	ldrb	r2, [r2, #0]
 80075e4:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80075f2:	d3ee      	bcc.n	80075d2 <pqcrystals_kyber512_ref_keypair+0x18>
  hash_h(sk+KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80075fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fae7 	bl	8006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>
  /* Value z for pseudo-random output on reject */
  randombytes(sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800760c:	2120      	movs	r1, #32
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f86a 	bl	80086e8 <randombytes>
  return 0;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <pqcrystals_kyber512_ref_enc>:
* Returns 0 (success)
**************************************************/
int crypto_kem_enc(uint8_t ct[KYBER_CIPHERTEXTBYTES],
                   uint8_t ss[KYBER_SSBYTES],
                   const uint8_t pk[KYBER_PUBLICKEYBYTES])
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b0a4      	sub	sp, #144	; 0x90
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
  uint8_t buf[2*KYBER_SYMBYTES];
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];

  randombytes(buf, KYBER_SYMBYTES);
 800762a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800762e:	2120      	movs	r1, #32
 8007630:	4618      	mov	r0, r3
 8007632:	f001 f859 	bl	80086e8 <randombytes>
  /* Don't release system RNG output */
  hash_h(buf, buf, KYBER_SYMBYTES);
 8007636:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800763a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800763e:	2220      	movs	r2, #32
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff fac7 	bl	8006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Multitarget countermeasure for coins + contributory KEM */
  hash_h(buf+KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 8007646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800764a:	3320      	adds	r3, #32
 800764c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff fabe 	bl	8006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8007658:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800765c:	f107 0310 	add.w	r3, r7, #16
 8007660:	2240      	movs	r2, #64	; 0x40
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff faed 	bl	8006c42 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(ct, buf, pk, kr+KYBER_SYMBYTES);
 8007668:	f107 0310 	add.w	r3, r7, #16
 800766c:	3320      	adds	r3, #32
 800766e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fe02 	bl	800727e <pqcrystals_kyber512_ref_indcpa_enc>

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 800767a:	f107 0310 	add.w	r3, r7, #16
 800767e:	3320      	adds	r3, #32
 8007680:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007684:	68f9      	ldr	r1, [r7, #12]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff faa4 	bl	8006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>
  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 800768c:	f107 0210 	add.w	r2, r7, #16
 8007690:	2340      	movs	r3, #64	; 0x40
 8007692:	2120      	movs	r1, #32
 8007694:	68b8      	ldr	r0, [r7, #8]
 8007696:	f7ff fa5f 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3790      	adds	r7, #144	; 0x90
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <pqcrystals_kyber512_ref_dec>:
* On failure, ss will contain a pseudo-random value.
**************************************************/
int crypto_kem_dec(uint8_t ss[KYBER_SSBYTES],
                   const uint8_t ct[KYBER_CIPHERTEXTBYTES],
                   const uint8_t sk[KYBER_SECRETKEYBYTES])
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	f5ad 7d68 	sub.w	sp, sp, #928	; 0x3a0
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	6018      	str	r0, [r3, #0]
 80076b2:	f107 0308 	add.w	r3, r7, #8
 80076b6:	6019      	str	r1, [r3, #0]
 80076b8:	1d3b      	adds	r3, r7, #4
 80076ba:	601a      	str	r2, [r3, #0]
  int fail;
  uint8_t buf[2*KYBER_SYMBYTES];
  /* Will contain key, coins */
  uint8_t kr[2*KYBER_SYMBYTES];
  uint8_t cmp[KYBER_CIPHERTEXTBYTES];
  const uint8_t *pk = sk+KYBER_INDCPA_SECRETKEYBYTES;
 80076bc:	1d3b      	adds	r3, r7, #4
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80076c4:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398

  indcpa_dec(buf, ct, sk);
 80076c8:	1d3a      	adds	r2, r7, #4
 80076ca:	f107 0308 	add.w	r3, r7, #8
 80076ce:	f507 7055 	add.w	r0, r7, #852	; 0x354
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	f7ff ff26 	bl	8007526 <pqcrystals_kyber512_ref_indcpa_dec>

  /* Multitarget countermeasure for coins + contributory KEM */
  for(i=0;i<KYBER_SYMBYTES;i++)
 80076da:	2300      	movs	r3, #0
 80076dc:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80076e0:	e014      	b.n	800770c <pqcrystals_kyber512_ref_dec+0x68>
    buf[KYBER_SYMBYTES+i] = sk[KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES+i];
 80076e2:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80076e6:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80076ea:	1d3a      	adds	r2, r7, #4
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	441a      	add	r2, r3
 80076f0:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 80076f4:	3320      	adds	r3, #32
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 80076fc:	440b      	add	r3, r1
 80076fe:	f803 2c4c 	strb.w	r2, [r3, #-76]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8007702:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8007706:	3301      	adds	r3, #1
 8007708:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800770c:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8007710:	2b1f      	cmp	r3, #31
 8007712:	d9e6      	bls.n	80076e2 <pqcrystals_kyber512_ref_dec+0x3e>
  hash_g(kr, buf, 2*KYBER_SYMBYTES);
 8007714:	f507 7155 	add.w	r1, r7, #852	; 0x354
 8007718:	f507 7345 	add.w	r3, r7, #788	; 0x314
 800771c:	2240      	movs	r2, #64	; 0x40
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fa8f 	bl	8006c42 <pqcrystals_kyber_fips202_ref_sha3_512>

  /* coins are in kr+KYBER_SYMBYTES */
  indcpa_enc(cmp, buf, pk, kr+KYBER_SYMBYTES);
 8007724:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8007728:	3320      	adds	r3, #32
 800772a:	f507 7155 	add.w	r1, r7, #852	; 0x354
 800772e:	f107 0014 	add.w	r0, r7, #20
 8007732:	f8d7 2398 	ldr.w	r2, [r7, #920]	; 0x398
 8007736:	f7ff fda2 	bl	800727e <pqcrystals_kyber512_ref_indcpa_enc>

  fail = verify(ct, cmp, KYBER_CIPHERTEXTBYTES);
 800773a:	f107 0114 	add.w	r1, r7, #20
 800773e:	f107 0308 	add.w	r3, r7, #8
 8007742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	f001 f9f7 	bl	8008b3a <pqcrystals_kyber512_ref_verify>
 800774c:	f8c7 0394 	str.w	r0, [r7, #916]	; 0x394

  /* overwrite coins in kr with H(c) */
  hash_h(kr+KYBER_SYMBYTES, ct, KYBER_CIPHERTEXTBYTES);
 8007750:	f507 7345 	add.w	r3, r7, #788	; 0x314
 8007754:	3320      	adds	r3, #32
 8007756:	f107 0108 	add.w	r1, r7, #8
 800775a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800775e:	6809      	ldr	r1, [r1, #0]
 8007760:	4618      	mov	r0, r3
 8007762:	f7ff fa37 	bl	8006bd4 <pqcrystals_kyber_fips202_ref_sha3_256>

  /* Overwrite pre-k with z on re-encryption failure */
  cmov(kr, sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES, fail);
 8007766:	1d3b      	adds	r3, r7, #4
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
 800776e:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8007772:	b2db      	uxtb	r3, r3
 8007774:	f507 7045 	add.w	r0, r7, #788	; 0x314
 8007778:	2220      	movs	r2, #32
 800777a:	f001 fa10 	bl	8008b9e <pqcrystals_kyber512_ref_cmov>

  /* hash concatenation of pre-k and H(c) to k */
  kdf(ss, kr, 2*KYBER_SYMBYTES);
 800777e:	f507 7245 	add.w	r2, r7, #788	; 0x314
 8007782:	f107 000c 	add.w	r0, r7, #12
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	2120      	movs	r1, #32
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	f7ff f9e4 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
  return 0;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	f507 7768 	add.w	r7, r7, #928	; 0x3a0
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <kex_uake_initA>:
#include "kex.h"
#include "kem.h"
#include "symmetric.h"

void kex_uake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
  crypto_kem_keypair(send, sk);
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff ff04 	bl	80075ba <pqcrystals_kyber512_ref_keypair>
  crypto_kem_enc(send+CRYPTO_PUBLICKEYBYTES, tk, pkb);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	4618      	mov	r0, r3
 80077be:	f7ff ff2e 	bl	800761e <pqcrystals_kyber512_ref_enc>
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <kex_uake_sharedB>:

void kex_uake_sharedB(uint8_t *send, uint8_t *k, const uint8_t *recv, const uint8_t *skb)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b094      	sub	sp, #80	; 0x50
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	603b      	str	r3, [r7, #0]
  uint8_t buf[2*CRYPTO_BYTES];
  crypto_kem_enc(send, buf, recv);
 80077d8:	f107 0310 	add.w	r3, r7, #16
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	4619      	mov	r1, r3
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff ff1c 	bl	800761e <pqcrystals_kyber512_ref_enc>
  crypto_kem_dec(buf+CRYPTO_BYTES, recv+CRYPTO_PUBLICKEYBYTES, skb);
 80077e6:	f107 0310 	add.w	r3, r7, #16
 80077ea:	3320      	adds	r3, #32
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	f502 7148 	add.w	r1, r2, #800	; 0x320
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff ff55 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  kdf(k, buf, 2*CRYPTO_BYTES);
 80077fa:	f107 0210 	add.w	r2, r7, #16
 80077fe:	2340      	movs	r3, #64	; 0x40
 8007800:	2120      	movs	r1, #32
 8007802:	68b8      	ldr	r0, [r7, #8]
 8007804:	f7ff f9a8 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007808:	bf00      	nop
 800780a:	3750      	adds	r7, #80	; 0x50
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <kex_uake_sharedA>:

void kex_uake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b096      	sub	sp, #88	; 0x58
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t buf[2*CRYPTO_BYTES];
  crypto_kem_dec(buf, recv, sk);
 800781e:	f107 0314 	add.w	r3, r7, #20
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff ff3c 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  for(i=0;i<CRYPTO_BYTES;i++)
 800782c:	2300      	movs	r3, #0
 800782e:	657b      	str	r3, [r7, #84]	; 0x54
 8007830:	e00d      	b.n	800784e <kex_uake_sharedA+0x3e>
    buf[i+CRYPTO_BYTES] = tk[i];
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007836:	441a      	add	r2, r3
 8007838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783a:	3320      	adds	r3, #32
 800783c:	7812      	ldrb	r2, [r2, #0]
 800783e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007842:	440b      	add	r3, r1
 8007844:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(i=0;i<CRYPTO_BYTES;i++)
 8007848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800784a:	3301      	adds	r3, #1
 800784c:	657b      	str	r3, [r7, #84]	; 0x54
 800784e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007850:	2b1f      	cmp	r3, #31
 8007852:	d9ee      	bls.n	8007832 <kex_uake_sharedA+0x22>
  kdf(k, buf, 2*CRYPTO_BYTES);
 8007854:	f107 0214 	add.w	r2, r7, #20
 8007858:	2340      	movs	r3, #64	; 0x40
 800785a:	2120      	movs	r1, #32
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff f97b 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
}
 8007862:	bf00      	nop
 8007864:	3758      	adds	r7, #88	; 0x58
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <kex_ake_initA>:

void kex_ake_initA(uint8_t *send, uint8_t *tk, uint8_t *sk, const uint8_t *pkb)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	603b      	str	r3, [r7, #0]
  crypto_kem_keypair(send, sk);
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fe9d 	bl	80075ba <pqcrystals_kyber512_ref_keypair>
  crypto_kem_enc(send+CRYPTO_PUBLICKEYBYTES, tk, pkb);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff fec7 	bl	800761e <pqcrystals_kyber512_ref_enc>
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <kex_ake_sharedB>:

void kex_ake_sharedB(uint8_t *send, uint8_t *k, const uint8_t* recv, const uint8_t *skb, const uint8_t *pka)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b09c      	sub	sp, #112	; 0x70
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  uint8_t buf[3*CRYPTO_BYTES];
  crypto_kem_enc(send, buf, recv);
 80078a6:	f107 0310 	add.w	r3, r7, #16
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	4619      	mov	r1, r3
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff feb5 	bl	800761e <pqcrystals_kyber512_ref_enc>
  crypto_kem_enc(send+CRYPTO_CIPHERTEXTBYTES, buf+CRYPTO_BYTES, pka);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 7040 	add.w	r0, r3, #768	; 0x300
 80078ba:	f107 0310 	add.w	r3, r7, #16
 80078be:	3320      	adds	r3, #32
 80078c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7ff feab 	bl	800761e <pqcrystals_kyber512_ref_enc>
  crypto_kem_dec(buf+2*CRYPTO_BYTES, recv+CRYPTO_PUBLICKEYBYTES, skb);
 80078c8:	f107 0310 	add.w	r3, r7, #16
 80078cc:	3340      	adds	r3, #64	; 0x40
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f502 7148 	add.w	r1, r2, #800	; 0x320
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fee4 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  kdf(k, buf, 3*CRYPTO_BYTES);
 80078dc:	f107 0210 	add.w	r2, r7, #16
 80078e0:	2360      	movs	r3, #96	; 0x60
 80078e2:	2120      	movs	r1, #32
 80078e4:	68b8      	ldr	r0, [r7, #8]
 80078e6:	f7ff f937 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
}
 80078ea:	bf00      	nop
 80078ec:	3770      	adds	r7, #112	; 0x70
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <kex_ake_sharedA>:

void kex_ake_sharedA(uint8_t *k, const uint8_t *recv, const uint8_t *tk, const uint8_t *sk, const uint8_t *ska)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b09e      	sub	sp, #120	; 0x78
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	603b      	str	r3, [r7, #0]
  unsigned int i;
  uint8_t buf[3*CRYPTO_BYTES];
  crypto_kem_dec(buf, recv, sk);
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fecb 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  crypto_kem_dec(buf+CRYPTO_BYTES, recv+CRYPTO_CIPHERTEXTBYTES, ska);
 800790e:	f107 0314 	add.w	r3, r7, #20
 8007912:	3320      	adds	r3, #32
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	f502 7140 	add.w	r1, r2, #768	; 0x300
 800791a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fec0 	bl	80076a4 <pqcrystals_kyber512_ref_dec>
  for(i=0;i<CRYPTO_BYTES;i++)
 8007924:	2300      	movs	r3, #0
 8007926:	677b      	str	r3, [r7, #116]	; 0x74
 8007928:	e00d      	b.n	8007946 <kex_ake_sharedA+0x54>
    buf[i+2*CRYPTO_BYTES] = tk[i];
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792e:	441a      	add	r2, r3
 8007930:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007932:	3340      	adds	r3, #64	; 0x40
 8007934:	7812      	ldrb	r2, [r2, #0]
 8007936:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800793a:	440b      	add	r3, r1
 800793c:	f803 2c64 	strb.w	r2, [r3, #-100]
  for(i=0;i<CRYPTO_BYTES;i++)
 8007940:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007942:	3301      	adds	r3, #1
 8007944:	677b      	str	r3, [r7, #116]	; 0x74
 8007946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007948:	2b1f      	cmp	r3, #31
 800794a:	d9ee      	bls.n	800792a <kex_ake_sharedA+0x38>
  kdf(k, buf, 3*CRYPTO_BYTES);
 800794c:	f107 0214 	add.w	r2, r7, #20
 8007950:	2360      	movs	r3, #96	; 0x60
 8007952:	2120      	movs	r1, #32
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff f8ff 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
}
 800795a:	bf00      	nop
 800795c:	3778      	adds	r7, #120	; 0x78
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <fqmul>:
* Arguments:   - int16_t a: first factor
*              - int16_t b: second factor
*
* Returns 16-bit integer congruent to a*b*R^{-1} mod q
**************************************************/
static int16_t fqmul(int16_t a, int16_t b) {
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	4603      	mov	r3, r0
 800796a:	460a      	mov	r2, r1
 800796c:	80fb      	strh	r3, [r7, #6]
 800796e:	4613      	mov	r3, r2
 8007970:	80bb      	strh	r3, [r7, #4]
  return montgomery_reduce((int32_t)a*b);
 8007972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007976:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800797a:	fb02 f303 	mul.w	r3, r2, r3
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fecc 	bl	800871c <pqcrystals_kyber512_ref_montgomery_reduce>
 8007984:	4603      	mov	r3, r0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <pqcrystals_kyber512_ref_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  unsigned int len, start, j, k;
  int16_t t, zeta;

  k = 1;
 8007998:	2301      	movs	r3, #1
 800799a:	613b      	str	r3, [r7, #16]
  for(len = 128; len >= 2; len >>= 1) {
 800799c:	2380      	movs	r3, #128	; 0x80
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e051      	b.n	8007a46 <pqcrystals_kyber512_ref_ntt+0xb6>
    for(start = 0; start < 256; start = j + len) {
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	e048      	b.n	8007a3a <pqcrystals_kyber512_ref_ntt+0xaa>
      zeta = zetas[k++];
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	613a      	str	r2, [r7, #16]
 80079ae:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <pqcrystals_kyber512_ref_ntt+0xc8>)
 80079b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b4:	81fb      	strh	r3, [r7, #14]
      for(j = start; j < start + len; j++) {
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e034      	b.n	8007a26 <pqcrystals_kyber512_ref_ntt+0x96>
        t = fqmul(zeta, r[j + len]);
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	4413      	add	r3, r2
 80079c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80079cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ffc5 	bl	8007962 <fqmul>
 80079d8:	4603      	mov	r3, r0
 80079da:	81bb      	strh	r3, [r7, #12]
        r[j + len] = r[j] - t;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	89bb      	ldrh	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	b299      	uxth	r1, r3
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	b20a      	sxth	r2, r1
 80079fe:	801a      	strh	r2, [r3, #0]
        r[j] = r[j] + t;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	89bb      	ldrh	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	b299      	uxth	r1, r3
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	b20a      	sxth	r2, r1
 8007a1e:	801a      	strh	r2, [r3, #0]
      for(j = start; j < start + len; j++) {
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	3301      	adds	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d3c4      	bcc.n	80079bc <pqcrystals_kyber512_ref_ntt+0x2c>
    for(start = 0; start < 256; start = j + len) {
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	2bff      	cmp	r3, #255	; 0xff
 8007a3e:	d9b3      	bls.n	80079a8 <pqcrystals_kyber512_ref_ntt+0x18>
  for(len = 128; len >= 2; len >>= 1) {
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d8aa      	bhi.n	80079a2 <pqcrystals_kyber512_ref_ntt+0x12>
      }
    }
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	0800b410 	.word	0x0800b410

08007a5c <pqcrystals_kyber512_ref_invntt>:
*              multiplication by Montgomery factor 2^16.
*              Input is in bitreversed order, output is in standard order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void invntt(int16_t r[256]) {
 8007a5c:	b590      	push	{r4, r7, lr}
 8007a5e:	b089      	sub	sp, #36	; 0x24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  unsigned int start, len, j, k;
  int16_t t, zeta;
  const int16_t f = 1441; // mont^2/128
 8007a64:	f240 53a1 	movw	r3, #1441	; 0x5a1
 8007a68:	81fb      	strh	r3, [r7, #14]

  k = 127;
 8007a6a:	237f      	movs	r3, #127	; 0x7f
 8007a6c:	613b      	str	r3, [r7, #16]
  for(len = 2; len <= 128; len <<= 1) {
 8007a6e:	2302      	movs	r3, #2
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e064      	b.n	8007b3e <pqcrystals_kyber512_ref_invntt+0xe2>
    for(start = 0; start < 256; start = j + len) {
 8007a74:	2300      	movs	r3, #0
 8007a76:	61fb      	str	r3, [r7, #28]
 8007a78:	e05b      	b.n	8007b32 <pqcrystals_kyber512_ref_invntt+0xd6>
      zeta = zetas[k--];
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	1e5a      	subs	r2, r3, #1
 8007a7e:	613a      	str	r2, [r7, #16]
 8007a80:	4a40      	ldr	r2, [pc, #256]	; (8007b84 <pqcrystals_kyber512_ref_invntt+0x128>)
 8007a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a86:	81bb      	strh	r3, [r7, #12]
      for(j = start; j < start + len; j++) {
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	617b      	str	r3, [r7, #20]
 8007a8c:	e047      	b.n	8007b1e <pqcrystals_kyber512_ref_invntt+0xc2>
        t = r[j];
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	817b      	strh	r3, [r7, #10]
        r[j] = barrett_reduce(t + r[j + len]);
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	897b      	ldrh	r3, [r7, #10]
 8007aae:	4413      	add	r3, r2
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b219      	sxth	r1, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	18d4      	adds	r4, r2, r3
 8007abc:	4608      	mov	r0, r1
 8007abe:	f000 fe56 	bl	800876e <pqcrystals_kyber512_ref_barrett_reduce>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	8023      	strh	r3, [r4, #0]
        r[j + len] = r[j + len] - t;
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	4413      	add	r3, r2
 8007acc:	005b      	lsls	r3, r3, #1
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	897b      	ldrh	r3, [r7, #10]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	b299      	uxth	r1, r3
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	4413      	add	r3, r2
 8007aea:	b20a      	sxth	r2, r1
 8007aec:	801a      	strh	r2, [r3, #0]
        r[j + len] = fqmul(zeta, r[j + len]);
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	4413      	add	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	4413      	add	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	18d4      	adds	r4, r2, r3
 8007b0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ff27 	bl	8007962 <fqmul>
 8007b14:	4603      	mov	r3, r0
 8007b16:	8023      	strh	r3, [r4, #0]
      for(j = start; j < start + len; j++) {
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	4413      	add	r3, r2
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d3b1      	bcc.n	8007a8e <pqcrystals_kyber512_ref_invntt+0x32>
    for(start = 0; start < 256; start = j + len) {
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	4413      	add	r3, r2
 8007b30:	61fb      	str	r3, [r7, #28]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2bff      	cmp	r3, #255	; 0xff
 8007b36:	d9a0      	bls.n	8007a7a <pqcrystals_kyber512_ref_invntt+0x1e>
  for(len = 2; len <= 128; len <<= 1) {
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d997      	bls.n	8007a74 <pqcrystals_kyber512_ref_invntt+0x18>
      }
    }
  }

  for(j = 0; j < 256; j++)
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	e013      	b.n	8007b72 <pqcrystals_kyber512_ref_invntt+0x116>
    r[j] = fqmul(r[j], f);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	4413      	add	r3, r2
 8007b52:	f9b3 0000 	ldrsh.w	r0, [r3]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	18d4      	adds	r4, r2, r3
 8007b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b62:	4619      	mov	r1, r3
 8007b64:	f7ff fefd 	bl	8007962 <fqmul>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	8023      	strh	r3, [r4, #0]
  for(j = 0; j < 256; j++)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2bff      	cmp	r3, #255	; 0xff
 8007b76:	d9e8      	bls.n	8007b4a <pqcrystals_kyber512_ref_invntt+0xee>
}
 8007b78:	bf00      	nop
 8007b7a:	bf00      	nop
 8007b7c:	3724      	adds	r7, #36	; 0x24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd90      	pop	{r4, r7, pc}
 8007b82:	bf00      	nop
 8007b84:	0800b410 	.word	0x0800b410

08007b88 <pqcrystals_kyber512_ref_basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	807b      	strh	r3, [r7, #2]
  r[0]  = fqmul(a[1], b[1]);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	3302      	adds	r3, #2
 8007b9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7ff feda 	bl	8007962 <fqmul>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	801a      	strh	r2, [r3, #0]
  r[0]  = fqmul(r[0], zeta);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bbc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff fecd 	bl	8007962 <fqmul>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	801a      	strh	r2, [r3, #0]
  r[0] += fqmul(a[0], b[0]);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7ff febf 	bl	8007962 <fqmul>
 8007be4:	4603      	mov	r3, r0
 8007be6:	4619      	mov	r1, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	b28b      	uxth	r3, r1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	b21a      	sxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	801a      	strh	r2, [r3, #0]
  r[1]  = fqmul(a[0], b[1]);
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3302      	adds	r3, #2
 8007c06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	1c9c      	adds	r4, r3, #2
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7ff fea7 	bl	8007962 <fqmul>
 8007c14:	4603      	mov	r3, r0
 8007c16:	8023      	strh	r3, [r4, #0]
  r[1] += fqmul(a[1], b[0]);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	3302      	adds	r3, #2
 8007c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f7ff fe9a 	bl	8007962 <fqmul>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4619      	mov	r1, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3302      	adds	r3, #2
 8007c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	b28b      	uxth	r3, r1
 8007c3e:	4413      	add	r3, r2
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3302      	adds	r3, #2
 8007c46:	b212      	sxth	r2, r2
 8007c48:	801a      	strh	r2, [r3, #0]
}
 8007c4a:	bf00      	nop
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd90      	pop	{r4, r7, pc}
	...

08007c54 <pqcrystals_kyber512_ref_poly_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (of length KYBER_POLYCOMPRESSEDBYTES)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_compress(uint8_t r[KYBER_POLYCOMPRESSEDBYTES], const poly *a)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b089      	sub	sp, #36	; 0x24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  int16_t u;
  uint8_t t[8];

#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/8;i++) {
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	e063      	b.n	8007d2c <pqcrystals_kyber512_ref_poly_compress+0xd8>
    for(j=0;j<8;j++) {
 8007c64:	2300      	movs	r3, #0
 8007c66:	61bb      	str	r3, [r7, #24]
 8007c68:	e02c      	b.n	8007cc4 <pqcrystals_kyber512_ref_poly_compress+0x70>
      // map to positive standard representatives
      u  = a->coeffs[8*i+j];
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	00da      	lsls	r2, r3, #3
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	441a      	add	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007c78:	82fb      	strh	r3, [r7, #22]
      u += (u >> 15) & KYBER_Q;
 8007c7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007c7e:	13db      	asrs	r3, r3, #15
 8007c80:	b21b      	sxth	r3, r3
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	f640 5301 	movw	r3, #3329	; 0xd01
 8007c88:	4013      	ands	r3, r2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	8afb      	ldrh	r3, [r7, #22]
 8007c8e:	4413      	add	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	82fb      	strh	r3, [r7, #22]
      t[j] = ((((uint16_t)u << 4) + KYBER_Q/2)/KYBER_Q) & 15;
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8007c9c:	4a28      	ldr	r2, [pc, #160]	; (8007d40 <pqcrystals_kyber512_ref_poly_compress+0xec>)
 8007c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8007ca2:	441a      	add	r2, r3
 8007ca4:	12d2      	asrs	r2, r2, #11
 8007ca6:	17db      	asrs	r3, r3, #31
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	b2d9      	uxtb	r1, r3
 8007cb2:	f107 020c 	add.w	r2, r7, #12
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	4413      	add	r3, r2
 8007cba:	460a      	mov	r2, r1
 8007cbc:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b07      	cmp	r3, #7
 8007cc8:	d9cf      	bls.n	8007c6a <pqcrystals_kyber512_ref_poly_compress+0x16>
    }

    r[0] = t[0] | (t[1] << 4);
 8007cca:	7b3b      	ldrb	r3, [r7, #12]
 8007ccc:	b25a      	sxtb	r2, r3
 8007cce:	7b7b      	ldrb	r3, [r7, #13]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	b25b      	sxtb	r3, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	b25b      	sxtb	r3, r3
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	701a      	strb	r2, [r3, #0]
    r[1] = t[2] | (t[3] << 4);
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	b25a      	sxtb	r2, r3
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	b25b      	sxtb	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b25a      	sxtb	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]
    r[2] = t[4] | (t[5] << 4);
 8007cf4:	7c3b      	ldrb	r3, [r7, #16]
 8007cf6:	b25a      	sxtb	r2, r3
 8007cf8:	7c7b      	ldrb	r3, [r7, #17]
 8007cfa:	011b      	lsls	r3, r3, #4
 8007cfc:	b25b      	sxtb	r3, r3
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	b25a      	sxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3302      	adds	r3, #2
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	701a      	strb	r2, [r3, #0]
    r[3] = t[6] | (t[7] << 4);
 8007d0a:	7cbb      	ldrb	r3, [r7, #18]
 8007d0c:	b25a      	sxtb	r2, r3
 8007d0e:	7cfb      	ldrb	r3, [r7, #19]
 8007d10:	011b      	lsls	r3, r3, #4
 8007d12:	b25b      	sxtb	r3, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	b25a      	sxtb	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3303      	adds	r3, #3
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
    r += 4;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	607b      	str	r3, [r7, #4]
  for(i=0;i<KYBER_N/8;i++) {
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	2b1f      	cmp	r3, #31
 8007d30:	d998      	bls.n	8007c64 <pqcrystals_kyber512_ref_poly_compress+0x10>
    r += 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	3724      	adds	r7, #36	; 0x24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	9d7dbb41 	.word	0x9d7dbb41

08007d44 <pqcrystals_kyber512_ref_poly_decompress>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYCOMPRESSEDBYTES bytes)
**************************************************/
void poly_decompress(poly *r, const uint8_t a[KYBER_POLYCOMPRESSEDBYTES])
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  unsigned int i;

#if (KYBER_POLYCOMPRESSEDBYTES == 128)
  for(i=0;i<KYBER_N/2;i++) {
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	e027      	b.n	8007da4 <pqcrystals_kyber512_ref_poly_decompress+0x60>
    r->coeffs[2*i+0] = (((uint16_t)(a[0] & 15)*KYBER_Q) + 8) >> 4;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 030f 	and.w	r3, r3, #15
 8007d5c:	f640 5201 	movw	r2, #3329	; 0xd01
 8007d60:	fb02 f303 	mul.w	r3, r2, r3
 8007d64:	3308      	adds	r3, #8
 8007d66:	1119      	asrs	r1, r3, #4
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	005a      	lsls	r2, r3, #1
 8007d6c:	b209      	sxth	r1, r1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = (((uint16_t)(a[0] >> 4)*KYBER_Q) + 8) >> 4;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f640 5301 	movw	r3, #3329	; 0xd01
 8007d82:	fb03 f302 	mul.w	r3, r3, r2
 8007d86:	3308      	adds	r3, #8
 8007d88:	1119      	asrs	r1, r3, #4
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	b209      	sxth	r1, r1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    a += 1;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	603b      	str	r3, [r7, #0]
  for(i=0;i<KYBER_N/2;i++) {
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b7f      	cmp	r3, #127	; 0x7f
 8007da8:	d9d4      	bls.n	8007d54 <pqcrystals_kyber512_ref_poly_decompress+0x10>
      r->coeffs[8*i+j] = ((uint32_t)(t[j] & 31)*KYBER_Q + 16) >> 5;
  }
#else
#error "KYBER_POLYCOMPRESSEDBYTES needs to be in {128, 160}"
#endif
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <pqcrystals_kyber512_ref_poly_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYBYTES bytes)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  unsigned int i;
  uint16_t t0, t1;

  for(i=0;i<KYBER_N/2;i++) {
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60fb      	str	r3, [r7, #12]
 8007dc6:	e04e      	b.n	8007e66 <pqcrystals_kyber512_ref_poly_tobytes+0xae>
    // map to positive standard representatives
    t0  = a->coeffs[2*i];
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	005a      	lsls	r2, r3, #1
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007dd2:	817b      	strh	r3, [r7, #10]
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 8007dd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007dd8:	13db      	asrs	r3, r3, #15
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	f640 5301 	movw	r3, #3329	; 0xd01
 8007de2:	4013      	ands	r3, r2
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	897b      	ldrh	r3, [r7, #10]
 8007de8:	4413      	add	r3, r2
 8007dea:	817b      	strh	r3, [r7, #10]
    t1 = a->coeffs[2*i+1];
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007df8:	813b      	strh	r3, [r7, #8]
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 8007dfa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007dfe:	13db      	asrs	r3, r3, #15
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	f640 5301 	movw	r3, #3329	; 0xd01
 8007e08:	4013      	ands	r3, r2
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	4413      	add	r3, r2
 8007e10:	813b      	strh	r3, [r7, #8]
    r[3*i+0] = (t0 >> 0);
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	897a      	ldrh	r2, [r7, #10]
 8007e20:	b2d2      	uxtb	r2, r2
 8007e22:	701a      	strb	r2, [r3, #0]
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 8007e24:	897b      	ldrh	r3, [r7, #10]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	b25a      	sxtb	r2, r3
 8007e2c:	893b      	ldrh	r3, [r7, #8]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	b25b      	sxtb	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b259      	sxtb	r1, r3
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3301      	adds	r3, #1
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	b2ca      	uxtb	r2, r1
 8007e46:	701a      	strb	r2, [r3, #0]
    r[3*i+2] = (t1 >> 4);
 8007e48:	893b      	ldrh	r3, [r7, #8]
 8007e4a:	091b      	lsrs	r3, r3, #4
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	4413      	add	r3, r2
 8007e56:	3302      	adds	r3, #2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	b2ca      	uxtb	r2, r1
 8007e5e:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_N/2;i++) {
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6a:	d9ad      	bls.n	8007dc8 <pqcrystals_kyber512_ref_poly_tobytes+0x10>
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <pqcrystals_kyber512_ref_poly_frombytes>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e03e      	b.n	8007f08 <pqcrystals_kyber512_ref_poly_frombytes+0x8e>
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	4413      	add	r3, r2
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	b219      	sxth	r1, r3
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	b21b      	sxth	r3, r3
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	0052      	lsls	r2, r2, #1
 8007eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eba:	b219      	sxth	r1, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	4413      	add	r3, r2
 8007eca:	3301      	adds	r3, #1
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4413      	add	r3, r2
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	091b      	lsrs	r3, r3, #4
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	b219      	sxth	r1, r3
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4613      	mov	r3, r2
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	4413      	add	r3, r2
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	b21b      	sxth	r3, r3
 8007eec:	430b      	orrs	r3, r1
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	0052      	lsls	r2, r2, #1
 8007ef4:	3201      	adds	r2, #1
 8007ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007efa:	b219      	sxth	r1, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N/2;i++) {
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3301      	adds	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f0c:	d9bd      	bls.n	8007e8a <pqcrystals_kyber512_ref_poly_frombytes+0x10>
  }
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <pqcrystals_kyber512_ref_poly_frommsg>:
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *msg: pointer to input message
**************************************************/
void poly_frommsg(poly *r, const uint8_t msg[KYBER_INDCPA_MSGBYTES])
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]

#if (KYBER_INDCPA_MSGBYTES != KYBER_N/8)
#error "KYBER_INDCPA_MSGBYTES must be equal to KYBER_N/8 bytes!"
#endif

  for(i=0;i<KYBER_N/8;i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e027      	b.n	8007f7c <pqcrystals_kyber512_ref_poly_frommsg+0x60>
    for(j=0;j<8;j++) {
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	e01e      	b.n	8007f70 <pqcrystals_kyber512_ref_poly_frommsg+0x54>
      mask = -(int16_t)((msg[i] >> j)&1);
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	4413      	add	r3, r2
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	fa42 f303 	asr.w	r3, r2, r3
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	425b      	negs	r3, r3
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	81fb      	strh	r3, [r7, #14]
      r->coeffs[8*i+j] = mask & ((KYBER_Q+1)/2);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	00da      	lsls	r2, r3, #3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	441a      	add	r2, r3
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
 8007f5e:	055b      	lsls	r3, r3, #21
 8007f60:	0d5b      	lsrs	r3, r3, #21
 8007f62:	b219      	sxth	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<8;j++) {
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b07      	cmp	r3, #7
 8007f74:	d9dd      	bls.n	8007f32 <pqcrystals_kyber512_ref_poly_frommsg+0x16>
  for(i=0;i<KYBER_N/8;i++) {
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	617b      	str	r3, [r7, #20]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b1f      	cmp	r3, #31
 8007f80:	d9d4      	bls.n	8007f2c <pqcrystals_kyber512_ref_poly_frommsg+0x10>
    }
  }
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <pqcrystals_kyber512_ref_poly_tomsg>:
*
* Arguments:   - uint8_t *msg: pointer to output message
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tomsg(uint8_t msg[KYBER_INDCPA_MSGBYTES], const poly *a)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  unsigned int i,j;
  uint16_t t;

  for(i=0;i<KYBER_N/8;i++) {
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
 8007f9e:	e044      	b.n	800802a <pqcrystals_kyber512_ref_poly_tomsg+0x9a>
    msg[i] = 0;
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8007faa:	2300      	movs	r3, #0
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	e036      	b.n	800801e <pqcrystals_kyber512_ref_poly_tomsg+0x8e>
      t  = a->coeffs[8*i+j];
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	00da      	lsls	r2, r3, #3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	441a      	add	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007fbe:	81fb      	strh	r3, [r7, #14]
      t += ((int16_t)t >> 15) & KYBER_Q;
 8007fc0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007fc4:	13db      	asrs	r3, r3, #15
 8007fc6:	b21b      	sxth	r3, r3
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	f640 5301 	movw	r3, #3329	; 0xd01
 8007fce:	4013      	ands	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	89fb      	ldrh	r3, [r7, #14]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	81fb      	strh	r3, [r7, #14]
      t  = (((t << 1) + KYBER_Q/2)/KYBER_Q) & 1;
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8007fe0:	4a17      	ldr	r2, [pc, #92]	; (8008040 <pqcrystals_kyber512_ref_poly_tomsg+0xb0>)
 8007fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8007fe6:	441a      	add	r2, r3
 8007fe8:	12d2      	asrs	r2, r2, #11
 8007fea:	17db      	asrs	r3, r3, #31
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	81fb      	strh	r3, [r7, #14]
      msg[i] |= t << j;
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b25a      	sxtb	r2, r3
 8008000:	89f9      	ldrh	r1, [r7, #14]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	fa01 f303 	lsl.w	r3, r1, r3
 8008008:	b25b      	sxtb	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	b259      	sxtb	r1, r3
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	4413      	add	r3, r2
 8008014:	b2ca      	uxtb	r2, r1
 8008016:	701a      	strb	r2, [r3, #0]
    for(j=0;j<8;j++) {
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	3301      	adds	r3, #1
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b07      	cmp	r3, #7
 8008022:	d9c5      	bls.n	8007fb0 <pqcrystals_kyber512_ref_poly_tomsg+0x20>
  for(i=0;i<KYBER_N/8;i++) {
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3301      	adds	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	2b1f      	cmp	r3, #31
 800802e:	d9b7      	bls.n	8007fa0 <pqcrystals_kyber512_ref_poly_tomsg+0x10>
    }
  }
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	9d7dbb41 	.word	0x9d7dbb41

08008044 <pqcrystals_kyber512_ref_poly_getnoise_eta1>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b0b4      	sub	sp, #208	; 0xd0
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[KYBER_ETA1*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	f107 0010 	add.w	r0, r7, #16
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	21c0      	movs	r1, #192	; 0xc0
 800805c:	f000 fd51 	bl	8008b02 <pqcrystals_kyber512_ref_kyber_shake256_prf>
  poly_cbd_eta1(r, buf);
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	4619      	mov	r1, r3
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7fb fb48 	bl	80036fc <pqcrystals_kyber512_ref_poly_cbd_eta1>
}
 800806c:	bf00      	nop
 800806e:	37d0      	adds	r7, #208	; 0xd0
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <pqcrystals_kyber512_ref_poly_getnoise_eta2>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta2(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b0a4      	sub	sp, #144	; 0x90
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]
  uint8_t buf[KYBER_ETA2*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 8008082:	79fb      	ldrb	r3, [r7, #7]
 8008084:	f107 0010 	add.w	r0, r7, #16
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	2180      	movs	r1, #128	; 0x80
 800808c:	f000 fd39 	bl	8008b02 <pqcrystals_kyber512_ref_kyber_shake256_prf>
  poly_cbd_eta2(r, buf);
 8008090:	f107 0310 	add.w	r3, r7, #16
 8008094:	4619      	mov	r1, r3
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7fb fb3d 	bl	8003716 <pqcrystals_kyber512_ref_poly_cbd_eta2>
}
 800809c:	bf00      	nop
 800809e:	3790      	adds	r7, #144	; 0x90
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <pqcrystals_kyber512_ref_poly_ntt>:
*              inputs assumed to be in normal order, output in bitreversed order
*
* Arguments:   - uint16_t *r: pointer to in/output polynomial
**************************************************/
void poly_ntt(poly *r)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  ntt(r->coeffs);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fc6e 	bl	8007990 <pqcrystals_kyber512_ref_ntt>
  poly_reduce(r);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f882 	bl	80081be <pqcrystals_kyber512_ref_poly_reduce>
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <pqcrystals_kyber512_ref_poly_invntt_tomont>:
*              inputs assumed to be in bitreversed order, output in normal order
*
* Arguments:   - uint16_t *a: pointer to in/output polynomial
**************************************************/
void poly_invntt_tomont(poly *r)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  invntt(r->coeffs);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fcc5 	bl	8007a5c <pqcrystals_kyber512_ref_invntt>
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <pqcrystals_kyber512_ref_poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
 80080e8:	2300      	movs	r3, #0
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	e035      	b.n	800815a <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x7e>
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	18d0      	adds	r0, r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	18d1      	adds	r1, r2, r3
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	441a      	add	r2, r3
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3340      	adds	r3, #64	; 0x40
 8008110:	4c16      	ldr	r4, [pc, #88]	; (800816c <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x90>)
 8008112:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8008116:	f7ff fd37 	bl	8007b88 <pqcrystals_kyber512_ref_basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	3302      	adds	r3, #2
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	18d0      	adds	r0, r2, r3
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	3302      	adds	r3, #2
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	18d1      	adds	r1, r2, r3
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	3302      	adds	r3, #2
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	441a      	add	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	3340      	adds	r3, #64	; 0x40
 8008142:	4c0a      	ldr	r4, [pc, #40]	; (800816c <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x90>)
 8008144:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8008148:	b29b      	uxth	r3, r3
 800814a:	425b      	negs	r3, r3
 800814c:	b29b      	uxth	r3, r3
 800814e:	b21b      	sxth	r3, r3
 8008150:	f7ff fd1a 	bl	8007b88 <pqcrystals_kyber512_ref_basemul>
  for(i=0;i<KYBER_N/4;i++) {
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	3301      	adds	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b3f      	cmp	r3, #63	; 0x3f
 800815e:	d9c6      	bls.n	80080ee <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x12>
  }
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	bd90      	pop	{r4, r7, pc}
 800816a:	bf00      	nop
 800816c:	0800b410 	.word	0x0800b410

08008170 <pqcrystals_kyber512_ref_poly_tomont>:
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_tomont(poly *r)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  unsigned int i;
  const int16_t f = (1ULL << 32) % KYBER_Q;
 8008178:	f240 5349 	movw	r3, #1353	; 0x549
 800817c:	817b      	strh	r3, [r7, #10]
  for(i=0;i<KYBER_N;i++)
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	e014      	b.n	80081ae <pqcrystals_kyber512_ref_poly_tomont+0x3e>
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800818c:	461a      	mov	r2, r3
 800818e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008192:	fb03 f302 	mul.w	r3, r3, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fac0 	bl	800871c <pqcrystals_kyber512_ref_montgomery_reduce>
 800819c:	4603      	mov	r3, r0
 800819e:	4619      	mov	r1, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2bff      	cmp	r3, #255	; 0xff
 80081b2:	d9e7      	bls.n	8008184 <pqcrystals_kyber512_ref_poly_tomont+0x14>
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <pqcrystals_kyber512_ref_poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e00f      	b.n	80081ec <pqcrystals_kyber512_ref_poly_reduce+0x2e>
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 faca 	bl	800876e <pqcrystals_kyber512_ref_barrett_reduce>
 80081da:	4603      	mov	r3, r0
 80081dc:	4619      	mov	r1, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3301      	adds	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2bff      	cmp	r3, #255	; 0xff
 80081f0:	d9ec      	bls.n	80081cc <pqcrystals_kyber512_ref_poly_reduce+0xe>
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <pqcrystals_kyber512_ref_poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e013      	b.n	8008236 <pqcrystals_kyber512_ref_poly_add+0x3a>
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008216:	b29a      	uxth	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6979      	ldr	r1, [r7, #20]
 800821c:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8008220:	b29b      	uxth	r3, r3
 8008222:	4413      	add	r3, r2
 8008224:	b29b      	uxth	r3, r3
 8008226:	b219      	sxth	r1, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3301      	adds	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	2bff      	cmp	r3, #255	; 0xff
 800823a:	d9e8      	bls.n	800820e <pqcrystals_kyber512_ref_poly_add+0x12>
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <pqcrystals_kyber512_ref_poly_sub>:
* Arguments: - poly *r:       pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_sub(poly *r, const poly *a, const poly *b)
{
 800824a:	b480      	push	{r7}
 800824c:	b087      	sub	sp, #28
 800824e:	af00      	add	r7, sp, #0
 8008250:	60f8      	str	r0, [r7, #12]
 8008252:	60b9      	str	r1, [r7, #8]
 8008254:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e013      	b.n	8008284 <pqcrystals_kyber512_ref_poly_sub+0x3a>
    r->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6979      	ldr	r1, [r7, #20]
 800826a:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 800826e:	b29b      	uxth	r3, r3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	b29b      	uxth	r3, r3
 8008274:	b219      	sxth	r1, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	3301      	adds	r3, #1
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2bff      	cmp	r3, #255	; 0xff
 8008288:	d9e8      	bls.n	800825c <pqcrystals_kyber512_ref_poly_sub+0x12>
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <pqcrystals_kyber512_ref_polyvec_compress>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECCOMPRESSEDBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_compress(uint8_t r[KYBER_POLYVECCOMPRESSEDBYTES], const polyvec *a)
{
 8008298:	b480      	push	{r7}
 800829a:	b089      	sub	sp, #36	; 0x24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
      r += 11;
    }
  }
#elif (KYBER_POLYVECCOMPRESSEDBYTES == (KYBER_K * 320))
  uint16_t t[4];
  for(i=0;i<KYBER_K;i++) {
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e097      	b.n	80083d8 <pqcrystals_kyber512_ref_polyvec_compress+0x140>
    for(j=0;j<KYBER_N/4;j++) {
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
 80082ac:	e08d      	b.n	80083ca <pqcrystals_kyber512_ref_polyvec_compress+0x132>
      for(k=0;k<4;k++) {
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e04f      	b.n	8008354 <pqcrystals_kyber512_ref_polyvec_compress+0xbc>
        t[k]  = a->vec[i].coeffs[4*j+k];
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	009a      	lsls	r2, r3, #2
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	441a      	add	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	69f9      	ldr	r1, [r7, #28]
 80082c0:	0209      	lsls	r1, r1, #8
 80082c2:	440a      	add	r2, r1
 80082c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	f107 0120 	add.w	r1, r7, #32
 80082d2:	440b      	add	r3, r1
 80082d4:	f823 2c14 	strh.w	r2, [r3, #-20]
        t[k] += ((int16_t)t[k] >> 15) & KYBER_Q;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	f107 0220 	add.w	r2, r7, #32
 80082e0:	4413      	add	r3, r2
 80082e2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	f107 0120 	add.w	r1, r7, #32
 80082ee:	440b      	add	r3, r1
 80082f0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	13db      	asrs	r3, r3, #15
 80082f8:	b21b      	sxth	r3, r3
 80082fa:	b299      	uxth	r1, r3
 80082fc:	f640 5301 	movw	r3, #3329	; 0xd01
 8008300:	400b      	ands	r3, r1
 8008302:	b29b      	uxth	r3, r3
 8008304:	4413      	add	r3, r2
 8008306:	b29a      	uxth	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	f107 0120 	add.w	r1, r7, #32
 8008310:	440b      	add	r3, r1
 8008312:	f823 2c14 	strh.w	r2, [r3, #-20]
        t[k]  = ((((uint32_t)t[k] << 10) + KYBER_Q/2)/ KYBER_Q) & 0x3ff;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	f107 0220 	add.w	r2, r7, #32
 800831e:	4413      	add	r3, r2
 8008320:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8008324:	029b      	lsls	r3, r3, #10
 8008326:	f503 62d0 	add.w	r2, r3, #1664	; 0x680
 800832a:	4b31      	ldr	r3, [pc, #196]	; (80083f0 <pqcrystals_kyber512_ref_polyvec_compress+0x158>)
 800832c:	fba3 1302 	umull	r1, r3, r3, r2
 8008330:	1ad2      	subs	r2, r2, r3
 8008332:	0852      	lsrs	r2, r2, #1
 8008334:	4413      	add	r3, r2
 8008336:	0adb      	lsrs	r3, r3, #11
 8008338:	b29b      	uxth	r3, r3
 800833a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800833e:	b29a      	uxth	r2, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	f107 0120 	add.w	r1, r7, #32
 8008348:	440b      	add	r3, r1
 800834a:	f823 2c14 	strh.w	r2, [r3, #-20]
      for(k=0;k<4;k++) {
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	3301      	adds	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b03      	cmp	r3, #3
 8008358:	d9ac      	bls.n	80082b4 <pqcrystals_kyber512_ref_polyvec_compress+0x1c>
      }

      r[0] = (t[0] >> 0);
 800835a:	89bb      	ldrh	r3, [r7, #12]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	701a      	strb	r2, [r3, #0]
      r[1] = (t[0] >> 8) | (t[1] << 2);
 8008362:	89bb      	ldrh	r3, [r7, #12]
 8008364:	0a1b      	lsrs	r3, r3, #8
 8008366:	b29b      	uxth	r3, r3
 8008368:	b25a      	sxtb	r2, r3
 800836a:	89fb      	ldrh	r3, [r7, #14]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	b25b      	sxtb	r3, r3
 8008370:	4313      	orrs	r3, r2
 8008372:	b25a      	sxtb	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3301      	adds	r3, #1
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]
      r[2] = (t[1] >> 6) | (t[2] << 4);
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	099b      	lsrs	r3, r3, #6
 8008380:	b29b      	uxth	r3, r3
 8008382:	b25a      	sxtb	r2, r3
 8008384:	8a3b      	ldrh	r3, [r7, #16]
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	b25b      	sxtb	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b25a      	sxtb	r2, r3
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3302      	adds	r3, #2
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
      r[3] = (t[2] >> 4) | (t[3] << 6);
 8008396:	8a3b      	ldrh	r3, [r7, #16]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	b29b      	uxth	r3, r3
 800839c:	b25a      	sxtb	r2, r3
 800839e:	8a7b      	ldrh	r3, [r7, #18]
 80083a0:	019b      	lsls	r3, r3, #6
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b25a      	sxtb	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3303      	adds	r3, #3
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]
      r[4] = (t[3] >> 2);
 80083b0:	8a7b      	ldrh	r3, [r7, #18]
 80083b2:	089b      	lsrs	r3, r3, #2
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	3304      	adds	r3, #4
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
      r += 5;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3305      	adds	r3, #5
 80083c2:	607b      	str	r3, [r7, #4]
    for(j=0;j<KYBER_N/4;j++) {
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	3301      	adds	r3, #1
 80083c8:	61bb      	str	r3, [r7, #24]
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b3f      	cmp	r3, #63	; 0x3f
 80083ce:	f67f af6e 	bls.w	80082ae <pqcrystals_kyber512_ref_polyvec_compress+0x16>
  for(i=0;i<KYBER_K;i++) {
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	3301      	adds	r3, #1
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	f67f af64 	bls.w	80082a8 <pqcrystals_kyber512_ref_polyvec_compress+0x10>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	3724      	adds	r7, #36	; 0x24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	3afb7681 	.word	0x3afb7681

080083f4 <pqcrystals_kyber512_ref_polyvec_decompress>:
* Arguments:   - polyvec *r:       pointer to output vector of polynomials
*              - const uint8_t *a: pointer to input byte array
*                                  (of length KYBER_POLYVECCOMPRESSEDBYTES)
**************************************************/
void polyvec_decompress(polyvec *r, const uint8_t a[KYBER_POLYVECCOMPRESSEDBYTES])
{
 80083f4:	b480      	push	{r7}
 80083f6:	b089      	sub	sp, #36	; 0x24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
        r->vec[i].coeffs[8*j+k] = ((uint32_t)(t[k] & 0x7FF)*KYBER_Q + 1024) >> 11;
    }
  }
#elif (KYBER_POLYVECCOMPRESSEDBYTES == (KYBER_K * 320))
  uint16_t t[4];
  for(i=0;i<KYBER_K;i++) {
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
 8008402:	e06c      	b.n	80084de <pqcrystals_kyber512_ref_polyvec_decompress+0xea>
    for(j=0;j<KYBER_N/4;j++) {
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	e063      	b.n	80084d2 <pqcrystals_kyber512_ref_polyvec_decompress+0xde>
      t[0] = (a[0] >> 0) | ((uint16_t)a[1] << 8);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	b21a      	sxth	r2, r3
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	3301      	adds	r3, #1
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	021b      	lsls	r3, r3, #8
 8008418:	b21b      	sxth	r3, r3
 800841a:	4313      	orrs	r3, r2
 800841c:	b21b      	sxth	r3, r3
 800841e:	b29b      	uxth	r3, r3
 8008420:	81bb      	strh	r3, [r7, #12]
      t[1] = (a[1] >> 2) | ((uint16_t)a[2] << 6);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	3301      	adds	r3, #1
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	089b      	lsrs	r3, r3, #2
 800842a:	b2db      	uxtb	r3, r3
 800842c:	b21a      	sxth	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	3302      	adds	r3, #2
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	019b      	lsls	r3, r3, #6
 8008436:	b21b      	sxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b21b      	sxth	r3, r3
 800843c:	b29b      	uxth	r3, r3
 800843e:	81fb      	strh	r3, [r7, #14]
      t[2] = (a[2] >> 4) | ((uint16_t)a[3] << 4);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	3302      	adds	r3, #2
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	091b      	lsrs	r3, r3, #4
 8008448:	b2db      	uxtb	r3, r3
 800844a:	b21a      	sxth	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	3303      	adds	r3, #3
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	b21b      	sxth	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b21b      	sxth	r3, r3
 800845a:	b29b      	uxth	r3, r3
 800845c:	823b      	strh	r3, [r7, #16]
      t[3] = (a[3] >> 6) | ((uint16_t)a[4] << 2);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	3303      	adds	r3, #3
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	099b      	lsrs	r3, r3, #6
 8008466:	b2db      	uxtb	r3, r3
 8008468:	b21a      	sxth	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	3304      	adds	r3, #4
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	b21b      	sxth	r3, r3
 8008474:	4313      	orrs	r3, r2
 8008476:	b21b      	sxth	r3, r3
 8008478:	b29b      	uxth	r3, r3
 800847a:	827b      	strh	r3, [r7, #18]
      a += 5;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	3305      	adds	r3, #5
 8008480:	603b      	str	r3, [r7, #0]

      for(k=0;k<4;k++)
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	e01e      	b.n	80084c6 <pqcrystals_kyber512_ref_polyvec_decompress+0xd2>
        r->vec[i].coeffs[4*j+k] = ((uint32_t)(t[k] & 0x3FF)*KYBER_Q + 512) >> 10;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	f107 0220 	add.w	r2, r7, #32
 8008490:	4413      	add	r3, r2
 8008492:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8008496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800849a:	f640 5201 	movw	r2, #3329	; 0xd01
 800849e:	fb02 f303 	mul.w	r3, r2, r3
 80084a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80084a6:	0a99      	lsrs	r1, r3, #10
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	009a      	lsls	r2, r3, #2
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	441a      	add	r2, r3
 80084b0:	b208      	sxth	r0, r1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69f9      	ldr	r1, [r7, #28]
 80084b6:	0209      	lsls	r1, r1, #8
 80084b8:	440a      	add	r2, r1
 80084ba:	4601      	mov	r1, r0
 80084bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
      for(k=0;k<4;k++)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	3301      	adds	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d9dd      	bls.n	8008488 <pqcrystals_kyber512_ref_polyvec_decompress+0x94>
    for(j=0;j<KYBER_N/4;j++) {
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3301      	adds	r3, #1
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b3f      	cmp	r3, #63	; 0x3f
 80084d6:	d998      	bls.n	800840a <pqcrystals_kyber512_ref_polyvec_decompress+0x16>
  for(i=0;i<KYBER_K;i++) {
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	3301      	adds	r3, #1
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d98f      	bls.n	8008404 <pqcrystals_kyber512_ref_polyvec_decompress+0x10>
    }
  }
#else
#error "KYBER_POLYVECCOMPRESSEDBYTES needs to be in {320*KYBER_K, 352*KYBER_K}"
#endif
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	3724      	adds	r7, #36	; 0x24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <pqcrystals_kyber512_ref_polyvec_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e011      	b.n	8008526 <pqcrystals_kyber512_ref_polyvec_tobytes+0x34>
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4613      	mov	r3, r2
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4413      	add	r3, r2
 800850a:	01db      	lsls	r3, r3, #7
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	1898      	adds	r0, r3, r2
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	025b      	lsls	r3, r3, #9
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4413      	add	r3, r2
 800851a:	4619      	mov	r1, r3
 800851c:	f7ff fc4c 	bl	8007db8 <pqcrystals_kyber512_ref_poly_tobytes>
  for(i=0;i<KYBER_K;i++)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d9ea      	bls.n	8008502 <pqcrystals_kyber512_ref_polyvec_tobytes+0x10>
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <pqcrystals_kyber512_ref_polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e011      	b.n	800856a <pqcrystals_kyber512_ref_polyvec_frombytes+0x34>
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	025b      	lsls	r3, r3, #9
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	18d0      	adds	r0, r2, r3
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4613      	mov	r3, r2
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	4413      	add	r3, r2
 8008556:	01db      	lsls	r3, r3, #7
 8008558:	461a      	mov	r2, r3
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	4413      	add	r3, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f7ff fc8b 	bl	8007e7a <pqcrystals_kyber512_ref_poly_frombytes>
  for(i=0;i<KYBER_K;i++)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d9ea      	bls.n	8008546 <pqcrystals_kyber512_ref_polyvec_frombytes+0x10>
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <pqcrystals_kyber512_ref_polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e009      	b.n	800859c <pqcrystals_kyber512_ref_polyvec_ntt+0x22>
    poly_ntt(&r->vec[i]);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	025b      	lsls	r3, r3, #9
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff fd87 	bl	80080a4 <pqcrystals_kyber512_ref_poly_ntt>
  for(i=0;i<KYBER_K;i++)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d9f2      	bls.n	8008588 <pqcrystals_kyber512_ref_polyvec_ntt+0xe>
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <pqcrystals_kyber512_ref_polyvec_invntt_tomont>:
*              and multiply by Montgomery factor 2^16
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_invntt_tomont(polyvec *r)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e009      	b.n	80085ce <pqcrystals_kyber512_ref_polyvec_invntt_tomont+0x22>
    poly_invntt_tomont(&r->vec[i]);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	025b      	lsls	r3, r3, #9
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fd7d 	bl	80080c2 <pqcrystals_kyber512_ref_poly_invntt_tomont>
  for(i=0;i<KYBER_K;i++)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3301      	adds	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d9f2      	bls.n	80085ba <pqcrystals_kyber512_ref_polyvec_invntt_tomont+0xe>
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	6018      	str	r0, [r3, #0]
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	6019      	str	r1, [r3, #0]
 80085f2:	1d3b      	adds	r3, r7, #4
 80085f4:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 80085f6:	f107 0308 	add.w	r3, r7, #8
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	f107 030c 	add.w	r3, r7, #12
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff fd69 	bl	80080dc <pqcrystals_kyber512_ref_poly_basemul_montgomery>
  for(i=1;i<KYBER_K;i++) {
 800860a:	2301      	movs	r3, #1
 800860c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008610:	e020      	b.n	8008654 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery+0x76>
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8008612:	f107 0208 	add.w	r2, r7, #8
 8008616:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800861a:	025b      	lsls	r3, r3, #9
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	18d1      	adds	r1, r2, r3
 8008620:	1d3a      	adds	r2, r7, #4
 8008622:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008626:	025b      	lsls	r3, r3, #9
 8008628:	6812      	ldr	r2, [r2, #0]
 800862a:	441a      	add	r2, r3
 800862c:	f107 0314 	add.w	r3, r7, #20
 8008630:	4618      	mov	r0, r3
 8008632:	f7ff fd53 	bl	80080dc <pqcrystals_kyber512_ref_poly_basemul_montgomery>
    poly_add(r, r, &t);
 8008636:	f107 0214 	add.w	r2, r7, #20
 800863a:	f107 010c 	add.w	r1, r7, #12
 800863e:	f107 030c 	add.w	r3, r7, #12
 8008642:	6809      	ldr	r1, [r1, #0]
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f7ff fdd9 	bl	80081fc <pqcrystals_kyber512_ref_poly_add>
  for(i=1;i<KYBER_K;i++) {
 800864a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800864e:	3301      	adds	r3, #1
 8008650:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8008654:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008658:	2b01      	cmp	r3, #1
 800865a:	d9da      	bls.n	8008612 <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery+0x34>
  }

  poly_reduce(r);
 800865c:	f107 030c 	add.w	r3, r7, #12
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f7ff fdac 	bl	80081be <pqcrystals_kyber512_ref_poly_reduce>
}
 8008666:	bf00      	nop
 8008668:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <pqcrystals_kyber512_ref_polyvec_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void polyvec_reduce(polyvec *r)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	e009      	b.n	8008692 <pqcrystals_kyber512_ref_polyvec_reduce+0x22>
    poly_reduce(&r->vec[i]);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	025b      	lsls	r3, r3, #9
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff fd99 	bl	80081be <pqcrystals_kyber512_ref_poly_reduce>
  for(i=0;i<KYBER_K;i++)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d9f2      	bls.n	800867e <pqcrystals_kyber512_ref_polyvec_reduce+0xe>
}
 8008698:	bf00      	nop
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <pqcrystals_kyber512_ref_polyvec_add>:
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	e011      	b.n	80086d8 <pqcrystals_kyber512_ref_polyvec_add+0x36>
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	025b      	lsls	r3, r3, #9
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	18d0      	adds	r0, r2, r3
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	025b      	lsls	r3, r3, #9
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	18d1      	adds	r1, r2, r3
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	025b      	lsls	r3, r3, #9
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	4413      	add	r3, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	f7ff fd95 	bl	80081fc <pqcrystals_kyber512_ref_poly_add>
  for(i=0;i<KYBER_K;i++)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	3301      	adds	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d9ea      	bls.n	80086b4 <pqcrystals_kyber512_ref_polyvec_add+0x12>
}
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <randombytes>:
    out += ret;
    outlen -= ret;
  }
}
#else
void randombytes(uint8_t *out, size_t outlen) {
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]

    out += ret;
    outlen -= ret;
  }
  */
  while(outlen > 0) {
 80086f2:	e00b      	b.n	800870c <randombytes+0x24>
    *out = (uint8_t)rand();
 80086f4:	f001 fcaa 	bl	800a04c <rand>
 80086f8:	4603      	mov	r3, r0
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	701a      	strb	r2, [r3, #0]
    out++;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	3301      	adds	r3, #1
 8008704:	607b      	str	r3, [r7, #4]
    outlen--;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3b01      	subs	r3, #1
 800870a:	603b      	str	r3, [r7, #0]
  while(outlen > 0) {
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1f0      	bne.n	80086f4 <randombytes+0xc>
  }
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <pqcrystals_kyber512_ref_montgomery_reduce>:
*                           has to be in {-q2^15,...,q2^15-1}
*
* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  int16_t t;

  t = (int16_t)a*QINV;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	b29b      	uxth	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	0052      	lsls	r2, r2, #1
 800872c:	441a      	add	r2, r3
 800872e:	4611      	mov	r1, r2
 8008730:	00c8      	lsls	r0, r1, #3
 8008732:	4611      	mov	r1, r2
 8008734:	4602      	mov	r2, r0
 8008736:	440a      	add	r2, r1
 8008738:	4611      	mov	r1, r2
 800873a:	00c8      	lsls	r0, r1, #3
 800873c:	4611      	mov	r1, r2
 800873e:	4602      	mov	r2, r0
 8008740:	440a      	add	r2, r1
 8008742:	0212      	lsls	r2, r2, #8
 8008744:	4413      	add	r3, r2
 8008746:	b29b      	uxth	r3, r3
 8008748:	81fb      	strh	r3, [r7, #14]
  t = (a - (int32_t)t*KYBER_Q) >> 16;
 800874a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800874e:	f46f 6250 	mvn.w	r2, #3328	; 0xd00
 8008752:	fb02 f203 	mul.w	r2, r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4413      	add	r3, r2
 800875a:	141b      	asrs	r3, r3, #16
 800875c:	81fb      	strh	r3, [r7, #14]
  return t;
 800875e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <pqcrystals_kyber512_ref_barrett_reduce>:
*
* Arguments:   - int16_t a: input integer to be reduced
*
* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
**************************************************/
int16_t barrett_reduce(int16_t a) {
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	4603      	mov	r3, r0
 8008776:	80fb      	strh	r3, [r7, #6]
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;
 8008778:	f644 63bf 	movw	r3, #20159	; 0x4ebf
 800877c:	81fb      	strh	r3, [r7, #14]

  t  = ((int32_t)v*a + (1<<25)) >> 26;
 800877e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008782:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800878e:	169b      	asrs	r3, r3, #26
 8008790:	81bb      	strh	r3, [r7, #12]
  t *= KYBER_Q;
 8008792:	89bb      	ldrh	r3, [r7, #12]
 8008794:	461a      	mov	r2, r3
 8008796:	0052      	lsls	r2, r2, #1
 8008798:	441a      	add	r2, r3
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	441a      	add	r2, r3
 800879e:	0212      	lsls	r2, r2, #8
 80087a0:	4413      	add	r3, r2
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	81bb      	strh	r3, [r7, #12]
  return a - t;
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	89bb      	ldrh	r3, [r7, #12]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	b21b      	sxth	r3, r3
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <cmp_uint64>:
#include <stdlib.h>
#include <stdio.h>
#include "cpucycles.h"
#include "speed_print.h"

static int cmp_uint64(const void *a, const void *b) {
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  if(*(uint64_t *)a < *(uint64_t *)b) return -1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	4299      	cmp	r1, r3
 80087d4:	bf08      	it	eq
 80087d6:	4290      	cmpeq	r0, r2
 80087d8:	d202      	bcs.n	80087e0 <cmp_uint64+0x24>
 80087da:	f04f 33ff 	mov.w	r3, #4294967295
 80087de:	e00c      	b.n	80087fa <cmp_uint64+0x3e>
  if(*(uint64_t *)a > *(uint64_t *)b) return 1;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ec:	4299      	cmp	r1, r3
 80087ee:	bf08      	it	eq
 80087f0:	4290      	cmpeq	r0, r2
 80087f2:	d201      	bcs.n	80087f8 <cmp_uint64+0x3c>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e000      	b.n	80087fa <cmp_uint64+0x3e>
  return 0;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <median>:

static uint64_t median(uint64_t *l, size_t llen) {
 8008808:	b5b0      	push	{r4, r5, r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  qsort(l,llen,sizeof(uint64_t),cmp_uint64);
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <median+0x74>)
 8008814:	2208      	movs	r2, #8
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f001 fac6 	bl	8009daa <qsort>

  if(llen%2) return l[llen/2];
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <median+0x30>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	4413      	add	r3, r2
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	e01b      	b.n	8008870 <median+0x68>
  else return (l[llen/2-1]+l[llen/2])/2;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	085b      	lsrs	r3, r3, #1
 800883c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008840:	3b01      	subs	r3, #1
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	4413      	add	r3, r2
 8008848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	4413      	add	r3, r2
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	1884      	adds	r4, r0, r2
 800885c:	eb41 0503 	adc.w	r5, r1, r3
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	0862      	lsrs	r2, r4, #1
 800886a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800886e:	086b      	lsrs	r3, r5, #1
}
 8008870:	4610      	mov	r0, r2
 8008872:	4619      	mov	r1, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bdb0      	pop	{r4, r5, r7, pc}
 800887a:	bf00      	nop
 800887c:	080087bd 	.word	0x080087bd

08008880 <average>:

static uint64_t average(uint64_t *t, size_t tlen) {
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  size_t i;
  uint64_t acc=0;
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	f04f 0300 	mov.w	r3, #0
 8008892:	e9c7 2302 	strd	r2, r3, [r7, #8]

  for(i=0;i<tlen;i++)
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e00f      	b.n	80088bc <average+0x3c>
    acc += t[i];
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4413      	add	r3, r2
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088ac:	1884      	adds	r4, r0, r2
 80088ae:	eb41 0503 	adc.w	r5, r1, r3
 80088b2:	e9c7 4502 	strd	r4, r5, [r7, #8]
  for(i=0;i<tlen;i++)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	3301      	adds	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d3eb      	bcc.n	800889c <average+0x1c>

  return acc/tlen;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088d0:	f7f7 fcce 	bl	8000270 <__aeabi_uldivmod>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
}
 80088d8:	4610      	mov	r0, r2
 80088da:	4619      	mov	r1, r3
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bdb0      	pop	{r4, r5, r7, pc}

080088e2 <min>:

static uint64_t min(uint64_t *t, size_t tlen){
 80088e2:	b480      	push	{r7}
 80088e4:	b087      	sub	sp, #28
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
	size_t i;
	uint64_t nr=-1;
 80088ec:	f04f 32ff 	mov.w	r2, #4294967295
 80088f0:	f04f 33ff 	mov.w	r3, #4294967295
 80088f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<tlen;i++){
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	e016      	b.n	800892c <min+0x4a>
		if(t[i] < nr)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	00db      	lsls	r3, r3, #3
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	e9d3 0100 	ldrd	r0, r1, [r3]
 800890a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800890e:	4299      	cmp	r1, r3
 8008910:	bf08      	it	eq
 8008912:	4290      	cmpeq	r0, r2
 8008914:	d207      	bcs.n	8008926 <min+0x44>
			nr = t[i];
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4413      	add	r3, r2
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<tlen;i++){
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	3301      	adds	r3, #1
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	429a      	cmp	r2, r3
 8008932:	d3e4      	bcc.n	80088fe <min+0x1c>
	}
	return nr;
 8008934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <max>:

static uint64_t max(uint64_t *t, size_t tlen){
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
	size_t i;
	uint64_t nr=0;
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<tlen;i++){
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e016      	b.n	8008990 <max+0x4a>
		if(t[i] > nr)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008972:	4299      	cmp	r1, r3
 8008974:	bf08      	it	eq
 8008976:	4290      	cmpeq	r0, r2
 8008978:	d207      	bcs.n	800898a <max+0x44>
			nr = t[i];
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	4413      	add	r3, r2
 8008982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008986:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(i=0;i<tlen;i++){
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	3301      	adds	r3, #1
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d3e4      	bcc.n	8008962 <max+0x1c>
	}
	return nr;
 8008998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800899c:	4610      	mov	r0, r2
 800899e:	4619      	mov	r1, r3
 80089a0:	371c      	adds	r7, #28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <print_results>:

void print_results(const char *s, uint64_t *t, size_t tlen) {
 80089ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089b0:	b089      	sub	sp, #36	; 0x24
 80089b2:	af02      	add	r7, sp, #8
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	60b9      	str	r1, [r7, #8]
 80089b8:	607a      	str	r2, [r7, #4]
  size_t i;
  static uint64_t overhead = -1;

  if(tlen < 2) {
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d808      	bhi.n	80089d2 <print_results+0x26>
    fprintf(stderr, "ERROR: Need a least two cycle counts!\n");
 80089c0:	4b39      	ldr	r3, [pc, #228]	; (8008aa8 <print_results+0xfc>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2226      	movs	r2, #38	; 0x26
 80089c8:	2101      	movs	r1, #1
 80089ca:	4838      	ldr	r0, [pc, #224]	; (8008aac <print_results+0x100>)
 80089cc:	f001 f8c4 	bl	8009b58 <fwrite>
    return;
 80089d0:	e065      	b.n	8008a9e <print_results+0xf2>
  }

  if(overhead  == (uint64_t)-1)
 80089d2:	4b37      	ldr	r3, [pc, #220]	; (8008ab0 <print_results+0x104>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	bf08      	it	eq
 80089de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80089e2:	d106      	bne.n	80089f2 <print_results+0x46>
    overhead = cpucycles_overhead();
 80089e4:	f7fa feb4 	bl	8003750 <cpucycles_overhead>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4930      	ldr	r1, [pc, #192]	; (8008ab0 <print_results+0x104>)
 80089ee:	e9c1 2300 	strd	r2, r3, [r1]

  tlen--;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	607b      	str	r3, [r7, #4]
  for(i=0;i<tlen;++i)
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	e01f      	b.n	8008a3e <print_results+0x92>
    t[i] = t[i+1] - t[i] - overhead;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	3301      	adds	r3, #1
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	4413      	add	r3, r2
 8008a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	4413      	add	r3, r2
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	1a84      	subs	r4, r0, r2
 8008a1a:	eb61 0503 	sbc.w	r5, r1, r3
 8008a1e:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <print_results+0x104>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	6979      	ldr	r1, [r7, #20]
 8008a26:	00c9      	lsls	r1, r1, #3
 8008a28:	68b8      	ldr	r0, [r7, #8]
 8008a2a:	4401      	add	r1, r0
 8008a2c:	ebb4 0802 	subs.w	r8, r4, r2
 8008a30:	eb65 0903 	sbc.w	r9, r5, r3
 8008a34:	e9c1 8900 	strd	r8, r9, [r1]
  for(i=0;i<tlen;++i)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	617b      	str	r3, [r7, #20]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d3db      	bcc.n	80089fe <print_results+0x52>

  printf("%s\n", s);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 f96e 	bl	8009d28 <puts>
  printf("median, average, min, max [cycles/ticks]\n");
 8008a4c:	4819      	ldr	r0, [pc, #100]	; (8008ab4 <print_results+0x108>)
 8008a4e:	f001 f96b 	bl	8009d28 <puts>
  printf("%lu \t%lu \t%lu \t%lu \n", (unsigned long)median(t, tlen), (unsigned long)average(t, tlen), (unsigned long)min(t, tlen), (unsigned long)max(t, tlen));
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fed7 	bl	8008808 <median>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4614      	mov	r4, r2
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f7ff ff0c 	bl	8008880 <average>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f7ff ff36 	bl	80088e2 <min>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4616      	mov	r6, r2
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	68b8      	ldr	r0, [r7, #8]
 8008a80:	f7ff ff61 	bl	8008946 <max>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4613      	mov	r3, r2
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4633      	mov	r3, r6
 8008a8e:	462a      	mov	r2, r5
 8008a90:	4621      	mov	r1, r4
 8008a92:	4809      	ldr	r0, [pc, #36]	; (8008ab8 <print_results+0x10c>)
 8008a94:	f001 f8ac 	bl	8009bf0 <iprintf>
  //printf("median: %lu cycles/ticks\n", (unsigned long)median(t, tlen));
  //printf("average: %lu cycles/ticks\n", (unsigned long)average(t, tlen));
  printf("\n");
 8008a98:	200a      	movs	r0, #10
 8008a9a:	f001 f8c1 	bl	8009c20 <putchar>
}
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000018 	.word	0x20000018
 8008aac:	0800b2c8 	.word	0x0800b2c8
 8008ab0:	20000010 	.word	0x20000010
 8008ab4:	0800b2f0 	.word	0x0800b2f0
 8008ab8:	0800b31c 	.word	0x0800b31c

08008abc <pqcrystals_kyber512_ref_kyber_shake128_absorb>:
**************************************************/
void kyber_shake128_absorb(keccak_state *state,
                           const uint8_t seed[KYBER_SYMBYTES],
                           uint8_t x,
                           uint8_t y)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08e      	sub	sp, #56	; 0x38
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	460b      	mov	r3, r1
 8008acc:	71fb      	strb	r3, [r7, #7]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	71bb      	strb	r3, [r7, #6]
  uint8_t extseed[KYBER_SYMBYTES+2];

  memcpy(extseed, seed, KYBER_SYMBYTES);
 8008ad2:	f107 0314 	add.w	r3, r7, #20
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 f871 	bl	8009bc2 <memcpy>
  extseed[KYBER_SYMBYTES+0] = x;
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  extseed[KYBER_SYMBYTES+1] = y;
 8008ae6:	79bb      	ldrb	r3, [r7, #6]
 8008ae8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

  shake128_absorb_once(state, extseed, sizeof(extseed));
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	2222      	movs	r2, #34	; 0x22
 8008af2:	4619      	mov	r1, r3
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f7fd ffcb 	bl	8006a90 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>
}
 8008afa:	bf00      	nop
 8008afc:	3738      	adds	r7, #56	; 0x38
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <pqcrystals_kyber512_ref_kyber_shake256_prf>:
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b08e      	sub	sp, #56	; 0x38
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
 8008b0e:	70fb      	strb	r3, [r7, #3]
  uint8_t extkey[KYBER_SYMBYTES+1];

  memcpy(extkey, key, KYBER_SYMBYTES);
 8008b10:	f107 0314 	add.w	r3, r7, #20
 8008b14:	2220      	movs	r2, #32
 8008b16:	6879      	ldr	r1, [r7, #4]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 f852 	bl	8009bc2 <memcpy>
  extkey[KYBER_SYMBYTES] = nonce;
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  shake256(out, outlen, extkey, sizeof(extkey));
 8008b24:	f107 0214 	add.w	r2, r7, #20
 8008b28:	2321      	movs	r3, #33	; 0x21
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7fe f813 	bl	8006b58 <pqcrystals_kyber_fips202_ref_shake256>
}
 8008b32:	bf00      	nop
 8008b34:	3738      	adds	r7, #56	; 0x38
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <pqcrystals_kyber512_ref_verify>:
*              size_t len:       length of the byte arrays
*
* Returns 0 if the byte arrays are equal, 1 otherwise
**************************************************/
int verify(const uint8_t *a, const uint8_t *b, size_t len)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b087      	sub	sp, #28
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t r = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	74fb      	strb	r3, [r7, #19]

  for(i=0;i<len;i++)
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e00f      	b.n	8008b70 <pqcrystals_kyber512_ref_verify+0x36>
    r |= a[i] ^ b[i];
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	4413      	add	r3, r2
 8008b56:	781a      	ldrb	r2, [r3, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	440b      	add	r3, r1
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	4053      	eors	r3, r2
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	7cfb      	ldrb	r3, [r7, #19]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	74fb      	strb	r3, [r7, #19]
  for(i=0;i<len;i++)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d3eb      	bcc.n	8008b50 <pqcrystals_kyber512_ref_verify+0x16>

  return (-(uint64_t)r) >> 63;
 8008b78:	7cfa      	ldrb	r2, [r7, #19]
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	4250      	negs	r0, r2
 8008b80:	eb63 0143 	sbc.w	r1, r3, r3, lsl #1
 8008b84:	f04f 0200 	mov.w	r2, #0
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	0fca      	lsrs	r2, r1, #31
 8008b8e:	2300      	movs	r3, #0
 8008b90:	4613      	mov	r3, r2
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <pqcrystals_kyber512_ref_cmov>:
*              const uint8_t *x: pointer to input byte array
*              size_t len:       Amount of bytes to be copied
*              uint8_t b:        Condition bit; has to be in {0,1}
**************************************************/
void cmov(uint8_t *r, const uint8_t *x, size_t len, uint8_t b)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b087      	sub	sp, #28
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	70fb      	strb	r3, [r7, #3]
  size_t i;

  b = -b;
 8008bac:	78fb      	ldrb	r3, [r7, #3]
 8008bae:	425b      	negs	r3, r3
 8008bb0:	70fb      	strb	r3, [r7, #3]
  for(i=0;i<len;i++)
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e019      	b.n	8008bec <pqcrystals_kyber512_ref_cmov+0x4e>
    r[i] ^= b & (r[i] ^ x[i]);
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	7819      	ldrb	r1, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	68b8      	ldr	r0, [r7, #8]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4403      	add	r3, r0
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	4053      	eors	r3, r2
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	4403      	add	r3, r0
 8008be0:	404a      	eors	r2, r1
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
  for(i=0;i<len;i++)
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	3301      	adds	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d3e1      	bcc.n	8008bb8 <pqcrystals_kyber512_ref_cmov+0x1a>
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <csp_sha1_compress>:
#define FF_0(a, b, c, d, e, i) do {e = (ROL(a, 5) + F0(b,c,d) + e + W[i] + 0x5a827999UL); b = ROL(b, 30);} while (0)
#define FF_1(a, b, c, d, e, i) do {e = (ROL(a, 5) + F1(b,c,d) + e + W[i] + 0x6ed9eba1UL); b = ROL(b, 30);} while (0)
#define FF_2(a, b, c, d, e, i) do {e = (ROL(a, 5) + F2(b,c,d) + e + W[i] + 0x8f1bbcdcUL); b = ROL(b, 30);} while (0)
#define FF_3(a, b, c, d, e, i) do {e = (ROL(a, 5) + F3(b,c,d) + e + W[i] + 0xca62c1d6UL); b = ROL(b, 30);} while (0)

static void csp_sha1_compress(csp_sha1_state_t * sha1, const uint8_t * buf) {
 8008c04:	b480      	push	{r7}
 8008c06:	b0d9      	sub	sp, #356	; 0x164
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	1d3b      	adds	r3, r7, #4
 8008c0c:	6018      	str	r0, [r3, #0]
 8008c0e:	463b      	mov	r3, r7
 8008c10:	6019      	str	r1, [r3, #0]

	uint32_t a, b, c, d, e, W[80], i;

	/* Copy the state into 512-bits into W[0..15] */
	for (i = 0; i < 16; i++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008c18:	e030      	b.n	8008c7c <csp_sha1_compress+0x78>
		LOAD32H(W[i], buf + (4*i));
 8008c1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	463a      	mov	r2, r7
 8008c22:	6812      	ldr	r2, [r2, #0]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	061a      	lsls	r2, r3, #24
 8008c2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	3301      	adds	r3, #1
 8008c32:	4639      	mov	r1, r7
 8008c34:	6809      	ldr	r1, [r1, #0]
 8008c36:	440b      	add	r3, r1
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	3302      	adds	r3, #2
 8008c46:	4639      	mov	r1, r7
 8008c48:	6809      	ldr	r1, [r1, #0]
 8008c4a:	440b      	add	r3, r1
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	3203      	adds	r2, #3
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	6809      	ldr	r1, [r1, #0]
 8008c5e:	440a      	add	r2, r1
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	ea43 0102 	orr.w	r1, r3, r2
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 16; i++)
 8008c72:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c76:	3301      	adds	r3, #1
 8008c78:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008c7c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008c80:	2b0f      	cmp	r3, #15
 8008c82:	d9ca      	bls.n	8008c1a <csp_sha1_compress+0x16>

	/* Copy state */
	a = sha1->state[0];
 8008c84:	1d3b      	adds	r3, r7, #4
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	b = sha1->state[1];
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	c = sha1->state[2];
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	d = sha1->state[3];
 8008ca2:	1d3b      	adds	r3, r7, #4
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	e = sha1->state[4];
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

	/* Expand it */
	for (i = 16; i < 80; i++)
 8008cb6:	2310      	movs	r3, #16
 8008cb8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008cbc:	e02e      	b.n	8008d1c <csp_sha1_compress+0x118>
		W[i] = ROL(W[i-3] ^ W[i-8] ^ W[i-14] ^ W[i-16], 1);
 8008cbe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cc2:	1eda      	subs	r2, r3, #3
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ccc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cd0:	f1a3 0108 	sub.w	r1, r3, #8
 8008cd4:	f107 0308 	add.w	r3, r7, #8
 8008cd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cdc:	405a      	eors	r2, r3
 8008cde:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ce2:	f1a3 010e 	sub.w	r1, r3, #14
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cee:	405a      	eors	r2, r3
 8008cf0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008cf4:	f1a3 0110 	sub.w	r1, r3, #16
 8008cf8:	f107 0308 	add.w	r3, r7, #8
 8008cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d00:	4053      	eors	r3, r2
 8008d02:	ea4f 71f3 	mov.w	r1, r3, ror #31
 8008d06:	f107 0308 	add.w	r3, r7, #8
 8008d0a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 16; i < 80; i++)
 8008d12:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008d16:	3301      	adds	r3, #1
 8008d18:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008d1c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008d20:	2b4f      	cmp	r3, #79	; 0x4f
 8008d22:	d9cc      	bls.n	8008cbe <csp_sha1_compress+0xba>

	/* Compress */
	i = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	/* Round one */
	for (; i < 20;) {
 8008d2a:	e0c2      	b.n	8008eb2 <csp_sha1_compress+0x2ae>
	   FF_0(a, b, c, d, e, i++);
 8008d2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008d30:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008d34:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8008d38:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008d3c:	4059      	eors	r1, r3
 8008d3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008d42:	4019      	ands	r1, r3
 8008d44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008d48:	404b      	eors	r3, r1
 8008d4a:	441a      	add	r2, r3
 8008d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d50:	441a      	add	r2, r3
 8008d52:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008d56:	1c59      	adds	r1, r3, #1
 8008d58:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008d64:	441a      	add	r2, r3
 8008d66:	4bb3      	ldr	r3, [pc, #716]	; (8009034 <csp_sha1_compress+0x430>)
 8008d68:	4413      	add	r3, r2
 8008d6a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008d6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008d72:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	   FF_0(e, a, b, c, d, i++);
 8008d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d7e:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008d82:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008d86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d8a:	4059      	eors	r1, r3
 8008d8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008d90:	4019      	ands	r1, r3
 8008d92:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008d96:	404b      	eors	r3, r1
 8008d98:	441a      	add	r2, r3
 8008d9a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008d9e:	441a      	add	r2, r3
 8008da0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008da4:	1c59      	adds	r1, r3, #1
 8008da6:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008daa:	f107 0108 	add.w	r1, r7, #8
 8008dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008db2:	441a      	add	r2, r3
 8008db4:	4b9f      	ldr	r3, [pc, #636]	; (8009034 <csp_sha1_compress+0x430>)
 8008db6:	4413      	add	r3, r2
 8008db8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008dbc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008dc0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008dc4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	   FF_0(d, e, a, b, c, i++);
 8008dc8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008dcc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008dd0:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8008dd4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008dd8:	4059      	eors	r1, r3
 8008dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008dde:	4019      	ands	r1, r3
 8008de0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008de4:	404b      	eors	r3, r1
 8008de6:	441a      	add	r2, r3
 8008de8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008dec:	441a      	add	r2, r3
 8008dee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008df2:	1c59      	adds	r1, r3, #1
 8008df4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008df8:	f107 0108 	add.w	r1, r7, #8
 8008dfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e00:	441a      	add	r2, r3
 8008e02:	4b8c      	ldr	r3, [pc, #560]	; (8009034 <csp_sha1_compress+0x430>)
 8008e04:	4413      	add	r3, r2
 8008e06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e0e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e12:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	   FF_0(c, d, e, a, b, i++);
 8008e16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008e1a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008e1e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8008e22:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e26:	4059      	eors	r1, r3
 8008e28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008e2c:	4019      	ands	r1, r3
 8008e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e32:	404b      	eors	r3, r1
 8008e34:	441a      	add	r2, r3
 8008e36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008e3a:	441a      	add	r2, r3
 8008e3c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e40:	1c59      	adds	r1, r3, #1
 8008e42:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008e46:	f107 0108 	add.w	r1, r7, #8
 8008e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e4e:	441a      	add	r2, r3
 8008e50:	4b78      	ldr	r3, [pc, #480]	; (8009034 <csp_sha1_compress+0x430>)
 8008e52:	4413      	add	r3, r2
 8008e54:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008e58:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008e5c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	   FF_0(b, c, d, e, a, i++);
 8008e64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008e68:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008e6c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e74:	4059      	eors	r1, r3
 8008e76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008e7a:	4019      	ands	r1, r3
 8008e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008e80:	404b      	eors	r3, r1
 8008e82:	441a      	add	r2, r3
 8008e84:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008e88:	441a      	add	r2, r3
 8008e8a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008e94:	f107 0108 	add.w	r1, r7, #8
 8008e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e9c:	441a      	add	r2, r3
 8008e9e:	4b65      	ldr	r3, [pc, #404]	; (8009034 <csp_sha1_compress+0x430>)
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8008ea6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008eaa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008eae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	for (; i < 20;) {
 8008eb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008eb6:	2b13      	cmp	r3, #19
 8008eb8:	f67f af38 	bls.w	8008d2c <csp_sha1_compress+0x128>
	}

	/* Round two */
	for (; i < 40;)  {
 8008ebc:	e0b3      	b.n	8009026 <csp_sha1_compress+0x422>
	   FF_1(a, b, c, d, e, i++);
 8008ebe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008ec2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008ec6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008eca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008ece:	4059      	eors	r1, r3
 8008ed0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008ed4:	404b      	eors	r3, r1
 8008ed6:	441a      	add	r2, r3
 8008ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008edc:	441a      	add	r2, r3
 8008ede:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008ee2:	1c59      	adds	r1, r3, #1
 8008ee4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008ef0:	441a      	add	r2, r3
 8008ef2:	4b51      	ldr	r3, [pc, #324]	; (8009038 <csp_sha1_compress+0x434>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008efa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008efe:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	   FF_1(e, a, b, c, d, i++);
 8008f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f0a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008f0e:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8008f12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008f16:	4059      	eors	r1, r3
 8008f18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f1c:	404b      	eors	r3, r1
 8008f1e:	441a      	add	r2, r3
 8008f20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008f24:	441a      	add	r2, r3
 8008f26:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008f2a:	1c59      	adds	r1, r3, #1
 8008f2c:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f38:	441a      	add	r2, r3
 8008f3a:	4b3f      	ldr	r3, [pc, #252]	; (8009038 <csp_sha1_compress+0x434>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008f42:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008f46:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	   FF_1(d, e, a, b, c, i++);
 8008f4e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008f52:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008f56:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8008f5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008f5e:	4059      	eors	r1, r3
 8008f60:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008f64:	404b      	eors	r3, r1
 8008f66:	441a      	add	r2, r3
 8008f68:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f6c:	441a      	add	r2, r3
 8008f6e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f80:	441a      	add	r2, r3
 8008f82:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <csp_sha1_compress+0x434>)
 8008f84:	4413      	add	r3, r2
 8008f86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008f8e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f92:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	   FF_1(c, d, e, a, b, i++);
 8008f96:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8008f9a:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008f9e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fa6:	4059      	eors	r1, r3
 8008fa8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008fac:	404b      	eors	r3, r1
 8008fae:	441a      	add	r2, r3
 8008fb0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008fb4:	441a      	add	r2, r3
 8008fb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fba:	1c59      	adds	r1, r3, #1
 8008fbc:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8008fc0:	f107 0108 	add.w	r1, r7, #8
 8008fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fc8:	441a      	add	r2, r3
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <csp_sha1_compress+0x434>)
 8008fcc:	4413      	add	r3, r2
 8008fce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8008fd2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008fd6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008fda:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	   FF_1(b, c, d, e, a, i++);
 8008fde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8008fe2:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8008fe6:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8008fea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8008fee:	4059      	eors	r1, r3
 8008ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008ff4:	404b      	eors	r3, r1
 8008ff6:	441a      	add	r2, r3
 8008ff8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8008ffc:	441a      	add	r2, r3
 8008ffe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009002:	1c59      	adds	r1, r3, #1
 8009004:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009010:	441a      	add	r2, r3
 8009012:	4b09      	ldr	r3, [pc, #36]	; (8009038 <csp_sha1_compress+0x434>)
 8009014:	4413      	add	r3, r2
 8009016:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800901a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800901e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009022:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	for (; i < 40;)  {
 8009026:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800902a:	2b27      	cmp	r3, #39	; 0x27
 800902c:	f67f af47 	bls.w	8008ebe <csp_sha1_compress+0x2ba>
	}

	/* Round three */
	for (; i < 60;)  {
 8009030:	e0d6      	b.n	80091e0 <csp_sha1_compress+0x5dc>
 8009032:	bf00      	nop
 8009034:	5a827999 	.word	0x5a827999
 8009038:	6ed9eba1 	.word	0x6ed9eba1
	   FF_2(a, b, c, d, e, i++);
 800903c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009040:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009044:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009048:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800904c:	4019      	ands	r1, r3
 800904e:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 8009052:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009056:	4318      	orrs	r0, r3
 8009058:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800905c:	4003      	ands	r3, r0
 800905e:	430b      	orrs	r3, r1
 8009060:	441a      	add	r2, r3
 8009062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009066:	441a      	add	r2, r3
 8009068:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800906c:	1c59      	adds	r1, r3, #1
 800906e:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8009072:	f107 0108 	add.w	r1, r7, #8
 8009076:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800907a:	441a      	add	r2, r3
 800907c:	4bd2      	ldr	r3, [pc, #840]	; (80093c8 <csp_sha1_compress+0x7c4>)
 800907e:	4413      	add	r3, r2
 8009080:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009084:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009088:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800908c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	   FF_2(e, a, b, c, d, i++);
 8009090:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009094:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009098:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800909c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80090a0:	4019      	ands	r1, r3
 80090a2:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 80090a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80090aa:	4318      	orrs	r0, r3
 80090ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80090b0:	4003      	ands	r3, r0
 80090b2:	430b      	orrs	r3, r1
 80090b4:	441a      	add	r2, r3
 80090b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80090ba:	441a      	add	r2, r3
 80090bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80090c0:	1c59      	adds	r1, r3, #1
 80090c2:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80090c6:	f107 0108 	add.w	r1, r7, #8
 80090ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090ce:	441a      	add	r2, r3
 80090d0:	4bbd      	ldr	r3, [pc, #756]	; (80093c8 <csp_sha1_compress+0x7c4>)
 80090d2:	4413      	add	r3, r2
 80090d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80090d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80090dc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80090e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	   FF_2(d, e, a, b, c, i++);
 80090e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80090e8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80090ec:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80090f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80090f4:	4019      	ands	r1, r3
 80090f6:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 80090fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80090fe:	4318      	orrs	r0, r3
 8009100:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009104:	4003      	ands	r3, r0
 8009106:	430b      	orrs	r3, r1
 8009108:	441a      	add	r2, r3
 800910a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800910e:	441a      	add	r2, r3
 8009110:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009114:	1c59      	adds	r1, r3, #1
 8009116:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800911a:	f107 0108 	add.w	r1, r7, #8
 800911e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009122:	441a      	add	r2, r3
 8009124:	4ba8      	ldr	r3, [pc, #672]	; (80093c8 <csp_sha1_compress+0x7c4>)
 8009126:	4413      	add	r3, r2
 8009128:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800912c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009130:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009134:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	   FF_2(c, d, e, a, b, i++);
 8009138:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800913c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009140:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009144:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009148:	4019      	ands	r1, r3
 800914a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800914e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009152:	4318      	orrs	r0, r3
 8009154:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009158:	4003      	ands	r3, r0
 800915a:	430b      	orrs	r3, r1
 800915c:	441a      	add	r2, r3
 800915e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009162:	441a      	add	r2, r3
 8009164:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009168:	1c59      	adds	r1, r3, #1
 800916a:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800916e:	f107 0108 	add.w	r1, r7, #8
 8009172:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009176:	441a      	add	r2, r3
 8009178:	4b93      	ldr	r3, [pc, #588]	; (80093c8 <csp_sha1_compress+0x7c4>)
 800917a:	4413      	add	r3, r2
 800917c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009180:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009184:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009188:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	   FF_2(b, c, d, e, a, i++);
 800918c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009190:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009194:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8009198:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800919c:	4019      	ands	r1, r3
 800919e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80091a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80091a6:	4318      	orrs	r0, r3
 80091a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80091ac:	4003      	ands	r3, r0
 80091ae:	430b      	orrs	r3, r1
 80091b0:	441a      	add	r2, r3
 80091b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80091b6:	441a      	add	r2, r3
 80091b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80091bc:	1c59      	adds	r1, r3, #1
 80091be:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80091c2:	f107 0108 	add.w	r1, r7, #8
 80091c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091ca:	441a      	add	r2, r3
 80091cc:	4b7e      	ldr	r3, [pc, #504]	; (80093c8 <csp_sha1_compress+0x7c4>)
 80091ce:	4413      	add	r3, r2
 80091d0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80091d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80091d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80091dc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	for (; i < 60;)  {
 80091e0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80091e4:	2b3b      	cmp	r3, #59	; 0x3b
 80091e6:	f67f af29 	bls.w	800903c <csp_sha1_compress+0x438>
	}

	/* Round four */
	for (; i < 80;)  {
 80091ea:	e0b3      	b.n	8009354 <csp_sha1_compress+0x750>
	   FF_3(a, b, c, d, e, i++);
 80091ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80091f0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80091f4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80091f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80091fc:	4059      	eors	r1, r3
 80091fe:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009202:	404b      	eors	r3, r1
 8009204:	441a      	add	r2, r3
 8009206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800920a:	441a      	add	r2, r3
 800920c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009210:	1c59      	adds	r1, r3, #1
 8009212:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8009216:	f107 0108 	add.w	r1, r7, #8
 800921a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800921e:	441a      	add	r2, r3
 8009220:	4b6a      	ldr	r3, [pc, #424]	; (80093cc <csp_sha1_compress+0x7c8>)
 8009222:	4413      	add	r3, r2
 8009224:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009228:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800922c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009230:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	   FF_3(e, a, b, c, d, i++);
 8009234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009238:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800923c:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8009240:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009244:	4059      	eors	r1, r3
 8009246:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800924a:	404b      	eors	r3, r1
 800924c:	441a      	add	r2, r3
 800924e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009252:	441a      	add	r2, r3
 8009254:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009258:	1c59      	adds	r1, r3, #1
 800925a:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800925e:	f107 0108 	add.w	r1, r7, #8
 8009262:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009266:	441a      	add	r2, r3
 8009268:	4b58      	ldr	r3, [pc, #352]	; (80093cc <csp_sha1_compress+0x7c8>)
 800926a:	4413      	add	r3, r2
 800926c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009270:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009274:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009278:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	   FF_3(d, e, a, b, c, i++);
 800927c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009280:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009284:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8009288:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800928c:	4059      	eors	r1, r3
 800928e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009292:	404b      	eors	r3, r1
 8009294:	441a      	add	r2, r3
 8009296:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800929a:	441a      	add	r2, r3
 800929c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80092a0:	1c59      	adds	r1, r3, #1
 80092a2:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80092a6:	f107 0108 	add.w	r1, r7, #8
 80092aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092ae:	441a      	add	r2, r3
 80092b0:	4b46      	ldr	r3, [pc, #280]	; (80093cc <csp_sha1_compress+0x7c8>)
 80092b2:	4413      	add	r3, r2
 80092b4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80092b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80092c0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	   FF_3(c, d, e, a, b, i++);
 80092c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80092c8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80092cc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80092d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80092d4:	4059      	eors	r1, r3
 80092d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80092da:	404b      	eors	r3, r1
 80092dc:	441a      	add	r2, r3
 80092de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80092e2:	441a      	add	r2, r3
 80092e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80092e8:	1c59      	adds	r1, r3, #1
 80092ea:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80092ee:	f107 0108 	add.w	r1, r7, #8
 80092f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80092f6:	441a      	add	r2, r3
 80092f8:	4b34      	ldr	r3, [pc, #208]	; (80093cc <csp_sha1_compress+0x7c8>)
 80092fa:	4413      	add	r3, r2
 80092fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009300:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009304:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009308:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	   FF_3(b, c, d, e, a, i++);
 800930c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8009310:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8009314:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8009318:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800931c:	4059      	eors	r1, r3
 800931e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009322:	404b      	eors	r3, r1
 8009324:	441a      	add	r2, r3
 8009326:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800932a:	441a      	add	r2, r3
 800932c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009330:	1c59      	adds	r1, r3, #1
 8009332:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8009336:	f107 0108 	add.w	r1, r7, #8
 800933a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800933e:	441a      	add	r2, r3
 8009340:	4b22      	ldr	r3, [pc, #136]	; (80093cc <csp_sha1_compress+0x7c8>)
 8009342:	4413      	add	r3, r2
 8009344:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009348:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800934c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009350:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	for (; i < 80;)  {
 8009354:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009358:	2b4f      	cmp	r3, #79	; 0x4f
 800935a:	f67f af47 	bls.w	80091ec <csp_sha1_compress+0x5e8>
	}

	/* Store */
	sha1->state[0] += a;
 800935e:	1d3b      	adds	r3, r7, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009368:	441a      	add	r2, r3
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	609a      	str	r2, [r3, #8]
	sha1->state[1] += b;
 8009370:	1d3b      	adds	r3, r7, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800937a:	441a      	add	r2, r3
 800937c:	1d3b      	adds	r3, r7, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60da      	str	r2, [r3, #12]
	sha1->state[2] += c;
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800938c:	441a      	add	r2, r3
 800938e:	1d3b      	adds	r3, r7, #4
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	611a      	str	r2, [r3, #16]
	sha1->state[3] += d;
 8009394:	1d3b      	adds	r3, r7, #4
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695a      	ldr	r2, [r3, #20]
 800939a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800939e:	441a      	add	r2, r3
 80093a0:	1d3b      	adds	r3, r7, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	615a      	str	r2, [r3, #20]
	sha1->state[4] += e;
 80093a6:	1d3b      	adds	r3, r7, #4
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	699a      	ldr	r2, [r3, #24]
 80093ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80093b0:	441a      	add	r2, r3
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	619a      	str	r2, [r3, #24]

}
 80093b8:	bf00      	nop
 80093ba:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	8f1bbcdc 	.word	0x8f1bbcdc
 80093cc:	ca62c1d6 	.word	0xca62c1d6

080093d0 <csp_sha1_init>:

void csp_sha1_init(csp_sha1_state_t * sha1) {
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]

   sha1->state[0] = 0x67452301UL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a0f      	ldr	r2, [pc, #60]	; (8009418 <csp_sha1_init+0x48>)
 80093dc:	609a      	str	r2, [r3, #8]
   sha1->state[1] = 0xefcdab89UL;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a0e      	ldr	r2, [pc, #56]	; (800941c <csp_sha1_init+0x4c>)
 80093e2:	60da      	str	r2, [r3, #12]
   sha1->state[2] = 0x98badcfeUL;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <csp_sha1_init+0x50>)
 80093e8:	611a      	str	r2, [r3, #16]
   sha1->state[3] = 0x10325476UL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a0d      	ldr	r2, [pc, #52]	; (8009424 <csp_sha1_init+0x54>)
 80093ee:	615a      	str	r2, [r3, #20]
   sha1->state[4] = 0xc3d2e1f0UL;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a0d      	ldr	r2, [pc, #52]	; (8009428 <csp_sha1_init+0x58>)
 80093f4:	619a      	str	r2, [r3, #24]
   sha1->curlen = 0;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	61da      	str	r2, [r3, #28]
   sha1->length = 0;
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	f04f 0200 	mov.w	r2, #0
 8009402:	f04f 0300 	mov.w	r3, #0
 8009406:	e9c1 2300 	strd	r2, r3, [r1]

}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	67452301 	.word	0x67452301
 800941c:	efcdab89 	.word	0xefcdab89
 8009420:	98badcfe 	.word	0x98badcfe
 8009424:	10325476 	.word	0x10325476
 8009428:	c3d2e1f0 	.word	0xc3d2e1f0

0800942c <csp_sha1_process>:

void csp_sha1_process(csp_sha1_state_t * sha1, const void * data, uint32_t inlen) {
 800942c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009430:	b086      	sub	sp, #24
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	607a      	str	r2, [r7, #4]

	const uint8_t * in = data;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	617b      	str	r3, [r7, #20]
	uint32_t n;
	while (inlen > 0) {
 800943e:	e054      	b.n	80094ea <csp_sha1_process+0xbe>
		if (sha1->curlen == 0 && inlen >= CSP_SHA1_BLOCKSIZE) {
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d117      	bne.n	8009478 <csp_sha1_process+0x4c>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b3f      	cmp	r3, #63	; 0x3f
 800944c:	d914      	bls.n	8009478 <csp_sha1_process+0x4c>
			csp_sha1_compress(sha1, in);
 800944e:	6979      	ldr	r1, [r7, #20]
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f7ff fbd7 	bl	8008c04 <csp_sha1_compress>
			sha1->length += (CSP_SHA1_BLOCKSIZE * 8);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f512 7400 	adds.w	r4, r2, #512	; 0x200
 8009460:	f143 0500 	adc.w	r5, r3, #0
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	e9c3 4500 	strd	r4, r5, [r3]
			in += CSP_SHA1_BLOCKSIZE;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	3340      	adds	r3, #64	; 0x40
 800946e:	617b      	str	r3, [r7, #20]
			inlen -= CSP_SHA1_BLOCKSIZE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3b40      	subs	r3, #64	; 0x40
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	e038      	b.n	80094ea <csp_sha1_process+0xbe>
		} else {
			n = MIN(inlen, (CSP_SHA1_BLOCKSIZE - sha1->curlen));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	4293      	cmp	r3, r2
 8009484:	bf28      	it	cs
 8009486:	4613      	movcs	r3, r2
 8009488:	613b      	str	r3, [r7, #16]
			memcpy(sha1->buf + sha1->curlen, in, (size_t)n);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f103 0220 	add.w	r2, r3, #32
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4413      	add	r3, r2
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	6979      	ldr	r1, [r7, #20]
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fb91 	bl	8009bc2 <memcpy>
			sha1->curlen += n;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	69da      	ldr	r2, [r3, #28]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	441a      	add	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	61da      	str	r2, [r3, #28]
			in += n;
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
			inlen -= n;
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	607b      	str	r3, [r7, #4]
			if (sha1->curlen == CSP_SHA1_BLOCKSIZE) {
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	2b40      	cmp	r3, #64	; 0x40
 80094c2:	d112      	bne.n	80094ea <csp_sha1_process+0xbe>
				csp_sha1_compress(sha1, sha1->buf);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3320      	adds	r3, #32
 80094c8:	4619      	mov	r1, r3
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7ff fb9a 	bl	8008c04 <csp_sha1_compress>
				sha1->length += (CSP_SHA1_BLOCKSIZE * 8);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f512 7800 	adds.w	r8, r2, #512	; 0x200
 80094da:	f143 0900 	adc.w	r9, r3, #0
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	e9c3 8900 	strd	r8, r9, [r3]
				sha1->curlen = 0;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	61da      	str	r2, [r3, #28]
	while (inlen > 0) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1a7      	bne.n	8009440 <csp_sha1_process+0x14>
			}
		}
	}

}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080094fc <csp_sha1_done>:

void csp_sha1_done(csp_sha1_state_t * sha1, uint8_t * out) {
 80094fc:	b5b0      	push	{r4, r5, r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]

	uint32_t i;

	/* Increase the length of the message */
	sha1->length += sha1->curlen * 8;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	e9d3 0100 	ldrd	r0, r1, [r3]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	00db      	lsls	r3, r3, #3
 8009512:	461a      	mov	r2, r3
 8009514:	f04f 0300 	mov.w	r3, #0
 8009518:	1884      	adds	r4, r0, r2
 800951a:	eb41 0503 	adc.w	r5, r1, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	e9c3 4500 	strd	r4, r5, [r3]

	/* Append the '1' bit */
	sha1->buf[sha1->curlen++] = 0x80;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	1c59      	adds	r1, r3, #1
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	61d1      	str	r1, [r2, #28]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	2280      	movs	r2, #128	; 0x80
 8009534:	f883 2020 	strb.w	r2, [r3, #32]

	/* If the length is currently above 56 bytes we append zeros
	 * then compress. Then we can fall back to padding zeros and length
	 * encoding like normal.
	 */
	if (sha1->curlen > 56) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	2b38      	cmp	r3, #56	; 0x38
 800953e:	d922      	bls.n	8009586 <csp_sha1_done+0x8a>
		while (sha1->curlen < 64)
 8009540:	e009      	b.n	8009556 <csp_sha1_done+0x5a>
			sha1->buf[sha1->curlen++] = 0;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	1c59      	adds	r1, r3, #1
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	61d1      	str	r1, [r2, #28]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2020 	strb.w	r2, [r3, #32]
		while (sha1->curlen < 64)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	2b3f      	cmp	r3, #63	; 0x3f
 800955c:	d9f1      	bls.n	8009542 <csp_sha1_done+0x46>
		csp_sha1_compress(sha1, sha1->buf);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3320      	adds	r3, #32
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff fb4d 	bl	8008c04 <csp_sha1_compress>
		sha1->curlen = 0;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	61da      	str	r2, [r3, #28]
	}

	/* Pad up to 56 bytes of zeroes */
	while (sha1->curlen < 56)
 8009570:	e009      	b.n	8009586 <csp_sha1_done+0x8a>
		sha1->buf[sha1->curlen++] = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	1c59      	adds	r1, r3, #1
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	61d1      	str	r1, [r2, #28]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4413      	add	r3, r2
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2020 	strb.w	r2, [r3, #32]
	while (sha1->curlen < 56)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	2b37      	cmp	r3, #55	; 0x37
 800958c:	d9f1      	bls.n	8009572 <csp_sha1_done+0x76>

	/* Store length */
	STORE64H(sha1->length, sha1->buf + 56);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009594:	f04f 0200 	mov.w	r2, #0
 8009598:	f04f 0300 	mov.w	r3, #0
 800959c:	0e0a      	lsrs	r2, r1, #24
 800959e:	2300      	movs	r3, #0
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095ae:	f04f 0200 	mov.w	r2, #0
 80095b2:	f04f 0300 	mov.w	r3, #0
 80095b6:	0c0a      	lsrs	r2, r1, #16
 80095b8:	2300      	movs	r3, #0
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095c8:	f04f 0200 	mov.w	r2, #0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	0a0a      	lsrs	r2, r1, #8
 80095d2:	2300      	movs	r3, #0
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	000a      	movs	r2, r1
 80095ec:	2300      	movs	r3, #0
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	0e02      	lsrs	r2, r0, #24
 8009606:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800960a:	0e0b      	lsrs	r3, r1, #24
 800960c:	b2d2      	uxtb	r2, r2
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800961a:	f04f 0200 	mov.w	r2, #0
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	0c02      	lsrs	r2, r0, #16
 8009624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009628:	0c0b      	lsrs	r3, r1, #16
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	0a02      	lsrs	r2, r0, #8
 8009642:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009646:	0a0b      	lsrs	r3, r1, #8
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	b2d2      	uxtb	r2, r2
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	csp_sha1_compress(sha1, sha1->buf);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3320      	adds	r3, #32
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff facd 	bl	8008c04 <csp_sha1_compress>

	/* Copy output */
	for (i = 0; i < 5; i++)
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	e034      	b.n	80096da <csp_sha1_done+0x1de>
		STORE32H(sha1->state[i], out + (4 * i));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	3202      	adds	r2, #2
 8009676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967a:	0e19      	lsrs	r1, r3, #24
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	4413      	add	r3, r2
 8009684:	b2ca      	uxtb	r2, r1
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	3202      	adds	r2, #2
 800968e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009692:	0c19      	lsrs	r1, r3, #16
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	3301      	adds	r3, #1
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4413      	add	r3, r2
 800969e:	b2ca      	uxtb	r2, r1
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	3202      	adds	r2, #2
 80096a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ac:	0a19      	lsrs	r1, r3, #8
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	3302      	adds	r3, #2
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	4413      	add	r3, r2
 80096b8:	b2ca      	uxtb	r2, r1
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	3202      	adds	r2, #2
 80096c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3303      	adds	r3, #3
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	4413      	add	r3, r2
 80096d0:	b2ca      	uxtb	r2, r1
 80096d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 5; i++)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2b04      	cmp	r3, #4
 80096de:	d9c7      	bls.n	8009670 <csp_sha1_done+0x174>

}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bdb0      	pop	{r4, r5, r7, pc}

080096ea <csp_sha1_memory>:

void csp_sha1_memory(const void * msg, uint32_t len, uint8_t * hash) {
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b09c      	sub	sp, #112	; 0x70
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]

	csp_sha1_state_t md;
	csp_sha1_init(&md);
 80096f6:	f107 0310 	add.w	r3, r7, #16
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7ff fe68 	bl	80093d0 <csp_sha1_init>
	csp_sha1_process(&md, msg, len);
 8009700:	f107 0310 	add.w	r3, r7, #16
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fe8f 	bl	800942c <csp_sha1_process>
	csp_sha1_done(&md, hash);
 800970e:	f107 0310 	add.w	r3, r7, #16
 8009712:	6879      	ldr	r1, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff fef1 	bl	80094fc <csp_sha1_done>

}
 800971a:	bf00      	nop
 800971c:	3770      	adds	r7, #112	; 0x70
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <csp_xtea_encrypt_block>:
								 ((uint32_t)((y)[2] & 0xff) << 16) | \
								 ((uint32_t)((y)[1] & 0xff) << 8)  | \
								 ((uint32_t)((y)[0] & 0xff) << 0); } while (0)

/* This function takes 64 bits of data in block and the 128 bits key in key */
static inline void csp_xtea_encrypt_block(uint8_t *block, uint8_t const *key) {
 8009724:	b480      	push	{r7}
 8009726:	b08d      	sub	sp, #52	; 0x34
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]

	uint32_t i, v0, v1, delta = 0x9E3779B9, sum = 0, k[4];
 800972e:	4b70      	ldr	r3, [pc, #448]	; (80098f0 <csp_xtea_encrypt_block+0x1cc>)
 8009730:	61fb      	str	r3, [r7, #28]
 8009732:	2300      	movs	r3, #0
 8009734:	623b      	str	r3, [r7, #32]

	LOAD32L(k[0], &key[0]);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	3303      	adds	r3, #3
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	061a      	lsls	r2, r3, #24
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3302      	adds	r3, #2
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	041b      	lsls	r3, r3, #16
 8009746:	431a      	orrs	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	3301      	adds	r3, #1
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	4313      	orrs	r3, r2
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]
	LOAD32L(k[1], &key[4]);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	3307      	adds	r3, #7
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	061a      	lsls	r2, r3, #24
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	3306      	adds	r3, #6
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	041b      	lsls	r3, r3, #16
 800976a:	431a      	orrs	r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	3305      	adds	r3, #5
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	4313      	orrs	r3, r2
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	3204      	adds	r2, #4
 800977a:	7812      	ldrb	r2, [r2, #0]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]
	LOAD32L(k[2], &key[8]);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	330b      	adds	r3, #11
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	061a      	lsls	r2, r3, #24
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	330a      	adds	r3, #10
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	041b      	lsls	r3, r3, #16
 8009790:	431a      	orrs	r2, r3
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	3309      	adds	r3, #9
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	021b      	lsls	r3, r3, #8
 800979a:	4313      	orrs	r3, r2
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	3208      	adds	r2, #8
 80097a0:	7812      	ldrb	r2, [r2, #0]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	617b      	str	r3, [r7, #20]
	LOAD32L(k[3], &key[12]);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	330f      	adds	r3, #15
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	061a      	lsls	r2, r3, #24
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	330e      	adds	r3, #14
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	041b      	lsls	r3, r3, #16
 80097b6:	431a      	orrs	r2, r3
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	330d      	adds	r3, #13
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	021b      	lsls	r3, r3, #8
 80097c0:	4313      	orrs	r3, r2
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	320c      	adds	r2, #12
 80097c6:	7812      	ldrb	r2, [r2, #0]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]

	LOAD32L(v0, &block[0]);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	061a      	lsls	r2, r3, #24
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3302      	adds	r3, #2
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	431a      	orrs	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3301      	adds	r3, #1
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	4313      	orrs	r3, r2
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28
	LOAD32L(v1, &block[4]);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	3307      	adds	r3, #7
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	061a      	lsls	r2, r3, #24
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3306      	adds	r3, #6
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3305      	adds	r3, #5
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	4313      	orrs	r3, r2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	3204      	adds	r2, #4
 8009810:	7812      	ldrb	r2, [r2, #0]
 8009812:	4313      	orrs	r3, r2
 8009814:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < XTEA_ROUNDS; i++) {
 8009816:	2300      	movs	r3, #0
 8009818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800981a:	e033      	b.n	8009884 <csp_xtea_encrypt_block+0x160>
		v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + k[sum & 3]);
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	011a      	lsls	r2, r3, #4
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	095b      	lsrs	r3, r3, #5
 8009824:	405a      	eors	r2, r3
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	441a      	add	r2, r3
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009836:	440b      	add	r3, r1
 8009838:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	440b      	add	r3, r1
 8009840:	4053      	eors	r3, r2
 8009842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009844:	4413      	add	r3, r2
 8009846:	62bb      	str	r3, [r7, #40]	; 0x28
		sum += delta;
 8009848:	6a3a      	ldr	r2, [r7, #32]
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	4413      	add	r3, r2
 800984e:	623b      	str	r3, [r7, #32]
		v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + k[(sum >> 11) & 3]);
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	011a      	lsls	r2, r3, #4
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	405a      	eors	r2, r3
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	441a      	add	r2, r3
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	0adb      	lsrs	r3, r3, #11
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800986c:	440b      	add	r3, r1
 800986e:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	440b      	add	r3, r1
 8009876:	4053      	eors	r3, r2
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	4413      	add	r3, r2
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 0; i < XTEA_ROUNDS; i++) {
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	3301      	adds	r3, #1
 8009882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009886:	2b1f      	cmp	r3, #31
 8009888:	d9c8      	bls.n	800981c <csp_xtea_encrypt_block+0xf8>
	}

	STORE32L(v0, &block[0]);
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	0e1a      	lsrs	r2, r3, #24
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3303      	adds	r3, #3
 8009892:	b2d2      	uxtb	r2, r2
 8009894:	701a      	strb	r2, [r3, #0]
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	0c1a      	lsrs	r2, r3, #16
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3302      	adds	r3, #2
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	0a1a      	lsrs	r2, r3, #8
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3301      	adds	r3, #1
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	701a      	strb	r2, [r3, #0]
	STORE32L(v1, &block[4]);
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	0e1a      	lsrs	r2, r3, #24
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3307      	adds	r3, #7
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	701a      	strb	r2, [r3, #0]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	0c1a      	lsrs	r2, r3, #16
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3306      	adds	r3, #6
 80098ca:	b2d2      	uxtb	r2, r2
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d0:	0a1a      	lsrs	r2, r3, #8
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3305      	adds	r3, #5
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e0:	b2d2      	uxtb	r2, r2
 80098e2:	701a      	strb	r2, [r3, #0]

}
 80098e4:	bf00      	nop
 80098e6:	3734      	adds	r7, #52	; 0x34
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	9e3779b9 	.word	0x9e3779b9

080098f4 <csp_xtea_xor_byte>:

static inline void csp_xtea_xor_byte(uint8_t * dst, uint8_t * src, uint32_t len) {
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]

	unsigned int i;
	for (i = 0; i < len; i++)
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e010      	b.n	8009928 <csp_xtea_xor_byte+0x34>
		dst[i] ^= src[i];
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	4413      	add	r3, r2
 800990c:	7819      	ldrb	r1, [r3, #0]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4413      	add	r3, r2
 8009914:	781a      	ldrb	r2, [r3, #0]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4403      	add	r3, r0
 800991c:	404a      	eors	r2, r1
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len; i++)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	3301      	adds	r3, #1
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	429a      	cmp	r2, r3
 800992e:	d3ea      	bcc.n	8009906 <csp_xtea_xor_byte+0x12>

}
 8009930:	bf00      	nop
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <csp_xtea_set_key>:

int csp_xtea_set_key(const void * key, uint32_t keylen) {
 8009940:	b580      	push	{r7, lr}
 8009942:	b088      	sub	sp, #32
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]

	/* Use SHA1 as KDF */
	uint8_t hash[CSP_SHA1_DIGESTSIZE];
	csp_sha1_memory(key, keylen, hash);
 800994a:	f107 030c 	add.w	r3, r7, #12
 800994e:	461a      	mov	r2, r3
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff fec9 	bl	80096ea <csp_sha1_memory>

	/* Copy key */
	memcpy(csp_xtea_key, hash, XTEA_KEY_LENGTH);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	2210      	movs	r2, #16
 800995e:	4619      	mov	r1, r3
 8009960:	4803      	ldr	r0, [pc, #12]	; (8009970 <csp_xtea_set_key+0x30>)
 8009962:	f000 f92e 	bl	8009bc2 <memcpy>

	return CSP_ERR_NONE;
 8009966:	2300      	movs	r3, #0

}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200000c0 	.word	0x200000c0

08009974 <csp_xtea_encrypt>:

int csp_xtea_encrypt(void * plain, const uint32_t len, uint32_t iv[2]) {
 8009974:	b580      	push	{r7, lr}
 8009976:	b08a      	sub	sp, #40	; 0x28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]

	unsigned int i;
	uint32_t stream[2];

	uint32_t blocks = (len + XTEA_BLOCKSIZE - 1)/ XTEA_BLOCKSIZE;
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3307      	adds	r3, #7
 8009984:	08db      	lsrs	r3, r3, #3
 8009986:	623b      	str	r3, [r7, #32]
	uint32_t remain;

	/* Initialize stream */
	stream[0] = csp_htobe32(iv[0]);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f870 	bl	8009a72 <csp_htobe32>
 8009992:	4603      	mov	r3, r0
 8009994:	617b      	str	r3, [r7, #20]
	stream[1] = csp_htobe32(iv[1]);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3304      	adds	r3, #4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f868 	bl	8009a72 <csp_htobe32>
 80099a2:	4603      	mov	r3, r0
 80099a4:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < blocks; i++) {
 80099a6:	2300      	movs	r3, #0
 80099a8:	627b      	str	r3, [r7, #36]	; 0x24
 80099aa:	e02d      	b.n	8009a08 <csp_xtea_encrypt+0x94>
		/* Create stream */
		csp_xtea_encrypt_block((uint8_t *)stream, (uint8_t *)csp_xtea_key);
 80099ac:	f107 0314 	add.w	r3, r7, #20
 80099b0:	491a      	ldr	r1, [pc, #104]	; (8009a1c <csp_xtea_encrypt+0xa8>)
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff feb6 	bl	8009724 <csp_xtea_encrypt_block>

		/* Calculate remaining bytes */
		remain = len - i * XTEA_BLOCKSIZE;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	61fb      	str	r3, [r7, #28]

		/* XOR plain text with stream to generate cipher text */
		csp_xtea_xor_byte(&((uint8_t*)plain)[len - remain], (uint8_t *)stream, remain < XTEA_BLOCKSIZE ? remain : XTEA_BLOCKSIZE);
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	18d0      	adds	r0, r2, r3
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2b08      	cmp	r3, #8
 80099d0:	bf28      	it	cs
 80099d2:	2308      	movcs	r3, #8
 80099d4:	461a      	mov	r2, r3
 80099d6:	f107 0314 	add.w	r3, r7, #20
 80099da:	4619      	mov	r1, r3
 80099dc:	f7ff ff8a 	bl	80098f4 <csp_xtea_xor_byte>

		/* Increment counter */
		stream[0] = csp_htobe32(iv[0]);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 f844 	bl	8009a72 <csp_htobe32>
 80099ea:	4603      	mov	r3, r0
 80099ec:	617b      	str	r3, [r7, #20]
		stream[1] = csp_htobe32(iv[1]++);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3304      	adds	r3, #4
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	1c51      	adds	r1, r2, #1
 80099f6:	6019      	str	r1, [r3, #0]
 80099f8:	4610      	mov	r0, r2
 80099fa:	f000 f83a 	bl	8009a72 <csp_htobe32>
 80099fe:	4603      	mov	r3, r0
 8009a00:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < blocks; i++) {
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	3301      	adds	r3, #1
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24
 8009a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d3cd      	bcc.n	80099ac <csp_xtea_encrypt+0x38>
	}

	return CSP_ERR_NONE;
 8009a10:	2300      	movs	r3, #0

}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3728      	adds	r7, #40	; 0x28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	200000c0 	.word	0x200000c0

08009a20 <csp_xtea_decrypt>:

	return CSP_ERR_NONE;

}

int csp_xtea_decrypt(void * cipher, const uint32_t len, uint32_t iv[2]) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]

	/* Since we use counter mode, we can reuse the encryption function */
	return csp_xtea_encrypt(cipher, len, iv);
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68b9      	ldr	r1, [r7, #8]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff ff9f 	bl	8009974 <csp_xtea_encrypt>
 8009a36:	4603      	mov	r3, r0

}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <csp_hton32>:
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
	return csp_hton16(n16);
}

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 8009a50:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			((h32 & 0x000000ff) << 24) |
 8009a5a:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	0a1b      	lsrs	r3, r3, #8
 8009a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8009a64:	4313      	orrs	r3, r2
#endif
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <csp_htobe32>:
inline uint16_t __attribute__ ((__const__)) csp_letoh16(uint16_t le16) {
	return csp_htole16(le16);
}

/* Convert 32-bit number from host byte order to big endian byte order */
inline uint32_t __attribute__ ((__const__)) csp_htobe32(uint32_t h32) {
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
	return csp_hton32(h32);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ffe0 	bl	8009a40 <csp_hton32>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <__errno>:
 8009a8c:	4b01      	ldr	r3, [pc, #4]	; (8009a94 <__errno+0x8>)
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	20000018 	.word	0x20000018

08009a98 <_fwrite_r>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	9c08      	ldr	r4, [sp, #32]
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	4617      	mov	r7, r2
 8009aa2:	fb02 f803 	mul.w	r8, r2, r3
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b118      	cbz	r0, 8009ab2 <_fwrite_r+0x1a>
 8009aaa:	6983      	ldr	r3, [r0, #24]
 8009aac:	b90b      	cbnz	r3, 8009ab2 <_fwrite_r+0x1a>
 8009aae:	f000 fd05 	bl	800a4bc <__sinit>
 8009ab2:	4b26      	ldr	r3, [pc, #152]	; (8009b4c <_fwrite_r+0xb4>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	d123      	bne.n	8009b00 <_fwrite_r+0x68>
 8009ab8:	686c      	ldr	r4, [r5, #4]
 8009aba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009abc:	07de      	lsls	r6, r3, #31
 8009abe:	d405      	bmi.n	8009acc <_fwrite_r+0x34>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	0598      	lsls	r0, r3, #22
 8009ac4:	d402      	bmi.n	8009acc <_fwrite_r+0x34>
 8009ac6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ac8:	f000 f879 	bl	8009bbe <__retarget_lock_acquire_recursive>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	0719      	lsls	r1, r3, #28
 8009ad0:	d520      	bpl.n	8009b14 <_fwrite_r+0x7c>
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	b1f3      	cbz	r3, 8009b14 <_fwrite_r+0x7c>
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	4546      	cmp	r6, r8
 8009ada:	d029      	beq.n	8009b30 <_fwrite_r+0x98>
 8009adc:	68a0      	ldr	r0, [r4, #8]
 8009ade:	f819 1006 	ldrb.w	r1, [r9, r6]
 8009ae2:	3801      	subs	r0, #1
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	60a0      	str	r0, [r4, #8]
 8009ae8:	da04      	bge.n	8009af4 <_fwrite_r+0x5c>
 8009aea:	69a3      	ldr	r3, [r4, #24]
 8009aec:	4298      	cmp	r0, r3
 8009aee:	db19      	blt.n	8009b24 <_fwrite_r+0x8c>
 8009af0:	290a      	cmp	r1, #10
 8009af2:	d017      	beq.n	8009b24 <_fwrite_r+0x8c>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	7019      	strb	r1, [r3, #0]
 8009afc:	3601      	adds	r6, #1
 8009afe:	e7eb      	b.n	8009ad8 <_fwrite_r+0x40>
 8009b00:	4b13      	ldr	r3, [pc, #76]	; (8009b50 <_fwrite_r+0xb8>)
 8009b02:	429c      	cmp	r4, r3
 8009b04:	d101      	bne.n	8009b0a <_fwrite_r+0x72>
 8009b06:	68ac      	ldr	r4, [r5, #8]
 8009b08:	e7d7      	b.n	8009aba <_fwrite_r+0x22>
 8009b0a:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <_fwrite_r+0xbc>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	bf08      	it	eq
 8009b10:	68ec      	ldreq	r4, [r5, #12]
 8009b12:	e7d2      	b.n	8009aba <_fwrite_r+0x22>
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 fb2a 	bl	800a170 <__swsetup_r>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d0da      	beq.n	8009ad6 <_fwrite_r+0x3e>
 8009b20:	2600      	movs	r6, #0
 8009b22:	e005      	b.n	8009b30 <_fwrite_r+0x98>
 8009b24:	4622      	mov	r2, r4
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 fad0 	bl	800a0cc <__swbuf_r>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d1e5      	bne.n	8009afc <_fwrite_r+0x64>
 8009b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b32:	07da      	lsls	r2, r3, #31
 8009b34:	d405      	bmi.n	8009b42 <_fwrite_r+0xaa>
 8009b36:	89a3      	ldrh	r3, [r4, #12]
 8009b38:	059b      	lsls	r3, r3, #22
 8009b3a:	d402      	bmi.n	8009b42 <_fwrite_r+0xaa>
 8009b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b3e:	f000 f83f 	bl	8009bc0 <__retarget_lock_release_recursive>
 8009b42:	fbb6 f0f7 	udiv	r0, r6, r7
 8009b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	bf00      	nop
 8009b4c:	0800b5e8 	.word	0x0800b5e8
 8009b50:	0800b608 	.word	0x0800b608
 8009b54:	0800b5c8 	.word	0x0800b5c8

08009b58 <fwrite>:
 8009b58:	b507      	push	{r0, r1, r2, lr}
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	460a      	mov	r2, r1
 8009b60:	4601      	mov	r1, r0
 8009b62:	4803      	ldr	r0, [pc, #12]	; (8009b70 <fwrite+0x18>)
 8009b64:	6800      	ldr	r0, [r0, #0]
 8009b66:	f7ff ff97 	bl	8009a98 <_fwrite_r>
 8009b6a:	b003      	add	sp, #12
 8009b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b70:	20000018 	.word	0x20000018

08009b74 <__libc_init_array>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	4d0d      	ldr	r5, [pc, #52]	; (8009bac <__libc_init_array+0x38>)
 8009b78:	4c0d      	ldr	r4, [pc, #52]	; (8009bb0 <__libc_init_array+0x3c>)
 8009b7a:	1b64      	subs	r4, r4, r5
 8009b7c:	10a4      	asrs	r4, r4, #2
 8009b7e:	2600      	movs	r6, #0
 8009b80:	42a6      	cmp	r6, r4
 8009b82:	d109      	bne.n	8009b98 <__libc_init_array+0x24>
 8009b84:	4d0b      	ldr	r5, [pc, #44]	; (8009bb4 <__libc_init_array+0x40>)
 8009b86:	4c0c      	ldr	r4, [pc, #48]	; (8009bb8 <__libc_init_array+0x44>)
 8009b88:	f001 faa8 	bl	800b0dc <_init>
 8009b8c:	1b64      	subs	r4, r4, r5
 8009b8e:	10a4      	asrs	r4, r4, #2
 8009b90:	2600      	movs	r6, #0
 8009b92:	42a6      	cmp	r6, r4
 8009b94:	d105      	bne.n	8009ba2 <__libc_init_array+0x2e>
 8009b96:	bd70      	pop	{r4, r5, r6, pc}
 8009b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b9c:	4798      	blx	r3
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7ee      	b.n	8009b80 <__libc_init_array+0xc>
 8009ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba6:	4798      	blx	r3
 8009ba8:	3601      	adds	r6, #1
 8009baa:	e7f2      	b.n	8009b92 <__libc_init_array+0x1e>
 8009bac:	0800b664 	.word	0x0800b664
 8009bb0:	0800b664 	.word	0x0800b664
 8009bb4:	0800b664 	.word	0x0800b664
 8009bb8:	0800b668 	.word	0x0800b668

08009bbc <__retarget_lock_init_recursive>:
 8009bbc:	4770      	bx	lr

08009bbe <__retarget_lock_acquire_recursive>:
 8009bbe:	4770      	bx	lr

08009bc0 <__retarget_lock_release_recursive>:
 8009bc0:	4770      	bx	lr

08009bc2 <memcpy>:
 8009bc2:	440a      	add	r2, r1
 8009bc4:	4291      	cmp	r1, r2
 8009bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bca:	d100      	bne.n	8009bce <memcpy+0xc>
 8009bcc:	4770      	bx	lr
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bd8:	4291      	cmp	r1, r2
 8009bda:	d1f9      	bne.n	8009bd0 <memcpy+0xe>
 8009bdc:	bd10      	pop	{r4, pc}

08009bde <memset>:
 8009bde:	4402      	add	r2, r0
 8009be0:	4603      	mov	r3, r0
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d100      	bne.n	8009be8 <memset+0xa>
 8009be6:	4770      	bx	lr
 8009be8:	f803 1b01 	strb.w	r1, [r3], #1
 8009bec:	e7f9      	b.n	8009be2 <memset+0x4>
	...

08009bf0 <iprintf>:
 8009bf0:	b40f      	push	{r0, r1, r2, r3}
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <iprintf+0x2c>)
 8009bf4:	b513      	push	{r0, r1, r4, lr}
 8009bf6:	681c      	ldr	r4, [r3, #0]
 8009bf8:	b124      	cbz	r4, 8009c04 <iprintf+0x14>
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	b913      	cbnz	r3, 8009c04 <iprintf+0x14>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fc5c 	bl	800a4bc <__sinit>
 8009c04:	ab05      	add	r3, sp, #20
 8009c06:	9a04      	ldr	r2, [sp, #16]
 8009c08:	68a1      	ldr	r1, [r4, #8]
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f000 fe45 	bl	800a89c <_vfiprintf_r>
 8009c12:	b002      	add	sp, #8
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	b004      	add	sp, #16
 8009c1a:	4770      	bx	lr
 8009c1c:	20000018 	.word	0x20000018

08009c20 <putchar>:
 8009c20:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <putchar+0x28>)
 8009c22:	b513      	push	{r0, r1, r4, lr}
 8009c24:	681c      	ldr	r4, [r3, #0]
 8009c26:	4601      	mov	r1, r0
 8009c28:	b134      	cbz	r4, 8009c38 <putchar+0x18>
 8009c2a:	69a3      	ldr	r3, [r4, #24]
 8009c2c:	b923      	cbnz	r3, 8009c38 <putchar+0x18>
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fc43 	bl	800a4bc <__sinit>
 8009c36:	9901      	ldr	r1, [sp, #4]
 8009c38:	68a2      	ldr	r2, [r4, #8]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	b002      	add	sp, #8
 8009c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c42:	f001 b8ef 	b.w	800ae24 <_putc_r>
 8009c46:	bf00      	nop
 8009c48:	20000018 	.word	0x20000018

08009c4c <_puts_r>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	460e      	mov	r6, r1
 8009c50:	4605      	mov	r5, r0
 8009c52:	b118      	cbz	r0, 8009c5c <_puts_r+0x10>
 8009c54:	6983      	ldr	r3, [r0, #24]
 8009c56:	b90b      	cbnz	r3, 8009c5c <_puts_r+0x10>
 8009c58:	f000 fc30 	bl	800a4bc <__sinit>
 8009c5c:	69ab      	ldr	r3, [r5, #24]
 8009c5e:	68ac      	ldr	r4, [r5, #8]
 8009c60:	b913      	cbnz	r3, 8009c68 <_puts_r+0x1c>
 8009c62:	4628      	mov	r0, r5
 8009c64:	f000 fc2a 	bl	800a4bc <__sinit>
 8009c68:	4b2c      	ldr	r3, [pc, #176]	; (8009d1c <_puts_r+0xd0>)
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d120      	bne.n	8009cb0 <_puts_r+0x64>
 8009c6e:	686c      	ldr	r4, [r5, #4]
 8009c70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c72:	07db      	lsls	r3, r3, #31
 8009c74:	d405      	bmi.n	8009c82 <_puts_r+0x36>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	0598      	lsls	r0, r3, #22
 8009c7a:	d402      	bmi.n	8009c82 <_puts_r+0x36>
 8009c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c7e:	f7ff ff9e 	bl	8009bbe <__retarget_lock_acquire_recursive>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	0719      	lsls	r1, r3, #28
 8009c86:	d51d      	bpl.n	8009cc4 <_puts_r+0x78>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	b1db      	cbz	r3, 8009cc4 <_puts_r+0x78>
 8009c8c:	3e01      	subs	r6, #1
 8009c8e:	68a3      	ldr	r3, [r4, #8]
 8009c90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	bb39      	cbnz	r1, 8009cea <_puts_r+0x9e>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	da38      	bge.n	8009d10 <_puts_r+0xc4>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	210a      	movs	r1, #10
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fa12 	bl	800a0cc <__swbuf_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d011      	beq.n	8009cd0 <_puts_r+0x84>
 8009cac:	250a      	movs	r5, #10
 8009cae:	e011      	b.n	8009cd4 <_puts_r+0x88>
 8009cb0:	4b1b      	ldr	r3, [pc, #108]	; (8009d20 <_puts_r+0xd4>)
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	d101      	bne.n	8009cba <_puts_r+0x6e>
 8009cb6:	68ac      	ldr	r4, [r5, #8]
 8009cb8:	e7da      	b.n	8009c70 <_puts_r+0x24>
 8009cba:	4b1a      	ldr	r3, [pc, #104]	; (8009d24 <_puts_r+0xd8>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	bf08      	it	eq
 8009cc0:	68ec      	ldreq	r4, [r5, #12]
 8009cc2:	e7d5      	b.n	8009c70 <_puts_r+0x24>
 8009cc4:	4621      	mov	r1, r4
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 fa52 	bl	800a170 <__swsetup_r>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d0dd      	beq.n	8009c8c <_puts_r+0x40>
 8009cd0:	f04f 35ff 	mov.w	r5, #4294967295
 8009cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cd6:	07da      	lsls	r2, r3, #31
 8009cd8:	d405      	bmi.n	8009ce6 <_puts_r+0x9a>
 8009cda:	89a3      	ldrh	r3, [r4, #12]
 8009cdc:	059b      	lsls	r3, r3, #22
 8009cde:	d402      	bmi.n	8009ce6 <_puts_r+0x9a>
 8009ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce2:	f7ff ff6d 	bl	8009bc0 <__retarget_lock_release_recursive>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	bd70      	pop	{r4, r5, r6, pc}
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	da04      	bge.n	8009cf8 <_puts_r+0xac>
 8009cee:	69a2      	ldr	r2, [r4, #24]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	dc06      	bgt.n	8009d02 <_puts_r+0xb6>
 8009cf4:	290a      	cmp	r1, #10
 8009cf6:	d004      	beq.n	8009d02 <_puts_r+0xb6>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	7019      	strb	r1, [r3, #0]
 8009d00:	e7c5      	b.n	8009c8e <_puts_r+0x42>
 8009d02:	4622      	mov	r2, r4
 8009d04:	4628      	mov	r0, r5
 8009d06:	f000 f9e1 	bl	800a0cc <__swbuf_r>
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d1bf      	bne.n	8009c8e <_puts_r+0x42>
 8009d0e:	e7df      	b.n	8009cd0 <_puts_r+0x84>
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	250a      	movs	r5, #10
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	701d      	strb	r5, [r3, #0]
 8009d1a:	e7db      	b.n	8009cd4 <_puts_r+0x88>
 8009d1c:	0800b5e8 	.word	0x0800b5e8
 8009d20:	0800b608 	.word	0x0800b608
 8009d24:	0800b5c8 	.word	0x0800b5c8

08009d28 <puts>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <puts+0xc>)
 8009d2a:	4601      	mov	r1, r0
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	f7ff bf8d 	b.w	8009c4c <_puts_r>
 8009d32:	bf00      	nop
 8009d34:	20000018 	.word	0x20000018

08009d38 <swapfunc>:
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	b510      	push	{r4, lr}
 8009d3c:	d00a      	beq.n	8009d54 <swapfunc+0x1c>
 8009d3e:	0892      	lsrs	r2, r2, #2
 8009d40:	3a01      	subs	r2, #1
 8009d42:	6803      	ldr	r3, [r0, #0]
 8009d44:	680c      	ldr	r4, [r1, #0]
 8009d46:	f840 4b04 	str.w	r4, [r0], #4
 8009d4a:	2a00      	cmp	r2, #0
 8009d4c:	f841 3b04 	str.w	r3, [r1], #4
 8009d50:	dcf6      	bgt.n	8009d40 <swapfunc+0x8>
 8009d52:	bd10      	pop	{r4, pc}
 8009d54:	4402      	add	r2, r0
 8009d56:	780c      	ldrb	r4, [r1, #0]
 8009d58:	7803      	ldrb	r3, [r0, #0]
 8009d5a:	f800 4b01 	strb.w	r4, [r0], #1
 8009d5e:	f801 3b01 	strb.w	r3, [r1], #1
 8009d62:	1a13      	subs	r3, r2, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	dcf6      	bgt.n	8009d56 <swapfunc+0x1e>
 8009d68:	e7f3      	b.n	8009d52 <swapfunc+0x1a>

08009d6a <med3.isra.0>:
 8009d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	4614      	mov	r4, r2
 8009d70:	4606      	mov	r6, r0
 8009d72:	461d      	mov	r5, r3
 8009d74:	4798      	blx	r3
 8009d76:	2800      	cmp	r0, #0
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	da0c      	bge.n	8009d98 <med3.isra.0+0x2e>
 8009d7e:	47a8      	blx	r5
 8009d80:	2800      	cmp	r0, #0
 8009d82:	da02      	bge.n	8009d8a <med3.isra.0+0x20>
 8009d84:	463c      	mov	r4, r7
 8009d86:	4620      	mov	r0, r4
 8009d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	47a8      	blx	r5
 8009d90:	2800      	cmp	r0, #0
 8009d92:	dbf8      	blt.n	8009d86 <med3.isra.0+0x1c>
 8009d94:	4634      	mov	r4, r6
 8009d96:	e7f6      	b.n	8009d86 <med3.isra.0+0x1c>
 8009d98:	47a8      	blx	r5
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	dcf2      	bgt.n	8009d84 <med3.isra.0+0x1a>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4630      	mov	r0, r6
 8009da2:	47a8      	blx	r5
 8009da4:	2800      	cmp	r0, #0
 8009da6:	daee      	bge.n	8009d86 <med3.isra.0+0x1c>
 8009da8:	e7f4      	b.n	8009d94 <med3.isra.0+0x2a>

08009daa <qsort>:
 8009daa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dae:	469a      	mov	sl, r3
 8009db0:	ea40 0302 	orr.w	r3, r0, r2
 8009db4:	079b      	lsls	r3, r3, #30
 8009db6:	b097      	sub	sp, #92	; 0x5c
 8009db8:	4606      	mov	r6, r0
 8009dba:	4614      	mov	r4, r2
 8009dbc:	d11a      	bne.n	8009df4 <qsort+0x4a>
 8009dbe:	f1b2 0804 	subs.w	r8, r2, #4
 8009dc2:	bf18      	it	ne
 8009dc4:	f04f 0801 	movne.w	r8, #1
 8009dc8:	2300      	movs	r3, #0
 8009dca:	9302      	str	r3, [sp, #8]
 8009dcc:	1933      	adds	r3, r6, r4
 8009dce:	fb04 f701 	mul.w	r7, r4, r1
 8009dd2:	9301      	str	r3, [sp, #4]
 8009dd4:	2906      	cmp	r1, #6
 8009dd6:	eb06 0307 	add.w	r3, r6, r7
 8009dda:	9303      	str	r3, [sp, #12]
 8009ddc:	d82a      	bhi.n	8009e34 <qsort+0x8a>
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	9a03      	ldr	r2, [sp, #12]
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d310      	bcc.n	8009e08 <qsort+0x5e>
 8009de6:	9b02      	ldr	r3, [sp, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f040 811f 	bne.w	800a02c <qsort+0x282>
 8009dee:	b017      	add	sp, #92	; 0x5c
 8009df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df4:	f04f 0802 	mov.w	r8, #2
 8009df8:	e7e6      	b.n	8009dc8 <qsort+0x1e>
 8009dfa:	4643      	mov	r3, r8
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4639      	mov	r1, r7
 8009e00:	4628      	mov	r0, r5
 8009e02:	f7ff ff99 	bl	8009d38 <swapfunc>
 8009e06:	e00e      	b.n	8009e26 <qsort+0x7c>
 8009e08:	9d01      	ldr	r5, [sp, #4]
 8009e0a:	e00d      	b.n	8009e28 <qsort+0x7e>
 8009e0c:	1b2f      	subs	r7, r5, r4
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4638      	mov	r0, r7
 8009e12:	47d0      	blx	sl
 8009e14:	2800      	cmp	r0, #0
 8009e16:	dd09      	ble.n	8009e2c <qsort+0x82>
 8009e18:	f1b8 0f00 	cmp.w	r8, #0
 8009e1c:	d1ed      	bne.n	8009dfa <qsort+0x50>
 8009e1e:	682b      	ldr	r3, [r5, #0]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	602a      	str	r2, [r5, #0]
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	463d      	mov	r5, r7
 8009e28:	42ae      	cmp	r6, r5
 8009e2a:	d3ef      	bcc.n	8009e0c <qsort+0x62>
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	4423      	add	r3, r4
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	e7d4      	b.n	8009dde <qsort+0x34>
 8009e34:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8009e38:	1b3f      	subs	r7, r7, r4
 8009e3a:	2907      	cmp	r1, #7
 8009e3c:	fb04 6909 	mla	r9, r4, r9, r6
 8009e40:	4437      	add	r7, r6
 8009e42:	d022      	beq.n	8009e8a <qsort+0xe0>
 8009e44:	2928      	cmp	r1, #40	; 0x28
 8009e46:	d945      	bls.n	8009ed4 <qsort+0x12a>
 8009e48:	08c9      	lsrs	r1, r1, #3
 8009e4a:	fb04 f501 	mul.w	r5, r4, r1
 8009e4e:	4653      	mov	r3, sl
 8009e50:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8009e54:	1971      	adds	r1, r6, r5
 8009e56:	4630      	mov	r0, r6
 8009e58:	f7ff ff87 	bl	8009d6a <med3.isra.0>
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	eb09 0205 	add.w	r2, r9, r5
 8009e62:	4653      	mov	r3, sl
 8009e64:	4683      	mov	fp, r0
 8009e66:	1b48      	subs	r0, r1, r5
 8009e68:	f7ff ff7f 	bl	8009d6a <med3.isra.0>
 8009e6c:	463a      	mov	r2, r7
 8009e6e:	4681      	mov	r9, r0
 8009e70:	4653      	mov	r3, sl
 8009e72:	1b79      	subs	r1, r7, r5
 8009e74:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8009e78:	f7ff ff77 	bl	8009d6a <med3.isra.0>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	4649      	mov	r1, r9
 8009e80:	4653      	mov	r3, sl
 8009e82:	4658      	mov	r0, fp
 8009e84:	f7ff ff71 	bl	8009d6a <med3.isra.0>
 8009e88:	4681      	mov	r9, r0
 8009e8a:	f1b8 0f00 	cmp.w	r8, #0
 8009e8e:	d124      	bne.n	8009eda <qsort+0x130>
 8009e90:	6833      	ldr	r3, [r6, #0]
 8009e92:	f8d9 2000 	ldr.w	r2, [r9]
 8009e96:	6032      	str	r2, [r6, #0]
 8009e98:	f8c9 3000 	str.w	r3, [r9]
 8009e9c:	eb06 0b04 	add.w	fp, r6, r4
 8009ea0:	46b9      	mov	r9, r7
 8009ea2:	465d      	mov	r5, fp
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	45bb      	cmp	fp, r7
 8009ea8:	d835      	bhi.n	8009f16 <qsort+0x16c>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4658      	mov	r0, fp
 8009eae:	9304      	str	r3, [sp, #16]
 8009eb0:	47d0      	blx	sl
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	dc3e      	bgt.n	8009f36 <qsort+0x18c>
 8009eb8:	d10a      	bne.n	8009ed0 <qsort+0x126>
 8009eba:	f1b8 0f00 	cmp.w	r8, #0
 8009ebe:	d113      	bne.n	8009ee8 <qsort+0x13e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	f8db 2000 	ldr.w	r2, [fp]
 8009ec6:	602a      	str	r2, [r5, #0]
 8009ec8:	f8cb 3000 	str.w	r3, [fp]
 8009ecc:	4425      	add	r5, r4
 8009ece:	2301      	movs	r3, #1
 8009ed0:	44a3      	add	fp, r4
 8009ed2:	e7e8      	b.n	8009ea6 <qsort+0xfc>
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	46b3      	mov	fp, r6
 8009ed8:	e7d1      	b.n	8009e7e <qsort+0xd4>
 8009eda:	4643      	mov	r3, r8
 8009edc:	4622      	mov	r2, r4
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff ff29 	bl	8009d38 <swapfunc>
 8009ee6:	e7d9      	b.n	8009e9c <qsort+0xf2>
 8009ee8:	4643      	mov	r3, r8
 8009eea:	4622      	mov	r2, r4
 8009eec:	4659      	mov	r1, fp
 8009eee:	4628      	mov	r0, r5
 8009ef0:	f7ff ff22 	bl	8009d38 <swapfunc>
 8009ef4:	e7ea      	b.n	8009ecc <qsort+0x122>
 8009ef6:	d10b      	bne.n	8009f10 <qsort+0x166>
 8009ef8:	f1b8 0f00 	cmp.w	r8, #0
 8009efc:	d114      	bne.n	8009f28 <qsort+0x17e>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f8d9 2000 	ldr.w	r2, [r9]
 8009f04:	603a      	str	r2, [r7, #0]
 8009f06:	f8c9 3000 	str.w	r3, [r9]
 8009f0a:	eba9 0904 	sub.w	r9, r9, r4
 8009f0e:	2301      	movs	r3, #1
 8009f10:	9f04      	ldr	r7, [sp, #16]
 8009f12:	45bb      	cmp	fp, r7
 8009f14:	d90f      	bls.n	8009f36 <qsort+0x18c>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d143      	bne.n	8009fa2 <qsort+0x1f8>
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	9a03      	ldr	r2, [sp, #12]
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	f4bf af61 	bcs.w	8009de6 <qsort+0x3c>
 8009f24:	9d01      	ldr	r5, [sp, #4]
 8009f26:	e036      	b.n	8009f96 <qsort+0x1ec>
 8009f28:	4643      	mov	r3, r8
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	4638      	mov	r0, r7
 8009f30:	f7ff ff02 	bl	8009d38 <swapfunc>
 8009f34:	e7e9      	b.n	8009f0a <qsort+0x160>
 8009f36:	4631      	mov	r1, r6
 8009f38:	4638      	mov	r0, r7
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	47d0      	blx	sl
 8009f3e:	1b3b      	subs	r3, r7, r4
 8009f40:	2800      	cmp	r0, #0
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9b05      	ldr	r3, [sp, #20]
 8009f46:	dad6      	bge.n	8009ef6 <qsort+0x14c>
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	d006      	beq.n	8009f5c <qsort+0x1b2>
 8009f4e:	4643      	mov	r3, r8
 8009f50:	4622      	mov	r2, r4
 8009f52:	4639      	mov	r1, r7
 8009f54:	4658      	mov	r0, fp
 8009f56:	f7ff feef 	bl	8009d38 <swapfunc>
 8009f5a:	e005      	b.n	8009f68 <qsort+0x1be>
 8009f5c:	f8db 3000 	ldr.w	r3, [fp]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	f8cb 2000 	str.w	r2, [fp]
 8009f66:	603b      	str	r3, [r7, #0]
 8009f68:	9f04      	ldr	r7, [sp, #16]
 8009f6a:	e7b0      	b.n	8009ece <qsort+0x124>
 8009f6c:	4643      	mov	r3, r8
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4639      	mov	r1, r7
 8009f72:	4628      	mov	r0, r5
 8009f74:	f7ff fee0 	bl	8009d38 <swapfunc>
 8009f78:	e00c      	b.n	8009f94 <qsort+0x1ea>
 8009f7a:	1b2f      	subs	r7, r5, r4
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4638      	mov	r0, r7
 8009f80:	47d0      	blx	sl
 8009f82:	2800      	cmp	r0, #0
 8009f84:	dd09      	ble.n	8009f9a <qsort+0x1f0>
 8009f86:	f1b8 0f00 	cmp.w	r8, #0
 8009f8a:	d1ef      	bne.n	8009f6c <qsort+0x1c2>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	602a      	str	r2, [r5, #0]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	463d      	mov	r5, r7
 8009f96:	42ae      	cmp	r6, r5
 8009f98:	d3ef      	bcc.n	8009f7a <qsort+0x1d0>
 8009f9a:	9b01      	ldr	r3, [sp, #4]
 8009f9c:	4423      	add	r3, r4
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	e7bb      	b.n	8009f1a <qsort+0x170>
 8009fa2:	ebab 0305 	sub.w	r3, fp, r5
 8009fa6:	1baa      	subs	r2, r5, r6
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	bfa8      	it	ge
 8009fac:	461a      	movge	r2, r3
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	b12a      	cbz	r2, 8009fbe <qsort+0x214>
 8009fb2:	4643      	mov	r3, r8
 8009fb4:	ebab 0102 	sub.w	r1, fp, r2
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7ff febd 	bl	8009d38 <swapfunc>
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	eba3 0209 	sub.w	r2, r3, r9
 8009fc4:	eba9 0707 	sub.w	r7, r9, r7
 8009fc8:	1b12      	subs	r2, r2, r4
 8009fca:	42ba      	cmp	r2, r7
 8009fcc:	bf28      	it	cs
 8009fce:	463a      	movcs	r2, r7
 8009fd0:	b12a      	cbz	r2, 8009fde <qsort+0x234>
 8009fd2:	9903      	ldr	r1, [sp, #12]
 8009fd4:	4643      	mov	r3, r8
 8009fd6:	1a89      	subs	r1, r1, r2
 8009fd8:	4658      	mov	r0, fp
 8009fda:	f7ff fead 	bl	8009d38 <swapfunc>
 8009fde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	454f      	cmp	r7, r9
 8009fe6:	eba3 0007 	sub.w	r0, r3, r7
 8009fea:	d904      	bls.n	8009ff6 <qsort+0x24c>
 8009fec:	4633      	mov	r3, r6
 8009fee:	46b9      	mov	r9, r7
 8009ff0:	9f01      	ldr	r7, [sp, #4]
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	42a7      	cmp	r7, r4
 8009ff8:	d921      	bls.n	800a03e <qsort+0x294>
 8009ffa:	fbb7 f1f4 	udiv	r1, r7, r4
 8009ffe:	9b02      	ldr	r3, [sp, #8]
 800a000:	2b07      	cmp	r3, #7
 800a002:	d80d      	bhi.n	800a020 <qsort+0x276>
 800a004:	fbb9 f7f4 	udiv	r7, r9, r4
 800a008:	aa16      	add	r2, sp, #88	; 0x58
 800a00a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a00e:	f843 6c40 	str.w	r6, [r3, #-64]
 800a012:	f843 7c3c 	str.w	r7, [r3, #-60]
 800a016:	9b02      	ldr	r3, [sp, #8]
 800a018:	3301      	adds	r3, #1
 800a01a:	9302      	str	r3, [sp, #8]
 800a01c:	4606      	mov	r6, r0
 800a01e:	e6d5      	b.n	8009dcc <qsort+0x22>
 800a020:	4653      	mov	r3, sl
 800a022:	4622      	mov	r2, r4
 800a024:	f7ff fec1 	bl	8009daa <qsort>
 800a028:	45a1      	cmp	r9, r4
 800a02a:	d80b      	bhi.n	800a044 <qsort+0x29a>
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	aa16      	add	r2, sp, #88	; 0x58
 800a030:	3b01      	subs	r3, #1
 800a032:	9302      	str	r3, [sp, #8]
 800a034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a038:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800a03c:	e7ee      	b.n	800a01c <qsort+0x272>
 800a03e:	45a1      	cmp	r9, r4
 800a040:	f67f aed1 	bls.w	8009de6 <qsort+0x3c>
 800a044:	fbb9 f1f4 	udiv	r1, r9, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	e7e7      	b.n	800a01c <qsort+0x272>

0800a04c <rand>:
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <rand+0x60>)
 800a04e:	b510      	push	{r4, lr}
 800a050:	681c      	ldr	r4, [r3, #0]
 800a052:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a054:	b9b3      	cbnz	r3, 800a084 <rand+0x38>
 800a056:	2018      	movs	r0, #24
 800a058:	f000 fb44 	bl	800a6e4 <malloc>
 800a05c:	63a0      	str	r0, [r4, #56]	; 0x38
 800a05e:	b928      	cbnz	r0, 800a06c <rand+0x20>
 800a060:	4602      	mov	r2, r0
 800a062:	4b13      	ldr	r3, [pc, #76]	; (800a0b0 <rand+0x64>)
 800a064:	4813      	ldr	r0, [pc, #76]	; (800a0b4 <rand+0x68>)
 800a066:	214e      	movs	r1, #78	; 0x4e
 800a068:	f000 f8f0 	bl	800a24c <__assert_func>
 800a06c:	4a12      	ldr	r2, [pc, #72]	; (800a0b8 <rand+0x6c>)
 800a06e:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <rand+0x70>)
 800a070:	e9c0 2300 	strd	r2, r3, [r0]
 800a074:	4b12      	ldr	r3, [pc, #72]	; (800a0c0 <rand+0x74>)
 800a076:	6083      	str	r3, [r0, #8]
 800a078:	230b      	movs	r3, #11
 800a07a:	8183      	strh	r3, [r0, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	2300      	movs	r3, #0
 800a080:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a084:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a086:	480f      	ldr	r0, [pc, #60]	; (800a0c4 <rand+0x78>)
 800a088:	690a      	ldr	r2, [r1, #16]
 800a08a:	694b      	ldr	r3, [r1, #20]
 800a08c:	4c0e      	ldr	r4, [pc, #56]	; (800a0c8 <rand+0x7c>)
 800a08e:	4350      	muls	r0, r2
 800a090:	fb04 0003 	mla	r0, r4, r3, r0
 800a094:	fba2 3404 	umull	r3, r4, r2, r4
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	4404      	add	r4, r0
 800a09c:	f144 0000 	adc.w	r0, r4, #0
 800a0a0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a0a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a0a8:	bd10      	pop	{r4, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000018 	.word	0x20000018
 800a0b0:	0800b514 	.word	0x0800b514
 800a0b4:	0800b52b 	.word	0x0800b52b
 800a0b8:	abcd330e 	.word	0xabcd330e
 800a0bc:	e66d1234 	.word	0xe66d1234
 800a0c0:	0005deec 	.word	0x0005deec
 800a0c4:	5851f42d 	.word	0x5851f42d
 800a0c8:	4c957f2d 	.word	0x4c957f2d

0800a0cc <__swbuf_r>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	460e      	mov	r6, r1
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	b118      	cbz	r0, 800a0de <__swbuf_r+0x12>
 800a0d6:	6983      	ldr	r3, [r0, #24]
 800a0d8:	b90b      	cbnz	r3, 800a0de <__swbuf_r+0x12>
 800a0da:	f000 f9ef 	bl	800a4bc <__sinit>
 800a0de:	4b21      	ldr	r3, [pc, #132]	; (800a164 <__swbuf_r+0x98>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d12b      	bne.n	800a13c <__swbuf_r+0x70>
 800a0e4:	686c      	ldr	r4, [r5, #4]
 800a0e6:	69a3      	ldr	r3, [r4, #24]
 800a0e8:	60a3      	str	r3, [r4, #8]
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	071a      	lsls	r2, r3, #28
 800a0ee:	d52f      	bpl.n	800a150 <__swbuf_r+0x84>
 800a0f0:	6923      	ldr	r3, [r4, #16]
 800a0f2:	b36b      	cbz	r3, 800a150 <__swbuf_r+0x84>
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	6820      	ldr	r0, [r4, #0]
 800a0f8:	1ac0      	subs	r0, r0, r3
 800a0fa:	6963      	ldr	r3, [r4, #20]
 800a0fc:	b2f6      	uxtb	r6, r6
 800a0fe:	4283      	cmp	r3, r0
 800a100:	4637      	mov	r7, r6
 800a102:	dc04      	bgt.n	800a10e <__swbuf_r+0x42>
 800a104:	4621      	mov	r1, r4
 800a106:	4628      	mov	r0, r5
 800a108:	f000 f944 	bl	800a394 <_fflush_r>
 800a10c:	bb30      	cbnz	r0, 800a15c <__swbuf_r+0x90>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	3b01      	subs	r3, #1
 800a112:	60a3      	str	r3, [r4, #8]
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	6022      	str	r2, [r4, #0]
 800a11a:	701e      	strb	r6, [r3, #0]
 800a11c:	6963      	ldr	r3, [r4, #20]
 800a11e:	3001      	adds	r0, #1
 800a120:	4283      	cmp	r3, r0
 800a122:	d004      	beq.n	800a12e <__swbuf_r+0x62>
 800a124:	89a3      	ldrh	r3, [r4, #12]
 800a126:	07db      	lsls	r3, r3, #31
 800a128:	d506      	bpl.n	800a138 <__swbuf_r+0x6c>
 800a12a:	2e0a      	cmp	r6, #10
 800a12c:	d104      	bne.n	800a138 <__swbuf_r+0x6c>
 800a12e:	4621      	mov	r1, r4
 800a130:	4628      	mov	r0, r5
 800a132:	f000 f92f 	bl	800a394 <_fflush_r>
 800a136:	b988      	cbnz	r0, 800a15c <__swbuf_r+0x90>
 800a138:	4638      	mov	r0, r7
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <__swbuf_r+0x9c>)
 800a13e:	429c      	cmp	r4, r3
 800a140:	d101      	bne.n	800a146 <__swbuf_r+0x7a>
 800a142:	68ac      	ldr	r4, [r5, #8]
 800a144:	e7cf      	b.n	800a0e6 <__swbuf_r+0x1a>
 800a146:	4b09      	ldr	r3, [pc, #36]	; (800a16c <__swbuf_r+0xa0>)
 800a148:	429c      	cmp	r4, r3
 800a14a:	bf08      	it	eq
 800a14c:	68ec      	ldreq	r4, [r5, #12]
 800a14e:	e7ca      	b.n	800a0e6 <__swbuf_r+0x1a>
 800a150:	4621      	mov	r1, r4
 800a152:	4628      	mov	r0, r5
 800a154:	f000 f80c 	bl	800a170 <__swsetup_r>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d0cb      	beq.n	800a0f4 <__swbuf_r+0x28>
 800a15c:	f04f 37ff 	mov.w	r7, #4294967295
 800a160:	e7ea      	b.n	800a138 <__swbuf_r+0x6c>
 800a162:	bf00      	nop
 800a164:	0800b5e8 	.word	0x0800b5e8
 800a168:	0800b608 	.word	0x0800b608
 800a16c:	0800b5c8 	.word	0x0800b5c8

0800a170 <__swsetup_r>:
 800a170:	4b32      	ldr	r3, [pc, #200]	; (800a23c <__swsetup_r+0xcc>)
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	681d      	ldr	r5, [r3, #0]
 800a176:	4606      	mov	r6, r0
 800a178:	460c      	mov	r4, r1
 800a17a:	b125      	cbz	r5, 800a186 <__swsetup_r+0x16>
 800a17c:	69ab      	ldr	r3, [r5, #24]
 800a17e:	b913      	cbnz	r3, 800a186 <__swsetup_r+0x16>
 800a180:	4628      	mov	r0, r5
 800a182:	f000 f99b 	bl	800a4bc <__sinit>
 800a186:	4b2e      	ldr	r3, [pc, #184]	; (800a240 <__swsetup_r+0xd0>)
 800a188:	429c      	cmp	r4, r3
 800a18a:	d10f      	bne.n	800a1ac <__swsetup_r+0x3c>
 800a18c:	686c      	ldr	r4, [r5, #4]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a194:	0719      	lsls	r1, r3, #28
 800a196:	d42c      	bmi.n	800a1f2 <__swsetup_r+0x82>
 800a198:	06dd      	lsls	r5, r3, #27
 800a19a:	d411      	bmi.n	800a1c0 <__swsetup_r+0x50>
 800a19c:	2309      	movs	r3, #9
 800a19e:	6033      	str	r3, [r6, #0]
 800a1a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1a4:	81a3      	strh	r3, [r4, #12]
 800a1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1aa:	e03e      	b.n	800a22a <__swsetup_r+0xba>
 800a1ac:	4b25      	ldr	r3, [pc, #148]	; (800a244 <__swsetup_r+0xd4>)
 800a1ae:	429c      	cmp	r4, r3
 800a1b0:	d101      	bne.n	800a1b6 <__swsetup_r+0x46>
 800a1b2:	68ac      	ldr	r4, [r5, #8]
 800a1b4:	e7eb      	b.n	800a18e <__swsetup_r+0x1e>
 800a1b6:	4b24      	ldr	r3, [pc, #144]	; (800a248 <__swsetup_r+0xd8>)
 800a1b8:	429c      	cmp	r4, r3
 800a1ba:	bf08      	it	eq
 800a1bc:	68ec      	ldreq	r4, [r5, #12]
 800a1be:	e7e6      	b.n	800a18e <__swsetup_r+0x1e>
 800a1c0:	0758      	lsls	r0, r3, #29
 800a1c2:	d512      	bpl.n	800a1ea <__swsetup_r+0x7a>
 800a1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1c6:	b141      	cbz	r1, 800a1da <__swsetup_r+0x6a>
 800a1c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1cc:	4299      	cmp	r1, r3
 800a1ce:	d002      	beq.n	800a1d6 <__swsetup_r+0x66>
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 fa8f 	bl	800a6f4 <_free_r>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	6063      	str	r3, [r4, #4]
 800a1e6:	6923      	ldr	r3, [r4, #16]
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f043 0308 	orr.w	r3, r3, #8
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	b94b      	cbnz	r3, 800a20a <__swsetup_r+0x9a>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a200:	d003      	beq.n	800a20a <__swsetup_r+0x9a>
 800a202:	4621      	mov	r1, r4
 800a204:	4630      	mov	r0, r6
 800a206:	f000 fa2d 	bl	800a664 <__smakebuf_r>
 800a20a:	89a0      	ldrh	r0, [r4, #12]
 800a20c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a210:	f010 0301 	ands.w	r3, r0, #1
 800a214:	d00a      	beq.n	800a22c <__swsetup_r+0xbc>
 800a216:	2300      	movs	r3, #0
 800a218:	60a3      	str	r3, [r4, #8]
 800a21a:	6963      	ldr	r3, [r4, #20]
 800a21c:	425b      	negs	r3, r3
 800a21e:	61a3      	str	r3, [r4, #24]
 800a220:	6923      	ldr	r3, [r4, #16]
 800a222:	b943      	cbnz	r3, 800a236 <__swsetup_r+0xc6>
 800a224:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a228:	d1ba      	bne.n	800a1a0 <__swsetup_r+0x30>
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
 800a22c:	0781      	lsls	r1, r0, #30
 800a22e:	bf58      	it	pl
 800a230:	6963      	ldrpl	r3, [r4, #20]
 800a232:	60a3      	str	r3, [r4, #8]
 800a234:	e7f4      	b.n	800a220 <__swsetup_r+0xb0>
 800a236:	2000      	movs	r0, #0
 800a238:	e7f7      	b.n	800a22a <__swsetup_r+0xba>
 800a23a:	bf00      	nop
 800a23c:	20000018 	.word	0x20000018
 800a240:	0800b5e8 	.word	0x0800b5e8
 800a244:	0800b608 	.word	0x0800b608
 800a248:	0800b5c8 	.word	0x0800b5c8

0800a24c <__assert_func>:
 800a24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a24e:	4614      	mov	r4, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <__assert_func+0x2c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4605      	mov	r5, r0
 800a258:	68d8      	ldr	r0, [r3, #12]
 800a25a:	b14c      	cbz	r4, 800a270 <__assert_func+0x24>
 800a25c:	4b07      	ldr	r3, [pc, #28]	; (800a27c <__assert_func+0x30>)
 800a25e:	9100      	str	r1, [sp, #0]
 800a260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a264:	4906      	ldr	r1, [pc, #24]	; (800a280 <__assert_func+0x34>)
 800a266:	462b      	mov	r3, r5
 800a268:	f000 f9a6 	bl	800a5b8 <fiprintf>
 800a26c:	f000 fe88 	bl	800af80 <abort>
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <__assert_func+0x38>)
 800a272:	461c      	mov	r4, r3
 800a274:	e7f3      	b.n	800a25e <__assert_func+0x12>
 800a276:	bf00      	nop
 800a278:	20000018 	.word	0x20000018
 800a27c:	0800b58a 	.word	0x0800b58a
 800a280:	0800b597 	.word	0x0800b597
 800a284:	0800b5c5 	.word	0x0800b5c5

0800a288 <__sflush_r>:
 800a288:	898a      	ldrh	r2, [r1, #12]
 800a28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	0710      	lsls	r0, r2, #28
 800a292:	460c      	mov	r4, r1
 800a294:	d458      	bmi.n	800a348 <__sflush_r+0xc0>
 800a296:	684b      	ldr	r3, [r1, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	dc05      	bgt.n	800a2a8 <__sflush_r+0x20>
 800a29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	dc02      	bgt.n	800a2a8 <__sflush_r+0x20>
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2aa:	2e00      	cmp	r6, #0
 800a2ac:	d0f9      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2b4:	682f      	ldr	r7, [r5, #0]
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	d032      	beq.n	800a320 <__sflush_r+0x98>
 800a2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	075a      	lsls	r2, r3, #29
 800a2c0:	d505      	bpl.n	800a2ce <__sflush_r+0x46>
 800a2c2:	6863      	ldr	r3, [r4, #4]
 800a2c4:	1ac0      	subs	r0, r0, r3
 800a2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2c8:	b10b      	cbz	r3, 800a2ce <__sflush_r+0x46>
 800a2ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2cc:	1ac0      	subs	r0, r0, r3
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2d4:	6a21      	ldr	r1, [r4, #32]
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	47b0      	blx	r6
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	d106      	bne.n	800a2ee <__sflush_r+0x66>
 800a2e0:	6829      	ldr	r1, [r5, #0]
 800a2e2:	291d      	cmp	r1, #29
 800a2e4:	d82c      	bhi.n	800a340 <__sflush_r+0xb8>
 800a2e6:	4a2a      	ldr	r2, [pc, #168]	; (800a390 <__sflush_r+0x108>)
 800a2e8:	40ca      	lsrs	r2, r1
 800a2ea:	07d6      	lsls	r6, r2, #31
 800a2ec:	d528      	bpl.n	800a340 <__sflush_r+0xb8>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	6062      	str	r2, [r4, #4]
 800a2f2:	04d9      	lsls	r1, r3, #19
 800a2f4:	6922      	ldr	r2, [r4, #16]
 800a2f6:	6022      	str	r2, [r4, #0]
 800a2f8:	d504      	bpl.n	800a304 <__sflush_r+0x7c>
 800a2fa:	1c42      	adds	r2, r0, #1
 800a2fc:	d101      	bne.n	800a302 <__sflush_r+0x7a>
 800a2fe:	682b      	ldr	r3, [r5, #0]
 800a300:	b903      	cbnz	r3, 800a304 <__sflush_r+0x7c>
 800a302:	6560      	str	r0, [r4, #84]	; 0x54
 800a304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a306:	602f      	str	r7, [r5, #0]
 800a308:	2900      	cmp	r1, #0
 800a30a:	d0ca      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <__sflush_r+0x92>
 800a314:	4628      	mov	r0, r5
 800a316:	f000 f9ed 	bl	800a6f4 <_free_r>
 800a31a:	2000      	movs	r0, #0
 800a31c:	6360      	str	r0, [r4, #52]	; 0x34
 800a31e:	e7c1      	b.n	800a2a4 <__sflush_r+0x1c>
 800a320:	6a21      	ldr	r1, [r4, #32]
 800a322:	2301      	movs	r3, #1
 800a324:	4628      	mov	r0, r5
 800a326:	47b0      	blx	r6
 800a328:	1c41      	adds	r1, r0, #1
 800a32a:	d1c7      	bne.n	800a2bc <__sflush_r+0x34>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0c4      	beq.n	800a2bc <__sflush_r+0x34>
 800a332:	2b1d      	cmp	r3, #29
 800a334:	d001      	beq.n	800a33a <__sflush_r+0xb2>
 800a336:	2b16      	cmp	r3, #22
 800a338:	d101      	bne.n	800a33e <__sflush_r+0xb6>
 800a33a:	602f      	str	r7, [r5, #0]
 800a33c:	e7b1      	b.n	800a2a2 <__sflush_r+0x1a>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	e7ad      	b.n	800a2a4 <__sflush_r+0x1c>
 800a348:	690f      	ldr	r7, [r1, #16]
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	d0a9      	beq.n	800a2a2 <__sflush_r+0x1a>
 800a34e:	0793      	lsls	r3, r2, #30
 800a350:	680e      	ldr	r6, [r1, #0]
 800a352:	bf08      	it	eq
 800a354:	694b      	ldreq	r3, [r1, #20]
 800a356:	600f      	str	r7, [r1, #0]
 800a358:	bf18      	it	ne
 800a35a:	2300      	movne	r3, #0
 800a35c:	eba6 0807 	sub.w	r8, r6, r7
 800a360:	608b      	str	r3, [r1, #8]
 800a362:	f1b8 0f00 	cmp.w	r8, #0
 800a366:	dd9c      	ble.n	800a2a2 <__sflush_r+0x1a>
 800a368:	6a21      	ldr	r1, [r4, #32]
 800a36a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a36c:	4643      	mov	r3, r8
 800a36e:	463a      	mov	r2, r7
 800a370:	4628      	mov	r0, r5
 800a372:	47b0      	blx	r6
 800a374:	2800      	cmp	r0, #0
 800a376:	dc06      	bgt.n	800a386 <__sflush_r+0xfe>
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	f04f 30ff 	mov.w	r0, #4294967295
 800a384:	e78e      	b.n	800a2a4 <__sflush_r+0x1c>
 800a386:	4407      	add	r7, r0
 800a388:	eba8 0800 	sub.w	r8, r8, r0
 800a38c:	e7e9      	b.n	800a362 <__sflush_r+0xda>
 800a38e:	bf00      	nop
 800a390:	20400001 	.word	0x20400001

0800a394 <_fflush_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	690b      	ldr	r3, [r1, #16]
 800a398:	4605      	mov	r5, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b913      	cbnz	r3, 800a3a4 <_fflush_r+0x10>
 800a39e:	2500      	movs	r5, #0
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	b118      	cbz	r0, 800a3ae <_fflush_r+0x1a>
 800a3a6:	6983      	ldr	r3, [r0, #24]
 800a3a8:	b90b      	cbnz	r3, 800a3ae <_fflush_r+0x1a>
 800a3aa:	f000 f887 	bl	800a4bc <__sinit>
 800a3ae:	4b14      	ldr	r3, [pc, #80]	; (800a400 <_fflush_r+0x6c>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d11b      	bne.n	800a3ec <_fflush_r+0x58>
 800a3b4:	686c      	ldr	r4, [r5, #4]
 800a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d0ef      	beq.n	800a39e <_fflush_r+0xa>
 800a3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3c0:	07d0      	lsls	r0, r2, #31
 800a3c2:	d404      	bmi.n	800a3ce <_fflush_r+0x3a>
 800a3c4:	0599      	lsls	r1, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_fflush_r+0x3a>
 800a3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ca:	f7ff fbf8 	bl	8009bbe <__retarget_lock_acquire_recursive>
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	f7ff ff59 	bl	800a288 <__sflush_r>
 800a3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3d8:	07da      	lsls	r2, r3, #31
 800a3da:	4605      	mov	r5, r0
 800a3dc:	d4e0      	bmi.n	800a3a0 <_fflush_r+0xc>
 800a3de:	89a3      	ldrh	r3, [r4, #12]
 800a3e0:	059b      	lsls	r3, r3, #22
 800a3e2:	d4dd      	bmi.n	800a3a0 <_fflush_r+0xc>
 800a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e6:	f7ff fbeb 	bl	8009bc0 <__retarget_lock_release_recursive>
 800a3ea:	e7d9      	b.n	800a3a0 <_fflush_r+0xc>
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <_fflush_r+0x70>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d101      	bne.n	800a3f6 <_fflush_r+0x62>
 800a3f2:	68ac      	ldr	r4, [r5, #8]
 800a3f4:	e7df      	b.n	800a3b6 <_fflush_r+0x22>
 800a3f6:	4b04      	ldr	r3, [pc, #16]	; (800a408 <_fflush_r+0x74>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	bf08      	it	eq
 800a3fc:	68ec      	ldreq	r4, [r5, #12]
 800a3fe:	e7da      	b.n	800a3b6 <_fflush_r+0x22>
 800a400:	0800b5e8 	.word	0x0800b5e8
 800a404:	0800b608 	.word	0x0800b608
 800a408:	0800b5c8 	.word	0x0800b5c8

0800a40c <std>:
 800a40c:	2300      	movs	r3, #0
 800a40e:	b510      	push	{r4, lr}
 800a410:	4604      	mov	r4, r0
 800a412:	e9c0 3300 	strd	r3, r3, [r0]
 800a416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a41a:	6083      	str	r3, [r0, #8]
 800a41c:	8181      	strh	r1, [r0, #12]
 800a41e:	6643      	str	r3, [r0, #100]	; 0x64
 800a420:	81c2      	strh	r2, [r0, #14]
 800a422:	6183      	str	r3, [r0, #24]
 800a424:	4619      	mov	r1, r3
 800a426:	2208      	movs	r2, #8
 800a428:	305c      	adds	r0, #92	; 0x5c
 800a42a:	f7ff fbd8 	bl	8009bde <memset>
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x38>)
 800a430:	6263      	str	r3, [r4, #36]	; 0x24
 800a432:	4b05      	ldr	r3, [pc, #20]	; (800a448 <std+0x3c>)
 800a434:	62a3      	str	r3, [r4, #40]	; 0x28
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x40>)
 800a438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <std+0x44>)
 800a43c:	6224      	str	r4, [r4, #32]
 800a43e:	6323      	str	r3, [r4, #48]	; 0x30
 800a440:	bd10      	pop	{r4, pc}
 800a442:	bf00      	nop
 800a444:	0800aed5 	.word	0x0800aed5
 800a448:	0800aef7 	.word	0x0800aef7
 800a44c:	0800af2f 	.word	0x0800af2f
 800a450:	0800af53 	.word	0x0800af53

0800a454 <_cleanup_r>:
 800a454:	4901      	ldr	r1, [pc, #4]	; (800a45c <_cleanup_r+0x8>)
 800a456:	f000 b8c1 	b.w	800a5dc <_fwalk_reent>
 800a45a:	bf00      	nop
 800a45c:	0800a395 	.word	0x0800a395

0800a460 <__sfmoreglue>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	1e4a      	subs	r2, r1, #1
 800a464:	2568      	movs	r5, #104	; 0x68
 800a466:	4355      	muls	r5, r2
 800a468:	460e      	mov	r6, r1
 800a46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a46e:	f000 f991 	bl	800a794 <_malloc_r>
 800a472:	4604      	mov	r4, r0
 800a474:	b140      	cbz	r0, 800a488 <__sfmoreglue+0x28>
 800a476:	2100      	movs	r1, #0
 800a478:	e9c0 1600 	strd	r1, r6, [r0]
 800a47c:	300c      	adds	r0, #12
 800a47e:	60a0      	str	r0, [r4, #8]
 800a480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a484:	f7ff fbab 	bl	8009bde <memset>
 800a488:	4620      	mov	r0, r4
 800a48a:	bd70      	pop	{r4, r5, r6, pc}

0800a48c <__sfp_lock_acquire>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sfp_lock_acquire+0x8>)
 800a48e:	f7ff bb96 	b.w	8009bbe <__retarget_lock_acquire_recursive>
 800a492:	bf00      	nop
 800a494:	200020cc 	.word	0x200020cc

0800a498 <__sfp_lock_release>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__sfp_lock_release+0x8>)
 800a49a:	f7ff bb91 	b.w	8009bc0 <__retarget_lock_release_recursive>
 800a49e:	bf00      	nop
 800a4a0:	200020cc 	.word	0x200020cc

0800a4a4 <__sinit_lock_acquire>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sinit_lock_acquire+0x8>)
 800a4a6:	f7ff bb8a 	b.w	8009bbe <__retarget_lock_acquire_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	200020c7 	.word	0x200020c7

0800a4b0 <__sinit_lock_release>:
 800a4b0:	4801      	ldr	r0, [pc, #4]	; (800a4b8 <__sinit_lock_release+0x8>)
 800a4b2:	f7ff bb85 	b.w	8009bc0 <__retarget_lock_release_recursive>
 800a4b6:	bf00      	nop
 800a4b8:	200020c7 	.word	0x200020c7

0800a4bc <__sinit>:
 800a4bc:	b510      	push	{r4, lr}
 800a4be:	4604      	mov	r4, r0
 800a4c0:	f7ff fff0 	bl	800a4a4 <__sinit_lock_acquire>
 800a4c4:	69a3      	ldr	r3, [r4, #24]
 800a4c6:	b11b      	cbz	r3, 800a4d0 <__sinit+0x14>
 800a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4cc:	f7ff bff0 	b.w	800a4b0 <__sinit_lock_release>
 800a4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a4d6:	4b13      	ldr	r3, [pc, #76]	; (800a524 <__sinit+0x68>)
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <__sinit+0x6c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	bf04      	itt	eq
 800a4e2:	2301      	moveq	r3, #1
 800a4e4:	61a3      	streq	r3, [r4, #24]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 f820 	bl	800a52c <__sfp>
 800a4ec:	6060      	str	r0, [r4, #4]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f81c 	bl	800a52c <__sfp>
 800a4f4:	60a0      	str	r0, [r4, #8]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f818 	bl	800a52c <__sfp>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60e0      	str	r0, [r4, #12]
 800a500:	2104      	movs	r1, #4
 800a502:	6860      	ldr	r0, [r4, #4]
 800a504:	f7ff ff82 	bl	800a40c <std>
 800a508:	68a0      	ldr	r0, [r4, #8]
 800a50a:	2201      	movs	r2, #1
 800a50c:	2109      	movs	r1, #9
 800a50e:	f7ff ff7d 	bl	800a40c <std>
 800a512:	68e0      	ldr	r0, [r4, #12]
 800a514:	2202      	movs	r2, #2
 800a516:	2112      	movs	r1, #18
 800a518:	f7ff ff78 	bl	800a40c <std>
 800a51c:	2301      	movs	r3, #1
 800a51e:	61a3      	str	r3, [r4, #24]
 800a520:	e7d2      	b.n	800a4c8 <__sinit+0xc>
 800a522:	bf00      	nop
 800a524:	0800b510 	.word	0x0800b510
 800a528:	0800a455 	.word	0x0800a455

0800a52c <__sfp>:
 800a52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52e:	4607      	mov	r7, r0
 800a530:	f7ff ffac 	bl	800a48c <__sfp_lock_acquire>
 800a534:	4b1e      	ldr	r3, [pc, #120]	; (800a5b0 <__sfp+0x84>)
 800a536:	681e      	ldr	r6, [r3, #0]
 800a538:	69b3      	ldr	r3, [r6, #24]
 800a53a:	b913      	cbnz	r3, 800a542 <__sfp+0x16>
 800a53c:	4630      	mov	r0, r6
 800a53e:	f7ff ffbd 	bl	800a4bc <__sinit>
 800a542:	3648      	adds	r6, #72	; 0x48
 800a544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	d503      	bpl.n	800a554 <__sfp+0x28>
 800a54c:	6833      	ldr	r3, [r6, #0]
 800a54e:	b30b      	cbz	r3, 800a594 <__sfp+0x68>
 800a550:	6836      	ldr	r6, [r6, #0]
 800a552:	e7f7      	b.n	800a544 <__sfp+0x18>
 800a554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a558:	b9d5      	cbnz	r5, 800a590 <__sfp+0x64>
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <__sfp+0x88>)
 800a55c:	60e3      	str	r3, [r4, #12]
 800a55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a562:	6665      	str	r5, [r4, #100]	; 0x64
 800a564:	f7ff fb2a 	bl	8009bbc <__retarget_lock_init_recursive>
 800a568:	f7ff ff96 	bl	800a498 <__sfp_lock_release>
 800a56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a574:	6025      	str	r5, [r4, #0]
 800a576:	61a5      	str	r5, [r4, #24]
 800a578:	2208      	movs	r2, #8
 800a57a:	4629      	mov	r1, r5
 800a57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a580:	f7ff fb2d 	bl	8009bde <memset>
 800a584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a58c:	4620      	mov	r0, r4
 800a58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a590:	3468      	adds	r4, #104	; 0x68
 800a592:	e7d9      	b.n	800a548 <__sfp+0x1c>
 800a594:	2104      	movs	r1, #4
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff ff62 	bl	800a460 <__sfmoreglue>
 800a59c:	4604      	mov	r4, r0
 800a59e:	6030      	str	r0, [r6, #0]
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1d5      	bne.n	800a550 <__sfp+0x24>
 800a5a4:	f7ff ff78 	bl	800a498 <__sfp_lock_release>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	e7ee      	b.n	800a58c <__sfp+0x60>
 800a5ae:	bf00      	nop
 800a5b0:	0800b510 	.word	0x0800b510
 800a5b4:	ffff0001 	.word	0xffff0001

0800a5b8 <fiprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b503      	push	{r0, r1, lr}
 800a5bc:	4601      	mov	r1, r0
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <fiprintf+0x20>)
 800a5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	f000 f967 	bl	800a89c <_vfiprintf_r>
 800a5ce:	b002      	add	sp, #8
 800a5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5d4:	b003      	add	sp, #12
 800a5d6:	4770      	bx	lr
 800a5d8:	20000018 	.word	0x20000018

0800a5dc <_fwalk_reent>:
 800a5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	4688      	mov	r8, r1
 800a5e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5e8:	2700      	movs	r7, #0
 800a5ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5ee:	f1b9 0901 	subs.w	r9, r9, #1
 800a5f2:	d505      	bpl.n	800a600 <_fwalk_reent+0x24>
 800a5f4:	6824      	ldr	r4, [r4, #0]
 800a5f6:	2c00      	cmp	r4, #0
 800a5f8:	d1f7      	bne.n	800a5ea <_fwalk_reent+0xe>
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a600:	89ab      	ldrh	r3, [r5, #12]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d907      	bls.n	800a616 <_fwalk_reent+0x3a>
 800a606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a60a:	3301      	adds	r3, #1
 800a60c:	d003      	beq.n	800a616 <_fwalk_reent+0x3a>
 800a60e:	4629      	mov	r1, r5
 800a610:	4630      	mov	r0, r6
 800a612:	47c0      	blx	r8
 800a614:	4307      	orrs	r7, r0
 800a616:	3568      	adds	r5, #104	; 0x68
 800a618:	e7e9      	b.n	800a5ee <_fwalk_reent+0x12>

0800a61a <__swhatbuf_r>:
 800a61a:	b570      	push	{r4, r5, r6, lr}
 800a61c:	460e      	mov	r6, r1
 800a61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a622:	2900      	cmp	r1, #0
 800a624:	b096      	sub	sp, #88	; 0x58
 800a626:	4614      	mov	r4, r2
 800a628:	461d      	mov	r5, r3
 800a62a:	da07      	bge.n	800a63c <__swhatbuf_r+0x22>
 800a62c:	2300      	movs	r3, #0
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	89b3      	ldrh	r3, [r6, #12]
 800a632:	061a      	lsls	r2, r3, #24
 800a634:	d410      	bmi.n	800a658 <__swhatbuf_r+0x3e>
 800a636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63a:	e00e      	b.n	800a65a <__swhatbuf_r+0x40>
 800a63c:	466a      	mov	r2, sp
 800a63e:	f000 fcb7 	bl	800afb0 <_fstat_r>
 800a642:	2800      	cmp	r0, #0
 800a644:	dbf2      	blt.n	800a62c <__swhatbuf_r+0x12>
 800a646:	9a01      	ldr	r2, [sp, #4]
 800a648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a64c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a650:	425a      	negs	r2, r3
 800a652:	415a      	adcs	r2, r3
 800a654:	602a      	str	r2, [r5, #0]
 800a656:	e7ee      	b.n	800a636 <__swhatbuf_r+0x1c>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	2000      	movs	r0, #0
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	b016      	add	sp, #88	; 0x58
 800a660:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a664 <__smakebuf_r>:
 800a664:	898b      	ldrh	r3, [r1, #12]
 800a666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a668:	079d      	lsls	r5, r3, #30
 800a66a:	4606      	mov	r6, r0
 800a66c:	460c      	mov	r4, r1
 800a66e:	d507      	bpl.n	800a680 <__smakebuf_r+0x1c>
 800a670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	6123      	str	r3, [r4, #16]
 800a678:	2301      	movs	r3, #1
 800a67a:	6163      	str	r3, [r4, #20]
 800a67c:	b002      	add	sp, #8
 800a67e:	bd70      	pop	{r4, r5, r6, pc}
 800a680:	ab01      	add	r3, sp, #4
 800a682:	466a      	mov	r2, sp
 800a684:	f7ff ffc9 	bl	800a61a <__swhatbuf_r>
 800a688:	9900      	ldr	r1, [sp, #0]
 800a68a:	4605      	mov	r5, r0
 800a68c:	4630      	mov	r0, r6
 800a68e:	f000 f881 	bl	800a794 <_malloc_r>
 800a692:	b948      	cbnz	r0, 800a6a8 <__smakebuf_r+0x44>
 800a694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d4ef      	bmi.n	800a67c <__smakebuf_r+0x18>
 800a69c:	f023 0303 	bic.w	r3, r3, #3
 800a6a0:	f043 0302 	orr.w	r3, r3, #2
 800a6a4:	81a3      	strh	r3, [r4, #12]
 800a6a6:	e7e3      	b.n	800a670 <__smakebuf_r+0xc>
 800a6a8:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <__smakebuf_r+0x7c>)
 800a6aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	6020      	str	r0, [r4, #0]
 800a6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	9b00      	ldr	r3, [sp, #0]
 800a6b8:	6163      	str	r3, [r4, #20]
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	6120      	str	r0, [r4, #16]
 800a6be:	b15b      	cbz	r3, 800a6d8 <__smakebuf_r+0x74>
 800a6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 fc85 	bl	800afd4 <_isatty_r>
 800a6ca:	b128      	cbz	r0, 800a6d8 <__smakebuf_r+0x74>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	f023 0303 	bic.w	r3, r3, #3
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	81a3      	strh	r3, [r4, #12]
 800a6d8:	89a0      	ldrh	r0, [r4, #12]
 800a6da:	4305      	orrs	r5, r0
 800a6dc:	81a5      	strh	r5, [r4, #12]
 800a6de:	e7cd      	b.n	800a67c <__smakebuf_r+0x18>
 800a6e0:	0800a455 	.word	0x0800a455

0800a6e4 <malloc>:
 800a6e4:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <malloc+0xc>)
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f000 b853 	b.w	800a794 <_malloc_r>
 800a6ee:	bf00      	nop
 800a6f0:	20000018 	.word	0x20000018

0800a6f4 <_free_r>:
 800a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d048      	beq.n	800a78c <_free_r+0x98>
 800a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fe:	9001      	str	r0, [sp, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	f1a1 0404 	sub.w	r4, r1, #4
 800a706:	bfb8      	it	lt
 800a708:	18e4      	addlt	r4, r4, r3
 800a70a:	f000 fc85 	bl	800b018 <__malloc_lock>
 800a70e:	4a20      	ldr	r2, [pc, #128]	; (800a790 <_free_r+0x9c>)
 800a710:	9801      	ldr	r0, [sp, #4]
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	4615      	mov	r5, r2
 800a716:	b933      	cbnz	r3, 800a726 <_free_r+0x32>
 800a718:	6063      	str	r3, [r4, #4]
 800a71a:	6014      	str	r4, [r2, #0]
 800a71c:	b003      	add	sp, #12
 800a71e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a722:	f000 bc7f 	b.w	800b024 <__malloc_unlock>
 800a726:	42a3      	cmp	r3, r4
 800a728:	d90b      	bls.n	800a742 <_free_r+0x4e>
 800a72a:	6821      	ldr	r1, [r4, #0]
 800a72c:	1862      	adds	r2, r4, r1
 800a72e:	4293      	cmp	r3, r2
 800a730:	bf04      	itt	eq
 800a732:	681a      	ldreq	r2, [r3, #0]
 800a734:	685b      	ldreq	r3, [r3, #4]
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	bf04      	itt	eq
 800a73a:	1852      	addeq	r2, r2, r1
 800a73c:	6022      	streq	r2, [r4, #0]
 800a73e:	602c      	str	r4, [r5, #0]
 800a740:	e7ec      	b.n	800a71c <_free_r+0x28>
 800a742:	461a      	mov	r2, r3
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	b10b      	cbz	r3, 800a74c <_free_r+0x58>
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d9fa      	bls.n	800a742 <_free_r+0x4e>
 800a74c:	6811      	ldr	r1, [r2, #0]
 800a74e:	1855      	adds	r5, r2, r1
 800a750:	42a5      	cmp	r5, r4
 800a752:	d10b      	bne.n	800a76c <_free_r+0x78>
 800a754:	6824      	ldr	r4, [r4, #0]
 800a756:	4421      	add	r1, r4
 800a758:	1854      	adds	r4, r2, r1
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	d1dd      	bne.n	800a71c <_free_r+0x28>
 800a760:	681c      	ldr	r4, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	6053      	str	r3, [r2, #4]
 800a766:	4421      	add	r1, r4
 800a768:	6011      	str	r1, [r2, #0]
 800a76a:	e7d7      	b.n	800a71c <_free_r+0x28>
 800a76c:	d902      	bls.n	800a774 <_free_r+0x80>
 800a76e:	230c      	movs	r3, #12
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	e7d3      	b.n	800a71c <_free_r+0x28>
 800a774:	6825      	ldr	r5, [r4, #0]
 800a776:	1961      	adds	r1, r4, r5
 800a778:	428b      	cmp	r3, r1
 800a77a:	bf04      	itt	eq
 800a77c:	6819      	ldreq	r1, [r3, #0]
 800a77e:	685b      	ldreq	r3, [r3, #4]
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	bf04      	itt	eq
 800a784:	1949      	addeq	r1, r1, r5
 800a786:	6021      	streq	r1, [r4, #0]
 800a788:	6054      	str	r4, [r2, #4]
 800a78a:	e7c7      	b.n	800a71c <_free_r+0x28>
 800a78c:	b003      	add	sp, #12
 800a78e:	bd30      	pop	{r4, r5, pc}
 800a790:	200000d0 	.word	0x200000d0

0800a794 <_malloc_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	1ccd      	adds	r5, r1, #3
 800a798:	f025 0503 	bic.w	r5, r5, #3
 800a79c:	3508      	adds	r5, #8
 800a79e:	2d0c      	cmp	r5, #12
 800a7a0:	bf38      	it	cc
 800a7a2:	250c      	movcc	r5, #12
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	db01      	blt.n	800a7ae <_malloc_r+0x1a>
 800a7aa:	42a9      	cmp	r1, r5
 800a7ac:	d903      	bls.n	800a7b6 <_malloc_r+0x22>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6033      	str	r3, [r6, #0]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b6:	f000 fc2f 	bl	800b018 <__malloc_lock>
 800a7ba:	4921      	ldr	r1, [pc, #132]	; (800a840 <_malloc_r+0xac>)
 800a7bc:	680a      	ldr	r2, [r1, #0]
 800a7be:	4614      	mov	r4, r2
 800a7c0:	b99c      	cbnz	r4, 800a7ea <_malloc_r+0x56>
 800a7c2:	4f20      	ldr	r7, [pc, #128]	; (800a844 <_malloc_r+0xb0>)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	b923      	cbnz	r3, 800a7d2 <_malloc_r+0x3e>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f000 fb72 	bl	800aeb4 <_sbrk_r>
 800a7d0:	6038      	str	r0, [r7, #0]
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f000 fb6d 	bl	800aeb4 <_sbrk_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d123      	bne.n	800a826 <_malloc_r+0x92>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 fc1e 	bl	800b024 <__malloc_unlock>
 800a7e8:	e7e3      	b.n	800a7b2 <_malloc_r+0x1e>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	1b5b      	subs	r3, r3, r5
 800a7ee:	d417      	bmi.n	800a820 <_malloc_r+0x8c>
 800a7f0:	2b0b      	cmp	r3, #11
 800a7f2:	d903      	bls.n	800a7fc <_malloc_r+0x68>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	441c      	add	r4, r3
 800a7f8:	6025      	str	r5, [r4, #0]
 800a7fa:	e004      	b.n	800a806 <_malloc_r+0x72>
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	42a2      	cmp	r2, r4
 800a800:	bf0c      	ite	eq
 800a802:	600b      	streq	r3, [r1, #0]
 800a804:	6053      	strne	r3, [r2, #4]
 800a806:	4630      	mov	r0, r6
 800a808:	f000 fc0c 	bl	800b024 <__malloc_unlock>
 800a80c:	f104 000b 	add.w	r0, r4, #11
 800a810:	1d23      	adds	r3, r4, #4
 800a812:	f020 0007 	bic.w	r0, r0, #7
 800a816:	1ac2      	subs	r2, r0, r3
 800a818:	d0cc      	beq.n	800a7b4 <_malloc_r+0x20>
 800a81a:	1a1b      	subs	r3, r3, r0
 800a81c:	50a3      	str	r3, [r4, r2]
 800a81e:	e7c9      	b.n	800a7b4 <_malloc_r+0x20>
 800a820:	4622      	mov	r2, r4
 800a822:	6864      	ldr	r4, [r4, #4]
 800a824:	e7cc      	b.n	800a7c0 <_malloc_r+0x2c>
 800a826:	1cc4      	adds	r4, r0, #3
 800a828:	f024 0403 	bic.w	r4, r4, #3
 800a82c:	42a0      	cmp	r0, r4
 800a82e:	d0e3      	beq.n	800a7f8 <_malloc_r+0x64>
 800a830:	1a21      	subs	r1, r4, r0
 800a832:	4630      	mov	r0, r6
 800a834:	f000 fb3e 	bl	800aeb4 <_sbrk_r>
 800a838:	3001      	adds	r0, #1
 800a83a:	d1dd      	bne.n	800a7f8 <_malloc_r+0x64>
 800a83c:	e7cf      	b.n	800a7de <_malloc_r+0x4a>
 800a83e:	bf00      	nop
 800a840:	200000d0 	.word	0x200000d0
 800a844:	200000d4 	.word	0x200000d4

0800a848 <__sfputc_r>:
 800a848:	6893      	ldr	r3, [r2, #8]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	b410      	push	{r4}
 800a850:	6093      	str	r3, [r2, #8]
 800a852:	da08      	bge.n	800a866 <__sfputc_r+0x1e>
 800a854:	6994      	ldr	r4, [r2, #24]
 800a856:	42a3      	cmp	r3, r4
 800a858:	db01      	blt.n	800a85e <__sfputc_r+0x16>
 800a85a:	290a      	cmp	r1, #10
 800a85c:	d103      	bne.n	800a866 <__sfputc_r+0x1e>
 800a85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a862:	f7ff bc33 	b.w	800a0cc <__swbuf_r>
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	1c58      	adds	r0, r3, #1
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	7019      	strb	r1, [r3, #0]
 800a86e:	4608      	mov	r0, r1
 800a870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <__sfputs_r>:
 800a876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	18d5      	adds	r5, r2, r3
 800a880:	42ac      	cmp	r4, r5
 800a882:	d101      	bne.n	800a888 <__sfputs_r+0x12>
 800a884:	2000      	movs	r0, #0
 800a886:	e007      	b.n	800a898 <__sfputs_r+0x22>
 800a888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88c:	463a      	mov	r2, r7
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff ffda 	bl	800a848 <__sfputc_r>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d1f3      	bne.n	800a880 <__sfputs_r+0xa>
 800a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a89c <_vfiprintf_r>:
 800a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	b09d      	sub	sp, #116	; 0x74
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	4698      	mov	r8, r3
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	b118      	cbz	r0, 800a8b4 <_vfiprintf_r+0x18>
 800a8ac:	6983      	ldr	r3, [r0, #24]
 800a8ae:	b90b      	cbnz	r3, 800a8b4 <_vfiprintf_r+0x18>
 800a8b0:	f7ff fe04 	bl	800a4bc <__sinit>
 800a8b4:	4b89      	ldr	r3, [pc, #548]	; (800aadc <_vfiprintf_r+0x240>)
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	d11b      	bne.n	800a8f2 <_vfiprintf_r+0x56>
 800a8ba:	6875      	ldr	r5, [r6, #4]
 800a8bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8be:	07d9      	lsls	r1, r3, #31
 800a8c0:	d405      	bmi.n	800a8ce <_vfiprintf_r+0x32>
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	059a      	lsls	r2, r3, #22
 800a8c6:	d402      	bmi.n	800a8ce <_vfiprintf_r+0x32>
 800a8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ca:	f7ff f978 	bl	8009bbe <__retarget_lock_acquire_recursive>
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	071b      	lsls	r3, r3, #28
 800a8d2:	d501      	bpl.n	800a8d8 <_vfiprintf_r+0x3c>
 800a8d4:	692b      	ldr	r3, [r5, #16]
 800a8d6:	b9eb      	cbnz	r3, 800a914 <_vfiprintf_r+0x78>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7ff fc48 	bl	800a170 <__swsetup_r>
 800a8e0:	b1c0      	cbz	r0, 800a914 <_vfiprintf_r+0x78>
 800a8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e4:	07dc      	lsls	r4, r3, #31
 800a8e6:	d50e      	bpl.n	800a906 <_vfiprintf_r+0x6a>
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	b01d      	add	sp, #116	; 0x74
 800a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f2:	4b7b      	ldr	r3, [pc, #492]	; (800aae0 <_vfiprintf_r+0x244>)
 800a8f4:	429d      	cmp	r5, r3
 800a8f6:	d101      	bne.n	800a8fc <_vfiprintf_r+0x60>
 800a8f8:	68b5      	ldr	r5, [r6, #8]
 800a8fa:	e7df      	b.n	800a8bc <_vfiprintf_r+0x20>
 800a8fc:	4b79      	ldr	r3, [pc, #484]	; (800aae4 <_vfiprintf_r+0x248>)
 800a8fe:	429d      	cmp	r5, r3
 800a900:	bf08      	it	eq
 800a902:	68f5      	ldreq	r5, [r6, #12]
 800a904:	e7da      	b.n	800a8bc <_vfiprintf_r+0x20>
 800a906:	89ab      	ldrh	r3, [r5, #12]
 800a908:	0598      	lsls	r0, r3, #22
 800a90a:	d4ed      	bmi.n	800a8e8 <_vfiprintf_r+0x4c>
 800a90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a90e:	f7ff f957 	bl	8009bc0 <__retarget_lock_release_recursive>
 800a912:	e7e9      	b.n	800a8e8 <_vfiprintf_r+0x4c>
 800a914:	2300      	movs	r3, #0
 800a916:	9309      	str	r3, [sp, #36]	; 0x24
 800a918:	2320      	movs	r3, #32
 800a91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a922:	2330      	movs	r3, #48	; 0x30
 800a924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aae8 <_vfiprintf_r+0x24c>
 800a928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a92c:	f04f 0901 	mov.w	r9, #1
 800a930:	4623      	mov	r3, r4
 800a932:	469a      	mov	sl, r3
 800a934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a938:	b10a      	cbz	r2, 800a93e <_vfiprintf_r+0xa2>
 800a93a:	2a25      	cmp	r2, #37	; 0x25
 800a93c:	d1f9      	bne.n	800a932 <_vfiprintf_r+0x96>
 800a93e:	ebba 0b04 	subs.w	fp, sl, r4
 800a942:	d00b      	beq.n	800a95c <_vfiprintf_r+0xc0>
 800a944:	465b      	mov	r3, fp
 800a946:	4622      	mov	r2, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff ff93 	bl	800a876 <__sfputs_r>
 800a950:	3001      	adds	r0, #1
 800a952:	f000 80aa 	beq.w	800aaaa <_vfiprintf_r+0x20e>
 800a956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a958:	445a      	add	r2, fp
 800a95a:	9209      	str	r2, [sp, #36]	; 0x24
 800a95c:	f89a 3000 	ldrb.w	r3, [sl]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 80a2 	beq.w	800aaaa <_vfiprintf_r+0x20e>
 800a966:	2300      	movs	r3, #0
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a970:	f10a 0a01 	add.w	sl, sl, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	9307      	str	r3, [sp, #28]
 800a978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a97c:	931a      	str	r3, [sp, #104]	; 0x68
 800a97e:	4654      	mov	r4, sl
 800a980:	2205      	movs	r2, #5
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	4858      	ldr	r0, [pc, #352]	; (800aae8 <_vfiprintf_r+0x24c>)
 800a988:	f7f5 fc22 	bl	80001d0 <memchr>
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	b9d8      	cbnz	r0, 800a9c8 <_vfiprintf_r+0x12c>
 800a990:	06d1      	lsls	r1, r2, #27
 800a992:	bf44      	itt	mi
 800a994:	2320      	movmi	r3, #32
 800a996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99a:	0713      	lsls	r3, r2, #28
 800a99c:	bf44      	itt	mi
 800a99e:	232b      	movmi	r3, #43	; 0x2b
 800a9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9aa:	d015      	beq.n	800a9d8 <_vfiprintf_r+0x13c>
 800a9ac:	9a07      	ldr	r2, [sp, #28]
 800a9ae:	4654      	mov	r4, sl
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9bc:	3b30      	subs	r3, #48	; 0x30
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d94e      	bls.n	800aa60 <_vfiprintf_r+0x1c4>
 800a9c2:	b1b0      	cbz	r0, 800a9f2 <_vfiprintf_r+0x156>
 800a9c4:	9207      	str	r2, [sp, #28]
 800a9c6:	e014      	b.n	800a9f2 <_vfiprintf_r+0x156>
 800a9c8:	eba0 0308 	sub.w	r3, r0, r8
 800a9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	46a2      	mov	sl, r4
 800a9d6:	e7d2      	b.n	800a97e <_vfiprintf_r+0xe2>
 800a9d8:	9b03      	ldr	r3, [sp, #12]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	9103      	str	r1, [sp, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfbb      	ittet	lt
 800a9e4:	425b      	neglt	r3, r3
 800a9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ea:	9307      	strge	r3, [sp, #28]
 800a9ec:	9307      	strlt	r3, [sp, #28]
 800a9ee:	bfb8      	it	lt
 800a9f0:	9204      	strlt	r2, [sp, #16]
 800a9f2:	7823      	ldrb	r3, [r4, #0]
 800a9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f6:	d10c      	bne.n	800aa12 <_vfiprintf_r+0x176>
 800a9f8:	7863      	ldrb	r3, [r4, #1]
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d135      	bne.n	800aa6a <_vfiprintf_r+0x1ce>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9203      	str	r2, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfb8      	it	lt
 800aa0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa0e:	3402      	adds	r4, #2
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aaf8 <_vfiprintf_r+0x25c>
 800aa16:	7821      	ldrb	r1, [r4, #0]
 800aa18:	2203      	movs	r2, #3
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	f7f5 fbd8 	bl	80001d0 <memchr>
 800aa20:	b140      	cbz	r0, 800aa34 <_vfiprintf_r+0x198>
 800aa22:	2340      	movs	r3, #64	; 0x40
 800aa24:	eba0 000a 	sub.w	r0, r0, sl
 800aa28:	fa03 f000 	lsl.w	r0, r3, r0
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	4303      	orrs	r3, r0
 800aa30:	3401      	adds	r4, #1
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa38:	482c      	ldr	r0, [pc, #176]	; (800aaec <_vfiprintf_r+0x250>)
 800aa3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa3e:	2206      	movs	r2, #6
 800aa40:	f7f5 fbc6 	bl	80001d0 <memchr>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d03f      	beq.n	800aac8 <_vfiprintf_r+0x22c>
 800aa48:	4b29      	ldr	r3, [pc, #164]	; (800aaf0 <_vfiprintf_r+0x254>)
 800aa4a:	bb1b      	cbnz	r3, 800aa94 <_vfiprintf_r+0x1f8>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	3307      	adds	r3, #7
 800aa50:	f023 0307 	bic.w	r3, r3, #7
 800aa54:	3308      	adds	r3, #8
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5a:	443b      	add	r3, r7
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	e767      	b.n	800a930 <_vfiprintf_r+0x94>
 800aa60:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	e7a5      	b.n	800a9b6 <_vfiprintf_r+0x11a>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	3401      	adds	r4, #1
 800aa6e:	9305      	str	r3, [sp, #20]
 800aa70:	4619      	mov	r1, r3
 800aa72:	f04f 0c0a 	mov.w	ip, #10
 800aa76:	4620      	mov	r0, r4
 800aa78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7c:	3a30      	subs	r2, #48	; 0x30
 800aa7e:	2a09      	cmp	r2, #9
 800aa80:	d903      	bls.n	800aa8a <_vfiprintf_r+0x1ee>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c5      	beq.n	800aa12 <_vfiprintf_r+0x176>
 800aa86:	9105      	str	r1, [sp, #20]
 800aa88:	e7c3      	b.n	800aa12 <_vfiprintf_r+0x176>
 800aa8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7f0      	b.n	800aa76 <_vfiprintf_r+0x1da>
 800aa94:	ab03      	add	r3, sp, #12
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	462a      	mov	r2, r5
 800aa9a:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <_vfiprintf_r+0x258>)
 800aa9c:	a904      	add	r1, sp, #16
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f3af 8000 	nop.w
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	1c78      	adds	r0, r7, #1
 800aaa8:	d1d6      	bne.n	800aa58 <_vfiprintf_r+0x1bc>
 800aaaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaac:	07d9      	lsls	r1, r3, #31
 800aaae:	d405      	bmi.n	800aabc <_vfiprintf_r+0x220>
 800aab0:	89ab      	ldrh	r3, [r5, #12]
 800aab2:	059a      	lsls	r2, r3, #22
 800aab4:	d402      	bmi.n	800aabc <_vfiprintf_r+0x220>
 800aab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aab8:	f7ff f882 	bl	8009bc0 <__retarget_lock_release_recursive>
 800aabc:	89ab      	ldrh	r3, [r5, #12]
 800aabe:	065b      	lsls	r3, r3, #25
 800aac0:	f53f af12 	bmi.w	800a8e8 <_vfiprintf_r+0x4c>
 800aac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aac6:	e711      	b.n	800a8ec <_vfiprintf_r+0x50>
 800aac8:	ab03      	add	r3, sp, #12
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	462a      	mov	r2, r5
 800aace:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <_vfiprintf_r+0x258>)
 800aad0:	a904      	add	r1, sp, #16
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 f880 	bl	800abd8 <_printf_i>
 800aad8:	e7e4      	b.n	800aaa4 <_vfiprintf_r+0x208>
 800aada:	bf00      	nop
 800aadc:	0800b5e8 	.word	0x0800b5e8
 800aae0:	0800b608 	.word	0x0800b608
 800aae4:	0800b5c8 	.word	0x0800b5c8
 800aae8:	0800b628 	.word	0x0800b628
 800aaec:	0800b632 	.word	0x0800b632
 800aaf0:	00000000 	.word	0x00000000
 800aaf4:	0800a877 	.word	0x0800a877
 800aaf8:	0800b62e 	.word	0x0800b62e

0800aafc <_printf_common>:
 800aafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	4616      	mov	r6, r2
 800ab02:	4699      	mov	r9, r3
 800ab04:	688a      	ldr	r2, [r1, #8]
 800ab06:	690b      	ldr	r3, [r1, #16]
 800ab08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	bfb8      	it	lt
 800ab10:	4613      	movlt	r3, r2
 800ab12:	6033      	str	r3, [r6, #0]
 800ab14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab18:	4607      	mov	r7, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	b10a      	cbz	r2, 800ab22 <_printf_common+0x26>
 800ab1e:	3301      	adds	r3, #1
 800ab20:	6033      	str	r3, [r6, #0]
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	0699      	lsls	r1, r3, #26
 800ab26:	bf42      	ittt	mi
 800ab28:	6833      	ldrmi	r3, [r6, #0]
 800ab2a:	3302      	addmi	r3, #2
 800ab2c:	6033      	strmi	r3, [r6, #0]
 800ab2e:	6825      	ldr	r5, [r4, #0]
 800ab30:	f015 0506 	ands.w	r5, r5, #6
 800ab34:	d106      	bne.n	800ab44 <_printf_common+0x48>
 800ab36:	f104 0a19 	add.w	sl, r4, #25
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	6832      	ldr	r2, [r6, #0]
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	dc26      	bgt.n	800ab92 <_printf_common+0x96>
 800ab44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab48:	1e13      	subs	r3, r2, #0
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	bf18      	it	ne
 800ab4e:	2301      	movne	r3, #1
 800ab50:	0692      	lsls	r2, r2, #26
 800ab52:	d42b      	bmi.n	800abac <_printf_common+0xb0>
 800ab54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab58:	4649      	mov	r1, r9
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	47c0      	blx	r8
 800ab5e:	3001      	adds	r0, #1
 800ab60:	d01e      	beq.n	800aba0 <_printf_common+0xa4>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	68e5      	ldr	r5, [r4, #12]
 800ab66:	6832      	ldr	r2, [r6, #0]
 800ab68:	f003 0306 	and.w	r3, r3, #6
 800ab6c:	2b04      	cmp	r3, #4
 800ab6e:	bf08      	it	eq
 800ab70:	1aad      	subeq	r5, r5, r2
 800ab72:	68a3      	ldr	r3, [r4, #8]
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	bf0c      	ite	eq
 800ab78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab7c:	2500      	movne	r5, #0
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	bfc4      	itt	gt
 800ab82:	1a9b      	subgt	r3, r3, r2
 800ab84:	18ed      	addgt	r5, r5, r3
 800ab86:	2600      	movs	r6, #0
 800ab88:	341a      	adds	r4, #26
 800ab8a:	42b5      	cmp	r5, r6
 800ab8c:	d11a      	bne.n	800abc4 <_printf_common+0xc8>
 800ab8e:	2000      	movs	r0, #0
 800ab90:	e008      	b.n	800aba4 <_printf_common+0xa8>
 800ab92:	2301      	movs	r3, #1
 800ab94:	4652      	mov	r2, sl
 800ab96:	4649      	mov	r1, r9
 800ab98:	4638      	mov	r0, r7
 800ab9a:	47c0      	blx	r8
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	d103      	bne.n	800aba8 <_printf_common+0xac>
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba8:	3501      	adds	r5, #1
 800abaa:	e7c6      	b.n	800ab3a <_printf_common+0x3e>
 800abac:	18e1      	adds	r1, r4, r3
 800abae:	1c5a      	adds	r2, r3, #1
 800abb0:	2030      	movs	r0, #48	; 0x30
 800abb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abb6:	4422      	add	r2, r4
 800abb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abc0:	3302      	adds	r3, #2
 800abc2:	e7c7      	b.n	800ab54 <_printf_common+0x58>
 800abc4:	2301      	movs	r3, #1
 800abc6:	4622      	mov	r2, r4
 800abc8:	4649      	mov	r1, r9
 800abca:	4638      	mov	r0, r7
 800abcc:	47c0      	blx	r8
 800abce:	3001      	adds	r0, #1
 800abd0:	d0e6      	beq.n	800aba0 <_printf_common+0xa4>
 800abd2:	3601      	adds	r6, #1
 800abd4:	e7d9      	b.n	800ab8a <_printf_common+0x8e>
	...

0800abd8 <_printf_i>:
 800abd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abdc:	460c      	mov	r4, r1
 800abde:	4691      	mov	r9, r2
 800abe0:	7e27      	ldrb	r7, [r4, #24]
 800abe2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800abe4:	2f78      	cmp	r7, #120	; 0x78
 800abe6:	4680      	mov	r8, r0
 800abe8:	469a      	mov	sl, r3
 800abea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abee:	d807      	bhi.n	800ac00 <_printf_i+0x28>
 800abf0:	2f62      	cmp	r7, #98	; 0x62
 800abf2:	d80a      	bhi.n	800ac0a <_printf_i+0x32>
 800abf4:	2f00      	cmp	r7, #0
 800abf6:	f000 80d8 	beq.w	800adaa <_printf_i+0x1d2>
 800abfa:	2f58      	cmp	r7, #88	; 0x58
 800abfc:	f000 80a3 	beq.w	800ad46 <_printf_i+0x16e>
 800ac00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac08:	e03a      	b.n	800ac80 <_printf_i+0xa8>
 800ac0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac0e:	2b15      	cmp	r3, #21
 800ac10:	d8f6      	bhi.n	800ac00 <_printf_i+0x28>
 800ac12:	a001      	add	r0, pc, #4	; (adr r0, 800ac18 <_printf_i+0x40>)
 800ac14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac18:	0800ac71 	.word	0x0800ac71
 800ac1c:	0800ac85 	.word	0x0800ac85
 800ac20:	0800ac01 	.word	0x0800ac01
 800ac24:	0800ac01 	.word	0x0800ac01
 800ac28:	0800ac01 	.word	0x0800ac01
 800ac2c:	0800ac01 	.word	0x0800ac01
 800ac30:	0800ac85 	.word	0x0800ac85
 800ac34:	0800ac01 	.word	0x0800ac01
 800ac38:	0800ac01 	.word	0x0800ac01
 800ac3c:	0800ac01 	.word	0x0800ac01
 800ac40:	0800ac01 	.word	0x0800ac01
 800ac44:	0800ad91 	.word	0x0800ad91
 800ac48:	0800acb5 	.word	0x0800acb5
 800ac4c:	0800ad73 	.word	0x0800ad73
 800ac50:	0800ac01 	.word	0x0800ac01
 800ac54:	0800ac01 	.word	0x0800ac01
 800ac58:	0800adb3 	.word	0x0800adb3
 800ac5c:	0800ac01 	.word	0x0800ac01
 800ac60:	0800acb5 	.word	0x0800acb5
 800ac64:	0800ac01 	.word	0x0800ac01
 800ac68:	0800ac01 	.word	0x0800ac01
 800ac6c:	0800ad7b 	.word	0x0800ad7b
 800ac70:	680b      	ldr	r3, [r1, #0]
 800ac72:	1d1a      	adds	r2, r3, #4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	600a      	str	r2, [r1, #0]
 800ac78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac80:	2301      	movs	r3, #1
 800ac82:	e0a3      	b.n	800adcc <_printf_i+0x1f4>
 800ac84:	6825      	ldr	r5, [r4, #0]
 800ac86:	6808      	ldr	r0, [r1, #0]
 800ac88:	062e      	lsls	r6, r5, #24
 800ac8a:	f100 0304 	add.w	r3, r0, #4
 800ac8e:	d50a      	bpl.n	800aca6 <_printf_i+0xce>
 800ac90:	6805      	ldr	r5, [r0, #0]
 800ac92:	600b      	str	r3, [r1, #0]
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	da03      	bge.n	800aca0 <_printf_i+0xc8>
 800ac98:	232d      	movs	r3, #45	; 0x2d
 800ac9a:	426d      	negs	r5, r5
 800ac9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aca0:	485e      	ldr	r0, [pc, #376]	; (800ae1c <_printf_i+0x244>)
 800aca2:	230a      	movs	r3, #10
 800aca4:	e019      	b.n	800acda <_printf_i+0x102>
 800aca6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800acaa:	6805      	ldr	r5, [r0, #0]
 800acac:	600b      	str	r3, [r1, #0]
 800acae:	bf18      	it	ne
 800acb0:	b22d      	sxthne	r5, r5
 800acb2:	e7ef      	b.n	800ac94 <_printf_i+0xbc>
 800acb4:	680b      	ldr	r3, [r1, #0]
 800acb6:	6825      	ldr	r5, [r4, #0]
 800acb8:	1d18      	adds	r0, r3, #4
 800acba:	6008      	str	r0, [r1, #0]
 800acbc:	0628      	lsls	r0, r5, #24
 800acbe:	d501      	bpl.n	800acc4 <_printf_i+0xec>
 800acc0:	681d      	ldr	r5, [r3, #0]
 800acc2:	e002      	b.n	800acca <_printf_i+0xf2>
 800acc4:	0669      	lsls	r1, r5, #25
 800acc6:	d5fb      	bpl.n	800acc0 <_printf_i+0xe8>
 800acc8:	881d      	ldrh	r5, [r3, #0]
 800acca:	4854      	ldr	r0, [pc, #336]	; (800ae1c <_printf_i+0x244>)
 800accc:	2f6f      	cmp	r7, #111	; 0x6f
 800acce:	bf0c      	ite	eq
 800acd0:	2308      	moveq	r3, #8
 800acd2:	230a      	movne	r3, #10
 800acd4:	2100      	movs	r1, #0
 800acd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acda:	6866      	ldr	r6, [r4, #4]
 800acdc:	60a6      	str	r6, [r4, #8]
 800acde:	2e00      	cmp	r6, #0
 800ace0:	bfa2      	ittt	ge
 800ace2:	6821      	ldrge	r1, [r4, #0]
 800ace4:	f021 0104 	bicge.w	r1, r1, #4
 800ace8:	6021      	strge	r1, [r4, #0]
 800acea:	b90d      	cbnz	r5, 800acf0 <_printf_i+0x118>
 800acec:	2e00      	cmp	r6, #0
 800acee:	d04d      	beq.n	800ad8c <_printf_i+0x1b4>
 800acf0:	4616      	mov	r6, r2
 800acf2:	fbb5 f1f3 	udiv	r1, r5, r3
 800acf6:	fb03 5711 	mls	r7, r3, r1, r5
 800acfa:	5dc7      	ldrb	r7, [r0, r7]
 800acfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad00:	462f      	mov	r7, r5
 800ad02:	42bb      	cmp	r3, r7
 800ad04:	460d      	mov	r5, r1
 800ad06:	d9f4      	bls.n	800acf2 <_printf_i+0x11a>
 800ad08:	2b08      	cmp	r3, #8
 800ad0a:	d10b      	bne.n	800ad24 <_printf_i+0x14c>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	07df      	lsls	r7, r3, #31
 800ad10:	d508      	bpl.n	800ad24 <_printf_i+0x14c>
 800ad12:	6923      	ldr	r3, [r4, #16]
 800ad14:	6861      	ldr	r1, [r4, #4]
 800ad16:	4299      	cmp	r1, r3
 800ad18:	bfde      	ittt	le
 800ad1a:	2330      	movle	r3, #48	; 0x30
 800ad1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad24:	1b92      	subs	r2, r2, r6
 800ad26:	6122      	str	r2, [r4, #16]
 800ad28:	f8cd a000 	str.w	sl, [sp]
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	aa03      	add	r2, sp, #12
 800ad30:	4621      	mov	r1, r4
 800ad32:	4640      	mov	r0, r8
 800ad34:	f7ff fee2 	bl	800aafc <_printf_common>
 800ad38:	3001      	adds	r0, #1
 800ad3a:	d14c      	bne.n	800add6 <_printf_i+0x1fe>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	b004      	add	sp, #16
 800ad42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad46:	4835      	ldr	r0, [pc, #212]	; (800ae1c <_printf_i+0x244>)
 800ad48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad4c:	6823      	ldr	r3, [r4, #0]
 800ad4e:	680e      	ldr	r6, [r1, #0]
 800ad50:	061f      	lsls	r7, r3, #24
 800ad52:	f856 5b04 	ldr.w	r5, [r6], #4
 800ad56:	600e      	str	r6, [r1, #0]
 800ad58:	d514      	bpl.n	800ad84 <_printf_i+0x1ac>
 800ad5a:	07d9      	lsls	r1, r3, #31
 800ad5c:	bf44      	itt	mi
 800ad5e:	f043 0320 	orrmi.w	r3, r3, #32
 800ad62:	6023      	strmi	r3, [r4, #0]
 800ad64:	b91d      	cbnz	r5, 800ad6e <_printf_i+0x196>
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	f023 0320 	bic.w	r3, r3, #32
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	2310      	movs	r3, #16
 800ad70:	e7b0      	b.n	800acd4 <_printf_i+0xfc>
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	f043 0320 	orr.w	r3, r3, #32
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	2378      	movs	r3, #120	; 0x78
 800ad7c:	4828      	ldr	r0, [pc, #160]	; (800ae20 <_printf_i+0x248>)
 800ad7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad82:	e7e3      	b.n	800ad4c <_printf_i+0x174>
 800ad84:	065e      	lsls	r6, r3, #25
 800ad86:	bf48      	it	mi
 800ad88:	b2ad      	uxthmi	r5, r5
 800ad8a:	e7e6      	b.n	800ad5a <_printf_i+0x182>
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	e7bb      	b.n	800ad08 <_printf_i+0x130>
 800ad90:	680b      	ldr	r3, [r1, #0]
 800ad92:	6826      	ldr	r6, [r4, #0]
 800ad94:	6960      	ldr	r0, [r4, #20]
 800ad96:	1d1d      	adds	r5, r3, #4
 800ad98:	600d      	str	r5, [r1, #0]
 800ad9a:	0635      	lsls	r5, r6, #24
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	d501      	bpl.n	800ada4 <_printf_i+0x1cc>
 800ada0:	6018      	str	r0, [r3, #0]
 800ada2:	e002      	b.n	800adaa <_printf_i+0x1d2>
 800ada4:	0671      	lsls	r1, r6, #25
 800ada6:	d5fb      	bpl.n	800ada0 <_printf_i+0x1c8>
 800ada8:	8018      	strh	r0, [r3, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	6123      	str	r3, [r4, #16]
 800adae:	4616      	mov	r6, r2
 800adb0:	e7ba      	b.n	800ad28 <_printf_i+0x150>
 800adb2:	680b      	ldr	r3, [r1, #0]
 800adb4:	1d1a      	adds	r2, r3, #4
 800adb6:	600a      	str	r2, [r1, #0]
 800adb8:	681e      	ldr	r6, [r3, #0]
 800adba:	6862      	ldr	r2, [r4, #4]
 800adbc:	2100      	movs	r1, #0
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7f5 fa06 	bl	80001d0 <memchr>
 800adc4:	b108      	cbz	r0, 800adca <_printf_i+0x1f2>
 800adc6:	1b80      	subs	r0, r0, r6
 800adc8:	6060      	str	r0, [r4, #4]
 800adca:	6863      	ldr	r3, [r4, #4]
 800adcc:	6123      	str	r3, [r4, #16]
 800adce:	2300      	movs	r3, #0
 800add0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800add4:	e7a8      	b.n	800ad28 <_printf_i+0x150>
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	4632      	mov	r2, r6
 800adda:	4649      	mov	r1, r9
 800addc:	4640      	mov	r0, r8
 800adde:	47d0      	blx	sl
 800ade0:	3001      	adds	r0, #1
 800ade2:	d0ab      	beq.n	800ad3c <_printf_i+0x164>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	079b      	lsls	r3, r3, #30
 800ade8:	d413      	bmi.n	800ae12 <_printf_i+0x23a>
 800adea:	68e0      	ldr	r0, [r4, #12]
 800adec:	9b03      	ldr	r3, [sp, #12]
 800adee:	4298      	cmp	r0, r3
 800adf0:	bfb8      	it	lt
 800adf2:	4618      	movlt	r0, r3
 800adf4:	e7a4      	b.n	800ad40 <_printf_i+0x168>
 800adf6:	2301      	movs	r3, #1
 800adf8:	4632      	mov	r2, r6
 800adfa:	4649      	mov	r1, r9
 800adfc:	4640      	mov	r0, r8
 800adfe:	47d0      	blx	sl
 800ae00:	3001      	adds	r0, #1
 800ae02:	d09b      	beq.n	800ad3c <_printf_i+0x164>
 800ae04:	3501      	adds	r5, #1
 800ae06:	68e3      	ldr	r3, [r4, #12]
 800ae08:	9903      	ldr	r1, [sp, #12]
 800ae0a:	1a5b      	subs	r3, r3, r1
 800ae0c:	42ab      	cmp	r3, r5
 800ae0e:	dcf2      	bgt.n	800adf6 <_printf_i+0x21e>
 800ae10:	e7eb      	b.n	800adea <_printf_i+0x212>
 800ae12:	2500      	movs	r5, #0
 800ae14:	f104 0619 	add.w	r6, r4, #25
 800ae18:	e7f5      	b.n	800ae06 <_printf_i+0x22e>
 800ae1a:	bf00      	nop
 800ae1c:	0800b639 	.word	0x0800b639
 800ae20:	0800b64a 	.word	0x0800b64a

0800ae24 <_putc_r>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	460d      	mov	r5, r1
 800ae28:	4614      	mov	r4, r2
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b118      	cbz	r0, 800ae36 <_putc_r+0x12>
 800ae2e:	6983      	ldr	r3, [r0, #24]
 800ae30:	b90b      	cbnz	r3, 800ae36 <_putc_r+0x12>
 800ae32:	f7ff fb43 	bl	800a4bc <__sinit>
 800ae36:	4b1c      	ldr	r3, [pc, #112]	; (800aea8 <_putc_r+0x84>)
 800ae38:	429c      	cmp	r4, r3
 800ae3a:	d124      	bne.n	800ae86 <_putc_r+0x62>
 800ae3c:	6874      	ldr	r4, [r6, #4]
 800ae3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae40:	07d8      	lsls	r0, r3, #31
 800ae42:	d405      	bmi.n	800ae50 <_putc_r+0x2c>
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	0599      	lsls	r1, r3, #22
 800ae48:	d402      	bmi.n	800ae50 <_putc_r+0x2c>
 800ae4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae4c:	f7fe feb7 	bl	8009bbe <__retarget_lock_acquire_recursive>
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	3b01      	subs	r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	da05      	bge.n	800ae66 <_putc_r+0x42>
 800ae5a:	69a2      	ldr	r2, [r4, #24]
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	db1c      	blt.n	800ae9a <_putc_r+0x76>
 800ae60:	b2eb      	uxtb	r3, r5
 800ae62:	2b0a      	cmp	r3, #10
 800ae64:	d019      	beq.n	800ae9a <_putc_r+0x76>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	701d      	strb	r5, [r3, #0]
 800ae6e:	b2ed      	uxtb	r5, r5
 800ae70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae72:	07da      	lsls	r2, r3, #31
 800ae74:	d405      	bmi.n	800ae82 <_putc_r+0x5e>
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	059b      	lsls	r3, r3, #22
 800ae7a:	d402      	bmi.n	800ae82 <_putc_r+0x5e>
 800ae7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7e:	f7fe fe9f 	bl	8009bc0 <__retarget_lock_release_recursive>
 800ae82:	4628      	mov	r0, r5
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	4b09      	ldr	r3, [pc, #36]	; (800aeac <_putc_r+0x88>)
 800ae88:	429c      	cmp	r4, r3
 800ae8a:	d101      	bne.n	800ae90 <_putc_r+0x6c>
 800ae8c:	68b4      	ldr	r4, [r6, #8]
 800ae8e:	e7d6      	b.n	800ae3e <_putc_r+0x1a>
 800ae90:	4b07      	ldr	r3, [pc, #28]	; (800aeb0 <_putc_r+0x8c>)
 800ae92:	429c      	cmp	r4, r3
 800ae94:	bf08      	it	eq
 800ae96:	68f4      	ldreq	r4, [r6, #12]
 800ae98:	e7d1      	b.n	800ae3e <_putc_r+0x1a>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f7ff f914 	bl	800a0cc <__swbuf_r>
 800aea4:	4605      	mov	r5, r0
 800aea6:	e7e3      	b.n	800ae70 <_putc_r+0x4c>
 800aea8:	0800b5e8 	.word	0x0800b5e8
 800aeac:	0800b608 	.word	0x0800b608
 800aeb0:	0800b5c8 	.word	0x0800b5c8

0800aeb4 <_sbrk_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d06      	ldr	r5, [pc, #24]	; (800aed0 <_sbrk_r+0x1c>)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	4604      	mov	r4, r0
 800aebc:	4608      	mov	r0, r1
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	f7f5 ffda 	bl	8000e78 <_sbrk>
 800aec4:	1c43      	adds	r3, r0, #1
 800aec6:	d102      	bne.n	800aece <_sbrk_r+0x1a>
 800aec8:	682b      	ldr	r3, [r5, #0]
 800aeca:	b103      	cbz	r3, 800aece <_sbrk_r+0x1a>
 800aecc:	6023      	str	r3, [r4, #0]
 800aece:	bd38      	pop	{r3, r4, r5, pc}
 800aed0:	200020d0 	.word	0x200020d0

0800aed4 <__sread>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	460c      	mov	r4, r1
 800aed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aedc:	f000 f8a8 	bl	800b030 <_read_r>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	bfab      	itete	ge
 800aee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aee6:	89a3      	ldrhlt	r3, [r4, #12]
 800aee8:	181b      	addge	r3, r3, r0
 800aeea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeee:	bfac      	ite	ge
 800aef0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aef2:	81a3      	strhlt	r3, [r4, #12]
 800aef4:	bd10      	pop	{r4, pc}

0800aef6 <__swrite>:
 800aef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefa:	461f      	mov	r7, r3
 800aefc:	898b      	ldrh	r3, [r1, #12]
 800aefe:	05db      	lsls	r3, r3, #23
 800af00:	4605      	mov	r5, r0
 800af02:	460c      	mov	r4, r1
 800af04:	4616      	mov	r6, r2
 800af06:	d505      	bpl.n	800af14 <__swrite+0x1e>
 800af08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0c:	2302      	movs	r3, #2
 800af0e:	2200      	movs	r2, #0
 800af10:	f000 f870 	bl	800aff4 <_lseek_r>
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af1e:	81a3      	strh	r3, [r4, #12]
 800af20:	4632      	mov	r2, r6
 800af22:	463b      	mov	r3, r7
 800af24:	4628      	mov	r0, r5
 800af26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af2a:	f000 b817 	b.w	800af5c <_write_r>

0800af2e <__sseek>:
 800af2e:	b510      	push	{r4, lr}
 800af30:	460c      	mov	r4, r1
 800af32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af36:	f000 f85d 	bl	800aff4 <_lseek_r>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	bf15      	itete	ne
 800af40:	6560      	strne	r0, [r4, #84]	; 0x54
 800af42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af4a:	81a3      	strheq	r3, [r4, #12]
 800af4c:	bf18      	it	ne
 800af4e:	81a3      	strhne	r3, [r4, #12]
 800af50:	bd10      	pop	{r4, pc}

0800af52 <__sclose>:
 800af52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af56:	f000 b81b 	b.w	800af90 <_close_r>
	...

0800af5c <_write_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d07      	ldr	r5, [pc, #28]	; (800af7c <_write_r+0x20>)
 800af60:	4604      	mov	r4, r0
 800af62:	4608      	mov	r0, r1
 800af64:	4611      	mov	r1, r2
 800af66:	2200      	movs	r2, #0
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f7f5 ff33 	bl	8000dd6 <_write>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_write_r+0x1e>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_write_r+0x1e>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	200020d0 	.word	0x200020d0

0800af80 <abort>:
 800af80:	b508      	push	{r3, lr}
 800af82:	2006      	movs	r0, #6
 800af84:	f000 f88e 	bl	800b0a4 <raise>
 800af88:	2001      	movs	r0, #1
 800af8a:	f7f5 fefd 	bl	8000d88 <_exit>
	...

0800af90 <_close_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_close_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f5 ff37 	bl	8000e0e <_close>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_close_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_close_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	200020d0 	.word	0x200020d0

0800afb0 <_fstat_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d07      	ldr	r5, [pc, #28]	; (800afd0 <_fstat_r+0x20>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	4611      	mov	r1, r2
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	f7f5 ff32 	bl	8000e26 <_fstat>
 800afc2:	1c43      	adds	r3, r0, #1
 800afc4:	d102      	bne.n	800afcc <_fstat_r+0x1c>
 800afc6:	682b      	ldr	r3, [r5, #0]
 800afc8:	b103      	cbz	r3, 800afcc <_fstat_r+0x1c>
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	bd38      	pop	{r3, r4, r5, pc}
 800afce:	bf00      	nop
 800afd0:	200020d0 	.word	0x200020d0

0800afd4 <_isatty_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	; (800aff0 <_isatty_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f5 ff31 	bl	8000e46 <_isatty>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_isatty_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_isatty_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	200020d0 	.word	0x200020d0

0800aff4 <_lseek_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	; (800b014 <_lseek_r+0x20>)
 800aff8:	4604      	mov	r4, r0
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	2200      	movs	r2, #0
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f7f5 ff2a 	bl	8000e5c <_lseek>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_lseek_r+0x1e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_lseek_r+0x1e>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	200020d0 	.word	0x200020d0

0800b018 <__malloc_lock>:
 800b018:	4801      	ldr	r0, [pc, #4]	; (800b020 <__malloc_lock+0x8>)
 800b01a:	f7fe bdd0 	b.w	8009bbe <__retarget_lock_acquire_recursive>
 800b01e:	bf00      	nop
 800b020:	200020c8 	.word	0x200020c8

0800b024 <__malloc_unlock>:
 800b024:	4801      	ldr	r0, [pc, #4]	; (800b02c <__malloc_unlock+0x8>)
 800b026:	f7fe bdcb 	b.w	8009bc0 <__retarget_lock_release_recursive>
 800b02a:	bf00      	nop
 800b02c:	200020c8 	.word	0x200020c8

0800b030 <_read_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d07      	ldr	r5, [pc, #28]	; (800b050 <_read_r+0x20>)
 800b034:	4604      	mov	r4, r0
 800b036:	4608      	mov	r0, r1
 800b038:	4611      	mov	r1, r2
 800b03a:	2200      	movs	r2, #0
 800b03c:	602a      	str	r2, [r5, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	f7f5 feac 	bl	8000d9c <_read>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_read_r+0x1e>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_read_r+0x1e>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	200020d0 	.word	0x200020d0

0800b054 <_raise_r>:
 800b054:	291f      	cmp	r1, #31
 800b056:	b538      	push	{r3, r4, r5, lr}
 800b058:	4604      	mov	r4, r0
 800b05a:	460d      	mov	r5, r1
 800b05c:	d904      	bls.n	800b068 <_raise_r+0x14>
 800b05e:	2316      	movs	r3, #22
 800b060:	6003      	str	r3, [r0, #0]
 800b062:	f04f 30ff 	mov.w	r0, #4294967295
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b06a:	b112      	cbz	r2, 800b072 <_raise_r+0x1e>
 800b06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b070:	b94b      	cbnz	r3, 800b086 <_raise_r+0x32>
 800b072:	4620      	mov	r0, r4
 800b074:	f000 f830 	bl	800b0d8 <_getpid_r>
 800b078:	462a      	mov	r2, r5
 800b07a:	4601      	mov	r1, r0
 800b07c:	4620      	mov	r0, r4
 800b07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b082:	f000 b817 	b.w	800b0b4 <_kill_r>
 800b086:	2b01      	cmp	r3, #1
 800b088:	d00a      	beq.n	800b0a0 <_raise_r+0x4c>
 800b08a:	1c59      	adds	r1, r3, #1
 800b08c:	d103      	bne.n	800b096 <_raise_r+0x42>
 800b08e:	2316      	movs	r3, #22
 800b090:	6003      	str	r3, [r0, #0]
 800b092:	2001      	movs	r0, #1
 800b094:	e7e7      	b.n	800b066 <_raise_r+0x12>
 800b096:	2400      	movs	r4, #0
 800b098:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b09c:	4628      	mov	r0, r5
 800b09e:	4798      	blx	r3
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e7e0      	b.n	800b066 <_raise_r+0x12>

0800b0a4 <raise>:
 800b0a4:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <raise+0xc>)
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	6818      	ldr	r0, [r3, #0]
 800b0aa:	f7ff bfd3 	b.w	800b054 <_raise_r>
 800b0ae:	bf00      	nop
 800b0b0:	20000018 	.word	0x20000018

0800b0b4 <_kill_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4d07      	ldr	r5, [pc, #28]	; (800b0d4 <_kill_r+0x20>)
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	4608      	mov	r0, r1
 800b0be:	4611      	mov	r1, r2
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	f7f5 fe51 	bl	8000d68 <_kill>
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d102      	bne.n	800b0d0 <_kill_r+0x1c>
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	b103      	cbz	r3, 800b0d0 <_kill_r+0x1c>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	bf00      	nop
 800b0d4:	200020d0 	.word	0x200020d0

0800b0d8 <_getpid_r>:
 800b0d8:	f7f5 be3e 	b.w	8000d58 <_getpid>

0800b0dc <_init>:
 800b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0de:	bf00      	nop
 800b0e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0e2:	bc08      	pop	{r3}
 800b0e4:	469e      	mov	lr, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <_fini>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	bf00      	nop
 800b0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ee:	bc08      	pop	{r3}
 800b0f0:	469e      	mov	lr, r3
 800b0f2:	4770      	bx	lr
